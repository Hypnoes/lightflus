// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `storage/storage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

use crate::common::{common, table};

#[derive(PartialEq,Clone,Default)]
pub struct QueryRequest {
    // message fields
    pub query: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRequest {
    fn default() -> &'a QueryRequest {
        <QueryRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryRequest {
    pub fn new() -> QueryRequest {
        ::std::default::Default::default()
    }

    // string query = 1;


    pub fn get_query(&self) -> &str {
        &self.query
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: ::std::string::String) {
        self.query = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut ::std::string::String {
        &mut self.query
    }

    // Take field
    pub fn take_query(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.query.is_empty() {
            os.write_string(1, &self.query)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRequest {
        QueryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "query",
                |m: &QueryRequest| { &m.query },
                |m: &mut QueryRequest| { &mut m.query },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRequest>(
                "QueryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRequest {
        static instance: ::protobuf::rt::LazyV2<QueryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRequest::new)
    }
}

impl ::protobuf::Clear for QueryRequest {
    fn clear(&mut self) {
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryResponse {
    // message fields
    pub resp: ::protobuf::SingularPtrField<common::Response>,
    // message oneof groups
    pub result: ::std::option::Option<QueryResponse_oneof_result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum QueryResponse_oneof_result {
    datatable(table::DataTable),
    schema(table::Schema),
    updated(table::UpdateResults),
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    // .common.DataTable datatable = 1;


    pub fn get_datatable(&self) -> &table::DataTable {
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::datatable(ref v)) => v,
            _ => <table::DataTable as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_datatable(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_datatable(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::datatable(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_datatable(&mut self, v: table::DataTable) {
        self.result = ::std::option::Option::Some(QueryResponse_oneof_result::datatable(v))
    }

    // Mutable pointer to the field.
    pub fn mut_datatable(&mut self) -> &mut table::DataTable {
        if let ::std::option::Option::Some(QueryResponse_oneof_result::datatable(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(QueryResponse_oneof_result::datatable(table::DataTable::new()));
        }
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::datatable(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_datatable(&mut self) -> table::DataTable {
        if self.has_datatable() {
            match self.result.take() {
                ::std::option::Option::Some(QueryResponse_oneof_result::datatable(v)) => v,
                _ => panic!(),
            }
        } else {
            table::DataTable::new()
        }
    }

    // .common.Schema schema = 2;


    pub fn get_schema(&self) -> &table::Schema {
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::schema(ref v)) => v,
            _ => <table::Schema as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_schema(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_schema(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::schema(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.result = ::std::option::Option::Some(QueryResponse_oneof_result::schema(v))
    }

    // Mutable pointer to the field.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if let ::std::option::Option::Some(QueryResponse_oneof_result::schema(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(QueryResponse_oneof_result::schema(table::Schema::new()));
        }
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::schema(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        if self.has_schema() {
            match self.result.take() {
                ::std::option::Option::Some(QueryResponse_oneof_result::schema(v)) => v,
                _ => panic!(),
            }
        } else {
            table::Schema::new()
        }
    }

    // .common.UpdateResults updated = 3;


    pub fn get_updated(&self) -> &table::UpdateResults {
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::updated(ref v)) => v,
            _ => <table::UpdateResults as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_updated(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_updated(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::updated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_updated(&mut self, v: table::UpdateResults) {
        self.result = ::std::option::Option::Some(QueryResponse_oneof_result::updated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_updated(&mut self) -> &mut table::UpdateResults {
        if let ::std::option::Option::Some(QueryResponse_oneof_result::updated(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(QueryResponse_oneof_result::updated(table::UpdateResults::new()));
        }
        match self.result {
            ::std::option::Option::Some(QueryResponse_oneof_result::updated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_updated(&mut self) -> table::UpdateResults {
        if self.has_updated() {
            match self.result.take() {
                ::std::option::Option::Some(QueryResponse_oneof_result::updated(v)) => v,
                _ => panic!(),
            }
        } else {
            table::UpdateResults::new()
        }
    }

    // .common.Response resp = 4;


    pub fn get_resp(&self) -> &common::Response {
        self.resp.as_ref().unwrap_or_else(|| <common::Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> common::Response {
        self.resp.take().unwrap_or_else(|| common::Response::new())
    }
}

impl ::protobuf::Message for QueryResponse {
    fn is_initialized(&self) -> bool {
        if let Some(QueryResponse_oneof_result::datatable(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(QueryResponse_oneof_result::schema(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(QueryResponse_oneof_result::updated(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(QueryResponse_oneof_result::datatable(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(QueryResponse_oneof_result::schema(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(QueryResponse_oneof_result::updated(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &QueryResponse_oneof_result::datatable(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &QueryResponse_oneof_result::schema(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &QueryResponse_oneof_result::updated(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &QueryResponse_oneof_result::datatable(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &QueryResponse_oneof_result::schema(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &QueryResponse_oneof_result::updated(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, table::DataTable>(
                "datatable",
                QueryResponse::has_datatable,
                QueryResponse::get_datatable,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, table::Schema>(
                "schema",
                QueryResponse::has_schema,
                QueryResponse::get_schema,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, table::UpdateResults>(
                "updated",
                QueryResponse::has_updated,
                QueryResponse::get_updated,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::Response>>(
                "resp",
                |m: &QueryResponse| { &m.resp },
                |m: &mut QueryResponse| { &mut m.resp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryResponse>(
                "QueryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: ::protobuf::rt::LazyV2<QueryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryResponse::new)
    }
}

impl ::protobuf::Clear for QueryResponse {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeChangeStreamRequest {
    // message fields
    pub table_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeChangeStreamRequest {
    fn default() -> &'a SubscribeChangeStreamRequest {
        <SubscribeChangeStreamRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeChangeStreamRequest {
    pub fn new() -> SubscribeChangeStreamRequest {
        ::std::default::Default::default()
    }

    // uint32 table_id = 1;


    pub fn get_table_id(&self) -> u32 {
        self.table_id
    }
    pub fn clear_table_id(&mut self) {
        self.table_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_table_id(&mut self, v: u32) {
        self.table_id = v;
    }
}

impl ::protobuf::Message for SubscribeChangeStreamRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.table_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.table_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.table_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.table_id != 0 {
            os.write_uint32(1, self.table_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeChangeStreamRequest {
        SubscribeChangeStreamRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "table_id",
                |m: &SubscribeChangeStreamRequest| { &m.table_id },
                |m: &mut SubscribeChangeStreamRequest| { &mut m.table_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscribeChangeStreamRequest>(
                "SubscribeChangeStreamRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscribeChangeStreamRequest {
        static instance: ::protobuf::rt::LazyV2<SubscribeChangeStreamRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscribeChangeStreamRequest::new)
    }
}

impl ::protobuf::Clear for SubscribeChangeStreamRequest {
    fn clear(&mut self) {
        self.table_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeChangeStreamRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeChangeStreamRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeChangeStreamResponse {
    // message fields
    pub subscribe_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeChangeStreamResponse {
    fn default() -> &'a SubscribeChangeStreamResponse {
        <SubscribeChangeStreamResponse as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeChangeStreamResponse {
    pub fn new() -> SubscribeChangeStreamResponse {
        ::std::default::Default::default()
    }

    // uint32 subscribe_id = 1;


    pub fn get_subscribe_id(&self) -> u32 {
        self.subscribe_id
    }
    pub fn clear_subscribe_id(&mut self) {
        self.subscribe_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_subscribe_id(&mut self, v: u32) {
        self.subscribe_id = v;
    }
}

impl ::protobuf::Message for SubscribeChangeStreamResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.subscribe_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.subscribe_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.subscribe_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.subscribe_id != 0 {
            os.write_uint32(1, self.subscribe_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeChangeStreamResponse {
        SubscribeChangeStreamResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "subscribe_id",
                |m: &SubscribeChangeStreamResponse| { &m.subscribe_id },
                |m: &mut SubscribeChangeStreamResponse| { &mut m.subscribe_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscribeChangeStreamResponse>(
                "SubscribeChangeStreamResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscribeChangeStreamResponse {
        static instance: ::protobuf::rt::LazyV2<SubscribeChangeStreamResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscribeChangeStreamResponse::new)
    }
}

impl ::protobuf::Clear for SubscribeChangeStreamResponse {
    fn clear(&mut self) {
        self.subscribe_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeChangeStreamResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeChangeStreamResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15storage/storage.proto\x12\x05proto\x1a\x1fgoogle/protobuf/timestam\
    p.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x12common/table.proto\
    \x1a\x13common/common.proto\x1a\x12common/probe.proto\"$\n\x0cQueryReque\
    st\x12\x14\n\x05query\x18\x01\x20\x01(\tR\x05query\"\xcf\x01\n\rQueryRes\
    ponse\x121\n\tdatatable\x18\x01\x20\x01(\x0b2\x11.common.DataTableH\0R\t\
    datatable\x12(\n\x06schema\x18\x02\x20\x01(\x0b2\x0e.common.SchemaH\0R\
    \x06schema\x121\n\x07updated\x18\x03\x20\x01(\x0b2\x15.common.UpdateResu\
    ltsH\0R\x07updated\x12$\n\x04resp\x18\x04\x20\x01(\x0b2\x10.common.Respo\
    nseR\x04respB\x08\n\x06result\"9\n\x1cSubscribeChangeStreamRequest\x12\
    \x19\n\x08table_id\x18\x01\x20\x01(\rR\x07tableId\"B\n\x1dSubscribeChang\
    eStreamResponse\x12!\n\x0csubscribe_id\x18\x01\x20\x01(\rR\x0bsubscribeI\
    d2\xe1\x01\n\x0bQueryEngine\x126\n\x05Probe\x12\x14.common.ProbeRequest\
    \x1a\x15.common.ProbeResponse\"\0\x124\n\x05Query\x12\x13.proto.QueryReq\
    uest\x1a\x14.proto.QueryResponse\"\0\x12d\n\x15SubscribeChangeStream\x12\
    #.proto.SubscribeChangeStreamRequest\x1a$.proto.SubscribeChangeStreamRes\
    ponse\"\0B$Z\"tableflow/alpha/query_engine/protoJ\xa2\x06\n\x06\x12\x04\
    \0\0%\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\
    \x0e\n\t\n\x02\x03\0\x12\x03\x03\0)\n\t\n\x02\x03\x01\x12\x03\x04\0&\n\t\
    \n\x02\x03\x02\x12\x03\x05\0\x1c\n\t\n\x02\x03\x03\x12\x03\x06\0\x1d\n\t\
    \n\x02\x03\x04\x12\x03\x07\0\x1c\n\x08\n\x01\x08\x12\x03\t\09\n\t\n\x02\
    \x08\x0b\x12\x03\t\09\n\n\n\x02\x06\0\x12\x04\x0b\0\x0f\x01\n\n\n\x03\
    \x06\0\x01\x12\x03\x0b\x08\x13\n\x0b\n\x04\x06\0\x02\0\x12\x03\x0c\x02B\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0c\x06\x0b\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x0c\x0c\x1f\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0c*>\n\x0b\
    \n\x04\x06\0\x02\x01\x12\x03\r\x024\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\r\x06\x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\r\x0c\x18\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\r#0\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x0e\
    \x02d\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x0e\x06\x1b\n\x0c\n\x05\x06\
    \0\x02\x02\x02\x12\x03\x0e\x1c8\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\
    \x0eC`\n\n\n\x02\x04\0\x12\x04\x11\0\x13\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x11\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x12\x02\x13\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x12\
    \t\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x12\x11\x12\n\n\n\x02\x04\x01\
    \x12\x04\x15\0\x1d\x01\n\n\n\x03\x04\x01\x01\x12\x03\x15\x08\x15\n\x0c\n\
    \x04\x04\x01\x08\0\x12\x04\x16\x02\x1a\x03\n\x0c\n\x05\x04\x01\x08\0\x01\
    \x12\x03\x16\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x17\x04#\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x17\x04\x14\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x17\x15\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17!\"\n\x0b\
    \n\x04\x04\x01\x02\x01\x12\x03\x18\x04\x1d\n\x0c\n\x05\x04\x01\x02\x01\
    \x06\x12\x03\x18\x04\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x18\x12\
    \x18\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x18\x1b\x1c\n\x0b\n\x04\x04\
    \x01\x02\x02\x12\x03\x19\x04%\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\
    \x19\x04\x18\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x19\x19\x20\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03\x19#$\n\x0b\n\x04\x04\x01\x02\x03\x12\
    \x03\x1c\x02\x1b\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03\x1c\x02\x11\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1c\x12\x16\n\x0c\n\x05\x04\x01\
    \x02\x03\x03\x12\x03\x1c\x19\x1a\n\n\n\x02\x04\x02\x12\x04\x1f\0!\x01\n\
    \n\n\x03\x04\x02\x01\x12\x03\x1f\x08$\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x20\x02\x16\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x20\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x20\t\x11\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x20\x14\x15\n\n\n\x02\x04\x03\x12\x04#\0%\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03#\x08%\n\x0b\n\x04\x04\x03\x02\0\x12\x03$\x02\x1a\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03$\t\x15\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03$\x18\x19b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
