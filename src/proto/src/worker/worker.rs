#![cfg_attr(tarpaulin, ignore)]
// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `worker/worker.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

use crate::common::{common, stream, event};

#[derive(PartialEq,Clone,Default)]
pub struct DispatchDataEventsRequest {
    // message fields
    pub events: ::protobuf::RepeatedField<event::KeyedDataEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DispatchDataEventsRequest {
    fn default() -> &'a DispatchDataEventsRequest {
        <DispatchDataEventsRequest as ::protobuf::Message>::default_instance()
    }
}

impl DispatchDataEventsRequest {
    pub fn new() -> DispatchDataEventsRequest {
        ::std::default::Default::default()
    }

    // repeated .common.KeyedDataEvent events = 1;


    pub fn get_events(&self) -> &[event::KeyedDataEvent] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<event::KeyedDataEvent>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<event::KeyedDataEvent> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<event::KeyedDataEvent> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DispatchDataEventsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.events {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DispatchDataEventsRequest {
        DispatchDataEventsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<event::KeyedDataEvent>>(
                "events",
                |m: &DispatchDataEventsRequest| { &m.events },
                |m: &mut DispatchDataEventsRequest| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DispatchDataEventsRequest>(
                "DispatchDataEventsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DispatchDataEventsRequest {
        static instance: ::protobuf::rt::LazyV2<DispatchDataEventsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DispatchDataEventsRequest::new)
    }
}

impl ::protobuf::Clear for DispatchDataEventsRequest {
    fn clear(&mut self) {
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DispatchDataEventsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DispatchDataEventsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DispatchDataEventsResponse {
    // message fields
    pub statusSet: ::std::collections::HashMap<::std::string::String, DispatchDataEventStatusEnum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DispatchDataEventsResponse {
    fn default() -> &'a DispatchDataEventsResponse {
        <DispatchDataEventsResponse as ::protobuf::Message>::default_instance()
    }
}

impl DispatchDataEventsResponse {
    pub fn new() -> DispatchDataEventsResponse {
        ::std::default::Default::default()
    }

    // repeated .proto.DispatchDataEventsResponse.StatusSetEntry statusSet = 1;


    pub fn get_statusSet(&self) -> &::std::collections::HashMap<::std::string::String, DispatchDataEventStatusEnum> {
        &self.statusSet
    }
    pub fn clear_statusSet(&mut self) {
        self.statusSet.clear();
    }

    // Param is passed by value, moved
    pub fn set_statusSet(&mut self, v: ::std::collections::HashMap<::std::string::String, DispatchDataEventStatusEnum>) {
        self.statusSet = v;
    }

    // Mutable pointer to the field.
    pub fn mut_statusSet(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, DispatchDataEventStatusEnum> {
        &mut self.statusSet
    }

    // Take field
    pub fn take_statusSet(&mut self) -> ::std::collections::HashMap<::std::string::String, DispatchDataEventStatusEnum> {
        ::std::mem::replace(&mut self.statusSet, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for DispatchDataEventsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeEnum<DispatchDataEventStatusEnum>>(wire_type, is, &mut self.statusSet)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeEnum<DispatchDataEventStatusEnum>>(1, &self.statusSet);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeEnum<DispatchDataEventStatusEnum>>(1, &self.statusSet, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DispatchDataEventsResponse {
        DispatchDataEventsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeEnum<DispatchDataEventStatusEnum>>(
                "statusSet",
                |m: &DispatchDataEventsResponse| { &m.statusSet },
                |m: &mut DispatchDataEventsResponse| { &mut m.statusSet },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DispatchDataEventsResponse>(
                "DispatchDataEventsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DispatchDataEventsResponse {
        static instance: ::protobuf::rt::LazyV2<DispatchDataEventsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DispatchDataEventsResponse::new)
    }
}

impl ::protobuf::Clear for DispatchDataEventsResponse {
    fn clear(&mut self) {
        self.statusSet.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DispatchDataEventsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DispatchDataEventsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopDataflowRequest {
    // message fields
    pub job_id: ::protobuf::SingularPtrField<common::ResourceId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopDataflowRequest {
    fn default() -> &'a StopDataflowRequest {
        <StopDataflowRequest as ::protobuf::Message>::default_instance()
    }
}

impl StopDataflowRequest {
    pub fn new() -> StopDataflowRequest {
        ::std::default::Default::default()
    }

    // .common.ResourceId job_id = 1;


    pub fn get_job_id(&self) -> &common::ResourceId {
        self.job_id.as_ref().unwrap_or_else(|| <common::ResourceId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    pub fn has_job_id(&self) -> bool {
        self.job_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: common::ResourceId) {
        self.job_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut common::ResourceId {
        if self.job_id.is_none() {
            self.job_id.set_default();
        }
        self.job_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_job_id(&mut self) -> common::ResourceId {
        self.job_id.take().unwrap_or_else(|| common::ResourceId::new())
    }
}

impl ::protobuf::Message for StopDataflowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.job_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.job_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.job_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.job_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopDataflowRequest {
        StopDataflowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::ResourceId>>(
                "job_id",
                |m: &StopDataflowRequest| { &m.job_id },
                |m: &mut StopDataflowRequest| { &mut m.job_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopDataflowRequest>(
                "StopDataflowRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopDataflowRequest {
        static instance: ::protobuf::rt::LazyV2<StopDataflowRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopDataflowRequest::new)
    }
}

impl ::protobuf::Clear for StopDataflowRequest {
    fn clear(&mut self) {
        self.job_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopDataflowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopDataflowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopDataflowResponse {
    // message fields
    pub resp: ::protobuf::SingularPtrField<common::Response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopDataflowResponse {
    fn default() -> &'a StopDataflowResponse {
        <StopDataflowResponse as ::protobuf::Message>::default_instance()
    }
}

impl StopDataflowResponse {
    pub fn new() -> StopDataflowResponse {
        ::std::default::Default::default()
    }

    // .common.Response resp = 1;


    pub fn get_resp(&self) -> &common::Response {
        self.resp.as_ref().unwrap_or_else(|| <common::Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> common::Response {
        self.resp.take().unwrap_or_else(|| common::Response::new())
    }
}

impl ::protobuf::Message for StopDataflowResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopDataflowResponse {
        StopDataflowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::Response>>(
                "resp",
                |m: &StopDataflowResponse| { &m.resp },
                |m: &mut StopDataflowResponse| { &mut m.resp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopDataflowResponse>(
                "StopDataflowResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopDataflowResponse {
        static instance: ::protobuf::rt::LazyV2<StopDataflowResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopDataflowResponse::new)
    }
}

impl ::protobuf::Clear for StopDataflowResponse {
    fn clear(&mut self) {
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopDataflowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopDataflowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDataflowRequest {
    // message fields
    pub job_id: ::protobuf::SingularPtrField<common::ResourceId>,
    pub dataflow: ::protobuf::SingularPtrField<stream::Dataflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDataflowRequest {
    fn default() -> &'a CreateDataflowRequest {
        <CreateDataflowRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDataflowRequest {
    pub fn new() -> CreateDataflowRequest {
        ::std::default::Default::default()
    }

    // .common.ResourceId job_id = 1;


    pub fn get_job_id(&self) -> &common::ResourceId {
        self.job_id.as_ref().unwrap_or_else(|| <common::ResourceId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    pub fn has_job_id(&self) -> bool {
        self.job_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: common::ResourceId) {
        self.job_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut common::ResourceId {
        if self.job_id.is_none() {
            self.job_id.set_default();
        }
        self.job_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_job_id(&mut self) -> common::ResourceId {
        self.job_id.take().unwrap_or_else(|| common::ResourceId::new())
    }

    // .common.Dataflow dataflow = 2;


    pub fn get_dataflow(&self) -> &stream::Dataflow {
        self.dataflow.as_ref().unwrap_or_else(|| <stream::Dataflow as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dataflow(&mut self) {
        self.dataflow.clear();
    }

    pub fn has_dataflow(&self) -> bool {
        self.dataflow.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dataflow(&mut self, v: stream::Dataflow) {
        self.dataflow = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataflow(&mut self) -> &mut stream::Dataflow {
        if self.dataflow.is_none() {
            self.dataflow.set_default();
        }
        self.dataflow.as_mut().unwrap()
    }

    // Take field
    pub fn take_dataflow(&mut self) -> stream::Dataflow {
        self.dataflow.take().unwrap_or_else(|| stream::Dataflow::new())
    }
}

impl ::protobuf::Message for CreateDataflowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.job_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dataflow {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.job_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dataflow)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.job_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.dataflow.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.job_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.dataflow.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDataflowRequest {
        CreateDataflowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::ResourceId>>(
                "job_id",
                |m: &CreateDataflowRequest| { &m.job_id },
                |m: &mut CreateDataflowRequest| { &mut m.job_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<stream::Dataflow>>(
                "dataflow",
                |m: &CreateDataflowRequest| { &m.dataflow },
                |m: &mut CreateDataflowRequest| { &mut m.dataflow },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateDataflowRequest>(
                "CreateDataflowRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateDataflowRequest {
        static instance: ::protobuf::rt::LazyV2<CreateDataflowRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateDataflowRequest::new)
    }
}

impl ::protobuf::Clear for CreateDataflowRequest {
    fn clear(&mut self) {
        self.job_id.clear();
        self.dataflow.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDataflowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDataflowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDataflowResponse {
    // message fields
    pub resp: ::protobuf::SingularPtrField<common::Response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDataflowResponse {
    fn default() -> &'a CreateDataflowResponse {
        <CreateDataflowResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateDataflowResponse {
    pub fn new() -> CreateDataflowResponse {
        ::std::default::Default::default()
    }

    // .common.Response resp = 1;


    pub fn get_resp(&self) -> &common::Response {
        self.resp.as_ref().unwrap_or_else(|| <common::Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> common::Response {
        self.resp.take().unwrap_or_else(|| common::Response::new())
    }
}

impl ::protobuf::Message for CreateDataflowResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDataflowResponse {
        CreateDataflowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::Response>>(
                "resp",
                |m: &CreateDataflowResponse| { &m.resp },
                |m: &mut CreateDataflowResponse| { &mut m.resp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateDataflowResponse>(
                "CreateDataflowResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateDataflowResponse {
        static instance: ::protobuf::rt::LazyV2<CreateDataflowResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateDataflowResponse::new)
    }
}

impl ::protobuf::Clear for CreateDataflowResponse {
    fn clear(&mut self) {
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDataflowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDataflowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DispatchDataEventStatusEnum {
    DISPATCHING = 0,
    DONE = 1,
    FAILURE = 2,
}

impl ::protobuf::ProtobufEnum for DispatchDataEventStatusEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DispatchDataEventStatusEnum> {
        match value {
            0 => ::std::option::Option::Some(DispatchDataEventStatusEnum::DISPATCHING),
            1 => ::std::option::Option::Some(DispatchDataEventStatusEnum::DONE),
            2 => ::std::option::Option::Some(DispatchDataEventStatusEnum::FAILURE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DispatchDataEventStatusEnum] = &[
            DispatchDataEventStatusEnum::DISPATCHING,
            DispatchDataEventStatusEnum::DONE,
            DispatchDataEventStatusEnum::FAILURE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DispatchDataEventStatusEnum>("DispatchDataEventStatusEnum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DispatchDataEventStatusEnum {
}

impl ::std::default::Default for DispatchDataEventStatusEnum {
    fn default() -> Self {
        DispatchDataEventStatusEnum::DISPATCHING
    }
}

impl ::protobuf::reflect::ProtobufValue for DispatchDataEventStatusEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13worker/worker.proto\x12\x05proto\x1a\x12common/probe.proto\x1a\x12\
    common/event.proto\x1a\x13common/common.proto\x1a\x13common/stream.proto\
    \"K\n\x19DispatchDataEventsRequest\x12.\n\x06events\x18\x01\x20\x03(\x0b\
    2\x16.common.KeyedDataEventR\x06events\"\xce\x01\n\x1aDispatchDataEvents\
    Response\x12N\n\tstatusSet\x18\x01\x20\x03(\x0b20.proto.DispatchDataEven\
    tsResponse.StatusSetEntryR\tstatusSet\x1a`\n\x0eStatusSetEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x128\n\x05value\x18\x02\x20\x01(\x0e2\
    \".proto.DispatchDataEventStatusEnumR\x05value:\x028\x01\"@\n\x13StopDat\
    aflowRequest\x12)\n\x06job_id\x18\x01\x20\x01(\x0b2\x12.common.ResourceI\
    dR\x05jobId\"<\n\x14StopDataflowResponse\x12$\n\x04resp\x18\x01\x20\x01(\
    \x0b2\x10.common.ResponseR\x04resp\"p\n\x15CreateDataflowRequest\x12)\n\
    \x06job_id\x18\x01\x20\x01(\x0b2\x12.common.ResourceIdR\x05jobId\x12,\n\
    \x08dataflow\x18\x02\x20\x01(\x0b2\x10.common.DataflowR\x08dataflow\">\n\
    \x16CreateDataflowResponse\x12$\n\x04resp\x18\x01\x20\x01(\x0b2\x10.comm\
    on.ResponseR\x04resp*E\n\x1bDispatchDataEventStatusEnum\x12\x0f\n\x0bDIS\
    PATCHING\x10\0\x12\x08\n\x04DONE\x10\x01\x12\x0b\n\x07FAILURE\x10\x022\
    \xc0\x02\n\rTaskWorkerApi\x126\n\x05Probe\x12\x14.common.ProbeRequest\
    \x1a\x15.common.ProbeResponse\"\0\x12[\n\x12DispatchDataEvents\x12\x20.p\
    roto.DispatchDataEventsRequest\x1a!.proto.DispatchDataEventsResponse\"\0\
    \x12I\n\x0cStopDataflow\x12\x1a.proto.StopDataflowRequest\x1a\x1b.proto.\
    StopDataflowResponse\"\0\x12O\n\x0eCreateDataflow\x12\x1c.proto.CreateDa\
    taflowRequest\x1a\x1d.proto.CreateDataflowResponse\"\0B\x1fZ\x1dtableflo\
    w/alpha/runtime/protoJ\x83\x08\n\x06\x12\x04\0\0.\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0e\n\t\n\x02\x03\0\x12\
    \x03\x03\0\x1c\n\t\n\x02\x03\x01\x12\x03\x04\0\x1c\n\t\n\x02\x03\x02\x12\
    \x03\x05\0\x1d\n\t\n\x02\x03\x03\x12\x03\x06\0\x1d\n\x08\n\x01\x08\x12\
    \x03\x08\04\n\t\n\x02\x08\x0b\x12\x03\x08\04\n\n\n\x02\x06\0\x12\x04\n\0\
    \x0f\x01\n\n\n\x03\x06\0\x01\x12\x03\n\x08\x15\n\x0b\n\x04\x06\0\x02\0\
    \x12\x03\x0b\x02B\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0b\x06\x0b\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\x0b\x0c\x1f\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\x0b*>\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x0c\x02Z\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x0c\x06\x18\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x0c\x192\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0c=W\n\x0b\n\x04\
    \x06\0\x02\x02\x12\x03\r\x02I\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\r\
    \x06\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\r\x13&\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03\r1E\n\x0b\n\x04\x06\0\x02\x03\x12\x03\x0e\x02N\n\
    \x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x0e\x06\x14\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03\x0e\x15*\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x0e4J\n\
    \n\n\x02\x04\0\x12\x04\x11\0\x13\x01\n\n\n\x03\x04\0\x01\x12\x03\x11\x08\
    !\n\x0b\n\x04\x04\0\x02\0\x12\x03\x12\x02,\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03\x12\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x12\x0b\x20\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x12!'\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x12*+\n\n\n\x02\x04\x01\x12\x04\x15\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x15\x08\"\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x16\x029\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03\x16\x02*\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x16+4\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1678\n\n\n\x02\x05\0\
    \x12\x04\x19\0\x1d\x01\n\n\n\x03\x05\0\x01\x12\x03\x19\x05\x20\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03\x1a\x02\x12\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x1a\x02\r\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x1a\x10\x11\n\x0b\n\x04\
    \x05\0\x02\x01\x12\x03\x1b\x02\x0b\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\
    \x1b\x02\x06\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x1b\t\n\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03\x1c\x02\x0e\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\
    \x1c\x02\t\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x1c\x0c\r\n\n\n\x02\x04\
    \x02\x12\x04\x1f\0!\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1f\x08\x1b\n\x0b\
    \n\x04\x04\x02\x02\0\x12\x03\x20\x02\x1f\n\x0c\n\x05\x04\x02\x02\0\x06\
    \x12\x03\x20\x02\x13\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x20\x14\x1a\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x20\x1d\x1e\n\n\n\x02\x04\x03\x12\
    \x04#\0%\x01\n\n\n\x03\x04\x03\x01\x12\x03#\x08\x1c\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03$\x02\x1b\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03$\x02\x11\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03$\x12\x16\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03$\x19\x1a\n\n\n\x02\x04\x04\x12\x04'\0*\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03'\x08\x1d\n\x0b\n\x04\x04\x04\x02\0\x12\x03(\x02\x1f\n\
    \x0c\n\x05\x04\x04\x02\0\x06\x12\x03(\x02\x13\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03(\x14\x1a\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03(\x1d\x1e\n\
    \x0b\n\x04\x04\x04\x02\x01\x12\x03)\x02\x1f\n\x0c\n\x05\x04\x04\x02\x01\
    \x06\x12\x03)\x02\x11\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03)\x12\x1a\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03)\x1d\x1e\n\n\n\x02\x04\x05\x12\
    \x04,\0.\x01\n\n\n\x03\x04\x05\x01\x12\x03,\x08\x1e\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03-\x02\x1b\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03-\x02\x11\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03-\x12\x16\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03-\x19\x1ab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
