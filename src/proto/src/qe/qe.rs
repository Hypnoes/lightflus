// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `query-engine/qe.proto`

use crate::common::{common, table};

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct GetSchemaRequest {
    // message fields
    pub schema: ::protobuf::SingularPtrField<table::Schema>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetSchemaRequest {
    fn default() -> &'a GetSchemaRequest {
        <GetSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetSchemaRequest {
    pub fn new() -> GetSchemaRequest {
        ::std::default::Default::default()
    }

    // .common.Schema schema = 1;


    pub fn get_schema(&self) -> &table::Schema {
        self.schema.as_ref().unwrap_or_else(|| <table::Schema as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        self.schema.take().unwrap_or_else(|| table::Schema::new())
    }
}

impl ::protobuf::Message for GetSchemaRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetSchemaRequest {
        GetSchemaRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Schema>>(
                "schema",
                |m: &GetSchemaRequest| { &m.schema },
                |m: &mut GetSchemaRequest| { &mut m.schema },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetSchemaRequest>(
                "GetSchemaRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetSchemaRequest {
        static instance: ::protobuf::rt::LazyV2<GetSchemaRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetSchemaRequest::new)
    }
}

impl ::protobuf::Clear for GetSchemaRequest {
    fn clear(&mut self) {
        self.schema.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSchemaRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetSchemaResponse {
    // message fields
    pub schema: ::protobuf::SingularPtrField<table::Schema>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetSchemaResponse {
    fn default() -> &'a GetSchemaResponse {
        <GetSchemaResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetSchemaResponse {
    pub fn new() -> GetSchemaResponse {
        ::std::default::Default::default()
    }

    // .common.Schema schema = 1;


    pub fn get_schema(&self) -> &table::Schema {
        self.schema.as_ref().unwrap_or_else(|| <table::Schema as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        self.schema.take().unwrap_or_else(|| table::Schema::new())
    }
}

impl ::protobuf::Message for GetSchemaResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetSchemaResponse {
        GetSchemaResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Schema>>(
                "schema",
                |m: &GetSchemaResponse| { &m.schema },
                |m: &mut GetSchemaResponse| { &mut m.schema },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetSchemaResponse>(
                "GetSchemaResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetSchemaResponse {
        static instance: ::protobuf::rt::LazyV2<GetSchemaResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetSchemaResponse::new)
    }
}

impl ::protobuf::Clear for GetSchemaResponse {
    fn clear(&mut self) {
        self.schema.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetSchemaResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSchemaResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteSchemaRequest {
    // message fields
    pub schema: ::protobuf::SingularPtrField<table::Schema>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteSchemaRequest {
    fn default() -> &'a DeleteSchemaRequest {
        <DeleteSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteSchemaRequest {
    pub fn new() -> DeleteSchemaRequest {
        ::std::default::Default::default()
    }

    // .common.Schema schema = 1;


    pub fn get_schema(&self) -> &table::Schema {
        self.schema.as_ref().unwrap_or_else(|| <table::Schema as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        self.schema.take().unwrap_or_else(|| table::Schema::new())
    }
}

impl ::protobuf::Message for DeleteSchemaRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteSchemaRequest {
        DeleteSchemaRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Schema>>(
                "schema",
                |m: &DeleteSchemaRequest| { &m.schema },
                |m: &mut DeleteSchemaRequest| { &mut m.schema },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteSchemaRequest>(
                "DeleteSchemaRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteSchemaRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteSchemaRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteSchemaRequest::new)
    }
}

impl ::protobuf::Clear for DeleteSchemaRequest {
    fn clear(&mut self) {
        self.schema.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteSchemaRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateSchemaRequest {
    // message fields
    pub schema: ::protobuf::SingularPtrField<table::Schema>,
    pub added: ::protobuf::RepeatedField<table::Field>,
    pub updated: ::protobuf::RepeatedField<table::Field>,
    pub dropped: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateSchemaRequest {
    fn default() -> &'a UpdateSchemaRequest {
        <UpdateSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateSchemaRequest {
    pub fn new() -> UpdateSchemaRequest {
        ::std::default::Default::default()
    }

    // .common.Schema schema = 1;


    pub fn get_schema(&self) -> &table::Schema {
        self.schema.as_ref().unwrap_or_else(|| <table::Schema as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        self.schema.take().unwrap_or_else(|| table::Schema::new())
    }

    // repeated .common.Field added = 2;


    pub fn get_added(&self) -> &[table::Field] {
        &self.added
    }
    pub fn clear_added(&mut self) {
        self.added.clear();
    }

    // Param is passed by value, moved
    pub fn set_added(&mut self, v: ::protobuf::RepeatedField<table::Field>) {
        self.added = v;
    }

    // Mutable pointer to the field.
    pub fn mut_added(&mut self) -> &mut ::protobuf::RepeatedField<table::Field> {
        &mut self.added
    }

    // Take field
    pub fn take_added(&mut self) -> ::protobuf::RepeatedField<table::Field> {
        ::std::mem::replace(&mut self.added, ::protobuf::RepeatedField::new())
    }

    // repeated .common.Field updated = 3;


    pub fn get_updated(&self) -> &[table::Field] {
        &self.updated
    }
    pub fn clear_updated(&mut self) {
        self.updated.clear();
    }

    // Param is passed by value, moved
    pub fn set_updated(&mut self, v: ::protobuf::RepeatedField<table::Field>) {
        self.updated = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updated(&mut self) -> &mut ::protobuf::RepeatedField<table::Field> {
        &mut self.updated
    }

    // Take field
    pub fn take_updated(&mut self) -> ::protobuf::RepeatedField<table::Field> {
        ::std::mem::replace(&mut self.updated, ::protobuf::RepeatedField::new())
    }

    // repeated string dropped = 4;


    pub fn get_dropped(&self) -> &[::std::string::String] {
        &self.dropped
    }
    pub fn clear_dropped(&mut self) {
        self.dropped.clear();
    }

    // Param is passed by value, moved
    pub fn set_dropped(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.dropped = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dropped(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.dropped
    }

    // Take field
    pub fn take_dropped(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.dropped, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UpdateSchemaRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.added {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.added)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updated)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.dropped)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.added {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.updated {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.dropped {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.added {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.updated {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.dropped {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateSchemaRequest {
        UpdateSchemaRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Schema>>(
                "schema",
                |m: &UpdateSchemaRequest| { &m.schema },
                |m: &mut UpdateSchemaRequest| { &mut m.schema },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Field>>(
                "added",
                |m: &UpdateSchemaRequest| { &m.added },
                |m: &mut UpdateSchemaRequest| { &mut m.added },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Field>>(
                "updated",
                |m: &UpdateSchemaRequest| { &m.updated },
                |m: &mut UpdateSchemaRequest| { &mut m.updated },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dropped",
                |m: &UpdateSchemaRequest| { &m.dropped },
                |m: &mut UpdateSchemaRequest| { &mut m.dropped },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateSchemaRequest>(
                "UpdateSchemaRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateSchemaRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateSchemaRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateSchemaRequest::new)
    }
}

impl ::protobuf::Clear for UpdateSchemaRequest {
    fn clear(&mut self) {
        self.schema.clear();
        self.added.clear();
        self.updated.clear();
        self.dropped.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateSchemaRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateSchemaRequest {
    // message fields
    pub schema: ::protobuf::SingularPtrField<table::Schema>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateSchemaRequest {
    fn default() -> &'a CreateSchemaRequest {
        <CreateSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateSchemaRequest {
    pub fn new() -> CreateSchemaRequest {
        ::std::default::Default::default()
    }

    // .common.Schema schema = 1;


    pub fn get_schema(&self) -> &table::Schema {
        self.schema.as_ref().unwrap_or_else(|| <table::Schema as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        self.schema.take().unwrap_or_else(|| table::Schema::new())
    }
}

impl ::protobuf::Message for CreateSchemaRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateSchemaRequest {
        CreateSchemaRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Schema>>(
                "schema",
                |m: &CreateSchemaRequest| { &m.schema },
                |m: &mut CreateSchemaRequest| { &mut m.schema },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateSchemaRequest>(
                "CreateSchemaRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateSchemaRequest {
        static instance: ::protobuf::rt::LazyV2<CreateSchemaRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateSchemaRequest::new)
    }
}

impl ::protobuf::Clear for CreateSchemaRequest {
    fn clear(&mut self) {
        self.schema.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSchemaRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRequest {
    // message fields
    pub fields: ::protobuf::RepeatedField<table::Field>,
    pub schema: ::protobuf::SingularPtrField<table::Schema>,
    pub options: ::protobuf::SingularPtrField<Options>,
    pub filter: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRequest {
    fn default() -> &'a QueryRequest {
        <QueryRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryRequest {
    pub fn new() -> QueryRequest {
        ::std::default::Default::default()
    }

    // repeated .common.Field fields = 1;


    pub fn get_fields(&self) -> &[table::Field] {
        &self.fields
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::protobuf::RepeatedField<table::Field>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::protobuf::RepeatedField<table::Field> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::protobuf::RepeatedField<table::Field> {
        ::std::mem::replace(&mut self.fields, ::protobuf::RepeatedField::new())
    }

    // .common.Schema schema = 2;


    pub fn get_schema(&self) -> &table::Schema {
        self.schema.as_ref().unwrap_or_else(|| <table::Schema as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        self.schema.take().unwrap_or_else(|| table::Schema::new())
    }

    // .proto.Options options = 3;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }

    // .google.protobuf.Struct filter = 4;


    pub fn get_filter(&self) -> &::protobuf::well_known_types::Struct {
        self.filter.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> ::protobuf::well_known_types::Struct {
        self.filter.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }
}

impl ::protobuf::Message for QueryRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.filter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fields)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fields {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.filter.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRequest {
        QueryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Field>>(
                "fields",
                |m: &QueryRequest| { &m.fields },
                |m: &mut QueryRequest| { &mut m.fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Schema>>(
                "schema",
                |m: &QueryRequest| { &m.schema },
                |m: &mut QueryRequest| { &mut m.schema },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &QueryRequest| { &m.options },
                |m: &mut QueryRequest| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "filter",
                |m: &QueryRequest| { &m.filter },
                |m: &mut QueryRequest| { &mut m.filter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRequest>(
                "QueryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRequest {
        static instance: ::protobuf::rt::LazyV2<QueryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRequest::new)
    }
}

impl ::protobuf::Clear for QueryRequest {
    fn clear(&mut self) {
        self.fields.clear();
        self.schema.clear();
        self.options.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Options {
    // message fields
    pub page: u32,
    pub limit: u32,
    pub sort: ::protobuf::SingularPtrField<common::Sort>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Options {
    fn default() -> &'a Options {
        <Options as ::protobuf::Message>::default_instance()
    }
}

impl Options {
    pub fn new() -> Options {
        ::std::default::Default::default()
    }

    // uint32 page = 1;


    pub fn get_page(&self) -> u32 {
        self.page
    }
    pub fn clear_page(&mut self) {
        self.page = 0;
    }

    // Param is passed by value, moved
    pub fn set_page(&mut self, v: u32) {
        self.page = v;
    }

    // uint32 limit = 2;


    pub fn get_limit(&self) -> u32 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u32) {
        self.limit = v;
    }

    // .common.Sort sort = 3;


    pub fn get_sort(&self) -> &common::Sort {
        self.sort.as_ref().unwrap_or_else(|| <common::Sort as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sort(&mut self) {
        self.sort.clear();
    }

    pub fn has_sort(&self) -> bool {
        self.sort.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sort(&mut self, v: common::Sort) {
        self.sort = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sort(&mut self) -> &mut common::Sort {
        if self.sort.is_none() {
            self.sort.set_default();
        }
        self.sort.as_mut().unwrap()
    }

    // Take field
    pub fn take_sort(&mut self) -> common::Sort {
        self.sort.take().unwrap_or_else(|| common::Sort::new())
    }
}

impl ::protobuf::Message for Options {
    fn is_initialized(&self) -> bool {
        for v in &self.sort {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.page = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.limit = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sort)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.page != 0 {
            my_size += ::protobuf::rt::value_size(1, self.page, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.sort.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.page != 0 {
            os.write_uint32(1, self.page)?;
        }
        if self.limit != 0 {
            os.write_uint32(2, self.limit)?;
        }
        if let Some(ref v) = self.sort.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Options {
        Options::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "page",
                |m: &Options| { &m.page },
                |m: &mut Options| { &mut m.page },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "limit",
                |m: &Options| { &m.limit },
                |m: &mut Options| { &mut m.limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::Sort>>(
                "sort",
                |m: &Options| { &m.sort },
                |m: &mut Options| { &mut m.sort },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Options>(
                "Options",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Options {
        static instance: ::protobuf::rt::LazyV2<Options> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Options::new)
    }
}

impl ::protobuf::Clear for Options {
    fn clear(&mut self) {
        self.page = 0;
        self.limit = 0;
        self.sort.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Options {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryResponse {
    // message fields
    pub resultSet: ::protobuf::RepeatedField<table::FieldEntries>,
    pub resp: ::protobuf::SingularPtrField<common::Response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    // repeated .common.FieldEntries resultSet = 1;


    pub fn get_resultSet(&self) -> &[table::FieldEntries] {
        &self.resultSet
    }
    pub fn clear_resultSet(&mut self) {
        self.resultSet.clear();
    }

    // Param is passed by value, moved
    pub fn set_resultSet(&mut self, v: ::protobuf::RepeatedField<table::FieldEntries>) {
        self.resultSet = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resultSet(&mut self) -> &mut ::protobuf::RepeatedField<table::FieldEntries> {
        &mut self.resultSet
    }

    // Take field
    pub fn take_resultSet(&mut self) -> ::protobuf::RepeatedField<table::FieldEntries> {
        ::std::mem::replace(&mut self.resultSet, ::protobuf::RepeatedField::new())
    }

    // .common.Response resp = 2;


    pub fn get_resp(&self) -> &common::Response {
        self.resp.as_ref().unwrap_or_else(|| <common::Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> common::Response {
        self.resp.take().unwrap_or_else(|| common::Response::new())
    }
}

impl ::protobuf::Message for QueryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resultSet {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resultSet)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.resultSet {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.resultSet {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::FieldEntries>>(
                "resultSet",
                |m: &QueryResponse| { &m.resultSet },
                |m: &mut QueryResponse| { &mut m.resultSet },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::Response>>(
                "resp",
                |m: &QueryResponse| { &m.resp },
                |m: &mut QueryResponse| { &mut m.resp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryResponse>(
                "QueryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: ::protobuf::rt::LazyV2<QueryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryResponse::new)
    }
}

impl ::protobuf::Clear for QueryResponse {
    fn clear(&mut self) {
        self.resultSet.clear();
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteRequest {
    // message fields
    pub filter: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    pub schema: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteRequest {
    fn default() -> &'a DeleteRequest {
        <DeleteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRequest {
    pub fn new() -> DeleteRequest {
        ::std::default::Default::default()
    }

    // .google.protobuf.Struct filter = 1;


    pub fn get_filter(&self) -> &::protobuf::well_known_types::Struct {
        self.filter.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> ::protobuf::well_known_types::Struct {
        self.filter.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }

    // string schema = 2;


    pub fn get_schema(&self) -> &str {
        &self.schema
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: ::std::string::String) {
        self.schema = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut ::std::string::String {
        &mut self.schema
    }

    // Take field
    pub fn take_schema(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schema, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.filter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schema)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.schema.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.schema);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.filter.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.schema.is_empty() {
            os.write_string(2, &self.schema)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteRequest {
        DeleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "filter",
                |m: &DeleteRequest| { &m.filter },
                |m: &mut DeleteRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schema",
                |m: &DeleteRequest| { &m.schema },
                |m: &mut DeleteRequest| { &mut m.schema },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteRequest>(
                "DeleteRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteRequest::new)
    }
}

impl ::protobuf::Clear for DeleteRequest {
    fn clear(&mut self) {
        self.filter.clear();
        self.schema.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateRequest {
    // message fields
    pub schema: ::protobuf::SingularPtrField<table::Schema>,
    pub filter: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    pub targets: ::protobuf::RepeatedField<table::FieldEntries>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateRequest {
    fn default() -> &'a UpdateRequest {
        <UpdateRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateRequest {
    pub fn new() -> UpdateRequest {
        ::std::default::Default::default()
    }

    // .common.Schema schema = 1;


    pub fn get_schema(&self) -> &table::Schema {
        self.schema.as_ref().unwrap_or_else(|| <table::Schema as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        self.schema.take().unwrap_or_else(|| table::Schema::new())
    }

    // .google.protobuf.Struct filter = 2;


    pub fn get_filter(&self) -> &::protobuf::well_known_types::Struct {
        self.filter.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> ::protobuf::well_known_types::Struct {
        self.filter.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }

    // repeated .common.FieldEntries targets = 3;


    pub fn get_targets(&self) -> &[table::FieldEntries] {
        &self.targets
    }
    pub fn clear_targets(&mut self) {
        self.targets.clear();
    }

    // Param is passed by value, moved
    pub fn set_targets(&mut self, v: ::protobuf::RepeatedField<table::FieldEntries>) {
        self.targets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_targets(&mut self) -> &mut ::protobuf::RepeatedField<table::FieldEntries> {
        &mut self.targets
    }

    // Take field
    pub fn take_targets(&mut self) -> ::protobuf::RepeatedField<table::FieldEntries> {
        ::std::mem::replace(&mut self.targets, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UpdateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.filter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.targets {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.targets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.targets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.filter.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.targets {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateRequest {
        UpdateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Schema>>(
                "schema",
                |m: &UpdateRequest| { &m.schema },
                |m: &mut UpdateRequest| { &mut m.schema },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "filter",
                |m: &UpdateRequest| { &m.filter },
                |m: &mut UpdateRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::FieldEntries>>(
                "targets",
                |m: &UpdateRequest| { &m.targets },
                |m: &mut UpdateRequest| { &mut m.targets },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateRequest>(
                "UpdateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateRequest::new)
    }
}

impl ::protobuf::Clear for UpdateRequest {
    fn clear(&mut self) {
        self.schema.clear();
        self.filter.clear();
        self.targets.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateResponse {
    // message fields
    pub resp: ::protobuf::SingularPtrField<common::Response>,
    pub affectedRows: u32,
    pub lastRowIdx: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateResponse {
    fn default() -> &'a UpdateResponse {
        <UpdateResponse as ::protobuf::Message>::default_instance()
    }
}

impl UpdateResponse {
    pub fn new() -> UpdateResponse {
        ::std::default::Default::default()
    }

    // .common.Response resp = 1;


    pub fn get_resp(&self) -> &common::Response {
        self.resp.as_ref().unwrap_or_else(|| <common::Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> common::Response {
        self.resp.take().unwrap_or_else(|| common::Response::new())
    }

    // uint32 affectedRows = 2;


    pub fn get_affectedRows(&self) -> u32 {
        self.affectedRows
    }
    pub fn clear_affectedRows(&mut self) {
        self.affectedRows = 0;
    }

    // Param is passed by value, moved
    pub fn set_affectedRows(&mut self, v: u32) {
        self.affectedRows = v;
    }

    // uint64 lastRowIdx = 3;


    pub fn get_lastRowIdx(&self) -> u64 {
        self.lastRowIdx
    }
    pub fn clear_lastRowIdx(&mut self) {
        self.lastRowIdx = 0;
    }

    // Param is passed by value, moved
    pub fn set_lastRowIdx(&mut self, v: u64) {
        self.lastRowIdx = v;
    }
}

impl ::protobuf::Message for UpdateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.affectedRows = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.lastRowIdx = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.affectedRows != 0 {
            my_size += ::protobuf::rt::value_size(2, self.affectedRows, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lastRowIdx != 0 {
            my_size += ::protobuf::rt::value_size(3, self.lastRowIdx, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.affectedRows != 0 {
            os.write_uint32(2, self.affectedRows)?;
        }
        if self.lastRowIdx != 0 {
            os.write_uint64(3, self.lastRowIdx)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateResponse {
        UpdateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::Response>>(
                "resp",
                |m: &UpdateResponse| { &m.resp },
                |m: &mut UpdateResponse| { &mut m.resp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "affectedRows",
                |m: &UpdateResponse| { &m.affectedRows },
                |m: &mut UpdateResponse| { &mut m.affectedRows },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "lastRowIdx",
                |m: &UpdateResponse| { &m.lastRowIdx },
                |m: &mut UpdateResponse| { &mut m.lastRowIdx },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateResponse>(
                "UpdateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateResponse {
        static instance: ::protobuf::rt::LazyV2<UpdateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateResponse::new)
    }
}

impl ::protobuf::Clear for UpdateResponse {
    fn clear(&mut self) {
        self.resp.clear();
        self.affectedRows = 0;
        self.lastRowIdx = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InsertRequest {
    // message fields
    pub schema: ::protobuf::SingularPtrField<table::Schema>,
    pub entries: ::protobuf::RepeatedField<table::FieldEntries>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsertRequest {
    fn default() -> &'a InsertRequest {
        <InsertRequest as ::protobuf::Message>::default_instance()
    }
}

impl InsertRequest {
    pub fn new() -> InsertRequest {
        ::std::default::Default::default()
    }

    // .common.Schema schema = 1;


    pub fn get_schema(&self) -> &table::Schema {
        self.schema.as_ref().unwrap_or_else(|| <table::Schema as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: table::Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut table::Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> table::Schema {
        self.schema.take().unwrap_or_else(|| table::Schema::new())
    }

    // repeated .common.FieldEntries entries = 2;


    pub fn get_entries(&self) -> &[table::FieldEntries] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<table::FieldEntries>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<table::FieldEntries> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<table::FieldEntries> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for InsertRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InsertRequest {
        InsertRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::Schema>>(
                "schema",
                |m: &InsertRequest| { &m.schema },
                |m: &mut InsertRequest| { &mut m.schema },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<table::FieldEntries>>(
                "entries",
                |m: &InsertRequest| { &m.entries },
                |m: &mut InsertRequest| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InsertRequest>(
                "InsertRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InsertRequest {
        static instance: ::protobuf::rt::LazyV2<InsertRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InsertRequest::new)
    }
}

impl ::protobuf::Clear for InsertRequest {
    fn clear(&mut self) {
        self.schema.clear();
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InsertRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeChangeStreamRequest {
    // message fields
    pub table_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeChangeStreamRequest {
    fn default() -> &'a SubscribeChangeStreamRequest {
        <SubscribeChangeStreamRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeChangeStreamRequest {
    pub fn new() -> SubscribeChangeStreamRequest {
        ::std::default::Default::default()
    }

    // uint32 table_id = 1;


    pub fn get_table_id(&self) -> u32 {
        self.table_id
    }
    pub fn clear_table_id(&mut self) {
        self.table_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_table_id(&mut self, v: u32) {
        self.table_id = v;
    }
}

impl ::protobuf::Message for SubscribeChangeStreamRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.table_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.table_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.table_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.table_id != 0 {
            os.write_uint32(1, self.table_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeChangeStreamRequest {
        SubscribeChangeStreamRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "table_id",
                |m: &SubscribeChangeStreamRequest| { &m.table_id },
                |m: &mut SubscribeChangeStreamRequest| { &mut m.table_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscribeChangeStreamRequest>(
                "SubscribeChangeStreamRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscribeChangeStreamRequest {
        static instance: ::protobuf::rt::LazyV2<SubscribeChangeStreamRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscribeChangeStreamRequest::new)
    }
}

impl ::protobuf::Clear for SubscribeChangeStreamRequest {
    fn clear(&mut self) {
        self.table_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeChangeStreamRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeChangeStreamRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeChangeStreamResponse {
    // message fields
    pub subscribe_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeChangeStreamResponse {
    fn default() -> &'a SubscribeChangeStreamResponse {
        <SubscribeChangeStreamResponse as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeChangeStreamResponse {
    pub fn new() -> SubscribeChangeStreamResponse {
        ::std::default::Default::default()
    }

    // uint32 subscribe_id = 1;


    pub fn get_subscribe_id(&self) -> u32 {
        self.subscribe_id
    }
    pub fn clear_subscribe_id(&mut self) {
        self.subscribe_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_subscribe_id(&mut self, v: u32) {
        self.subscribe_id = v;
    }
}

impl ::protobuf::Message for SubscribeChangeStreamResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.subscribe_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.subscribe_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.subscribe_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.subscribe_id != 0 {
            os.write_uint32(1, self.subscribe_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeChangeStreamResponse {
        SubscribeChangeStreamResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "subscribe_id",
                |m: &SubscribeChangeStreamResponse| { &m.subscribe_id },
                |m: &mut SubscribeChangeStreamResponse| { &mut m.subscribe_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscribeChangeStreamResponse>(
                "SubscribeChangeStreamResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscribeChangeStreamResponse {
        static instance: ::protobuf::rt::LazyV2<SubscribeChangeStreamResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscribeChangeStreamResponse::new)
    }
}

impl ::protobuf::Clear for SubscribeChangeStreamResponse {
    fn clear(&mut self) {
        self.subscribe_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeChangeStreamResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeChangeStreamResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15query-engine/qe.proto\x12\x05proto\x1a\x1fgoogle/protobuf/timestam\
    p.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x12common/table.proto\
    \x1a\x13common/common.proto\":\n\x10GetSchemaRequest\x12&\n\x06schema\
    \x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06schema\";\n\x11GetSchemaRes\
    ponse\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06schem\
    a\"=\n\x13DeleteSchemaRequest\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\x0e\
    .common.SchemaR\x06schema\"\xa5\x01\n\x13UpdateSchemaRequest\x12&\n\x06s\
    chema\x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06schema\x12#\n\x05added\
    \x18\x02\x20\x03(\x0b2\r.common.FieldR\x05added\x12'\n\x07updated\x18\
    \x03\x20\x03(\x0b2\r.common.FieldR\x07updated\x12\x18\n\x07dropped\x18\
    \x04\x20\x03(\tR\x07dropped\"=\n\x13CreateSchemaRequest\x12&\n\x06schema\
    \x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06schema\"\xb8\x01\n\x0cQuery\
    Request\x12%\n\x06fields\x18\x01\x20\x03(\x0b2\r.common.FieldR\x06fields\
    \x12&\n\x06schema\x18\x02\x20\x01(\x0b2\x0e.common.SchemaR\x06schema\x12\
    (\n\x07options\x18\x03\x20\x01(\x0b2\x0e.proto.OptionsR\x07options\x12/\
    \n\x06filter\x18\x04\x20\x01(\x0b2\x17.google.protobuf.StructR\x06filter\
    \"U\n\x07Options\x12\x12\n\x04page\x18\x01\x20\x01(\rR\x04page\x12\x14\n\
    \x05limit\x18\x02\x20\x01(\rR\x05limit\x12\x20\n\x04sort\x18\x03\x20\x01\
    (\x0b2\x0c.common.SortR\x04sort\"i\n\rQueryResponse\x122\n\tresultSet\
    \x18\x01\x20\x03(\x0b2\x14.common.FieldEntriesR\tresultSet\x12$\n\x04res\
    p\x18\x02\x20\x01(\x0b2\x10.common.ResponseR\x04resp\"X\n\rDeleteRequest\
    \x12/\n\x06filter\x18\x01\x20\x01(\x0b2\x17.google.protobuf.StructR\x06f\
    ilter\x12\x16\n\x06schema\x18\x02\x20\x01(\tR\x06schema\"\x98\x01\n\rUpd\
    ateRequest\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06\
    schema\x12/\n\x06filter\x18\x02\x20\x01(\x0b2\x17.google.protobuf.Struct\
    R\x06filter\x12.\n\x07targets\x18\x03\x20\x03(\x0b2\x14.common.FieldEntr\
    iesR\x07targets\"z\n\x0eUpdateResponse\x12$\n\x04resp\x18\x01\x20\x01(\
    \x0b2\x10.common.ResponseR\x04resp\x12\"\n\x0caffectedRows\x18\x02\x20\
    \x01(\rR\x0caffectedRows\x12\x1e\n\nlastRowIdx\x18\x03\x20\x01(\x04R\nla\
    stRowIdx\"g\n\rInsertRequest\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\x0e.\
    common.SchemaR\x06schema\x12.\n\x07entries\x18\x02\x20\x03(\x0b2\x14.com\
    mon.FieldEntriesR\x07entries\"9\n\x1cSubscribeChangeStreamRequest\x12\
    \x19\n\x08table_id\x18\x01\x20\x01(\rR\x07tableId\"B\n\x1dSubscribeChang\
    eStreamResponse\x12!\n\x0csubscribe_id\x18\x01\x20\x01(\rR\x0bsubscribeI\
    d2\xcc\x04\n\x0bQueryEngine\x124\n\x05Query\x12\x13.proto.QueryRequest\
    \x1a\x14.proto.QueryResponse\"\0\x122\n\x06Delete\x12\x14.proto.DeleteRe\
    quest\x1a\x10.common.Response\"\0\x127\n\x06Update\x12\x14.proto.UpdateR\
    equest\x1a\x15.proto.UpdateResponse\"\0\x122\n\x06Insert\x12\x14.proto.I\
    nsertRequest\x1a\x10.common.Response\"\0\x12@\n\tGetSchema\x12\x17.proto\
    .GetSchemaRequest\x1a\x18.proto.GetSchemaResponse\"\0\x12>\n\x0cDeleteSc\
    hema\x12\x1a.proto.DeleteSchemaRequest\x1a\x10.common.Response\"\0\x12>\
    \n\x0cUpdateSchema\x12\x1a.proto.UpdateSchemaRequest\x1a\x10.common.Resp\
    onse\"\0\x12>\n\x0cCreateSchema\x12\x1a.proto.CreateSchemaRequest\x1a\
    \x10.common.Response\"\0\x12d\n\x15SubscribeChangeStream\x12#.proto.Subs\
    cribeChangeStreamRequest\x1a$.proto.SubscribeChangeStreamResponse\"\0B$Z\
    \"tableflow/alpha/query_engine/protoJ\xd1\x14\n\x06\x12\x04\0\0[\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0e\n\t\n\
    \x02\x03\0\x12\x03\x03\0)\n\t\n\x02\x03\x01\x12\x03\x04\0&\n\t\n\x02\x03\
    \x02\x12\x03\x05\0\x1c\n\t\n\x02\x03\x03\x12\x03\x06\0\x1d\n\x08\n\x01\
    \x08\x12\x03\x08\09\n\t\n\x02\x08\x0b\x12\x03\x08\09\n\n\n\x02\x06\0\x12\
    \x04\n\0\x14\x01\n\n\n\x03\x06\0\x01\x12\x03\n\x08\x13\n\x0b\n\x04\x06\0\
    \x02\0\x12\x03\x0b\x024\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0b\x06\x0b\
    \n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0b\x0c\x18\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x03\x0b#0\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x0c\x028\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x0c\x06\x0c\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x0c\r\x1a\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0c%4\n\x0b\n\
    \x04\x06\0\x02\x02\x12\x03\r\x027\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    \r\x06\x0c\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\r\r\x1a\n\x0c\n\x05\x06\
    \0\x02\x02\x03\x12\x03\r%3\n\x0b\n\x04\x06\0\x02\x03\x12\x03\x0e\x028\n\
    \x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x0e\x06\x0c\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03\x0e\r\x1a\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x0e%4\n\
    \x0b\n\x04\x06\0\x02\x04\x12\x03\x0f\x02@\n\x0c\n\x05\x06\0\x02\x04\x01\
    \x12\x03\x0f\x06\x0f\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x0f\x10\x20\n\
    \x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0f+<\n\x0b\n\x04\x06\0\x02\x05\x12\
    \x03\x10\x02D\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\x10\x06\x12\n\x0c\n\
    \x05\x06\0\x02\x05\x02\x12\x03\x10\x13&\n\x0c\n\x05\x06\0\x02\x05\x03\
    \x12\x03\x101@\n\x0b\n\x04\x06\0\x02\x06\x12\x03\x11\x02D\n\x0c\n\x05\
    \x06\0\x02\x06\x01\x12\x03\x11\x06\x12\n\x0c\n\x05\x06\0\x02\x06\x02\x12\
    \x03\x11\x13&\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\x111@\n\x0b\n\x04\
    \x06\0\x02\x07\x12\x03\x12\x02D\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\
    \x12\x06\x12\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03\x12\x13&\n\x0c\n\x05\
    \x06\0\x02\x07\x03\x12\x03\x121@\n\x0b\n\x04\x06\0\x02\x08\x12\x03\x13\
    \x02d\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03\x13\x06\x1b\n\x0c\n\x05\x06\
    \0\x02\x08\x02\x12\x03\x13\x1c8\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03\
    \x13C`\n\n\n\x02\x04\0\x12\x04\x16\0\x18\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x16\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\x17\x02\x1b\n\x0c\n\x05\x04\
    \0\x02\0\x06\x12\x03\x17\x02\x0f\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x17\
    \x10\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17\x19\x1a\n\n\n\x02\x04\
    \x01\x12\x04\x1a\0\x1c\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1a\x08\x19\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x1b\x02\x1b\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x1b\x02\x0f\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1b\x10\
    \x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1b\x19\x1a\n\n\n\x02\x04\x02\
    \x12\x04\x1e\0\x20\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1e\x08\x1b\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x1f\x02\x1b\n\x0c\n\x05\x04\x02\x02\0\x06\x12\
    \x03\x1f\x02\x0f\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1f\x10\x16\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03\x1f\x19\x1a\n\n\n\x02\x04\x03\x12\x04\"\
    \0'\x01\n\n\n\x03\x04\x03\x01\x12\x03\"\x08\x1b\n\x0b\n\x04\x04\x03\x02\
    \0\x12\x03#\x02\x1b\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03#\x02\x0f\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03#\x10\x16\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03#\x19\x1a\n\x0b\n\x04\x04\x03\x02\x01\x12\x03$\x02\"\n\x0c\n\x05\
    \x04\x03\x02\x01\x04\x12\x03$\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\
    \x03$\x0b\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03$\x18\x1d\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03$\x20!\n\x0b\n\x04\x04\x03\x02\x02\x12\
    \x03%\x02$\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03%\x02\n\n\x0c\n\x05\
    \x04\x03\x02\x02\x06\x12\x03%\x0b\x17\n\x0c\n\x05\x04\x03\x02\x02\x01\
    \x12\x03%\x18\x1f\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03%\"#\n\x0b\n\
    \x04\x04\x03\x02\x03\x12\x03&\x02\x1e\n\x0c\n\x05\x04\x03\x02\x03\x04\
    \x12\x03&\x02\n\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03&\x0b\x11\n\x0c\n\
    \x05\x04\x03\x02\x03\x01\x12\x03&\x12\x19\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03&\x1c\x1d\n\n\n\x02\x04\x04\x12\x04)\0+\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03)\x08\x1b\n\x0b\n\x04\x04\x04\x02\0\x12\x03*\x02\x1b\n\
    \x0c\n\x05\x04\x04\x02\0\x06\x12\x03*\x02\x0f\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03*\x10\x16\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03*\x19\x1a\n\n\
    \n\x02\x04\x05\x12\x04-\02\x01\n\n\n\x03\x04\x05\x01\x12\x03-\x08\x14\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03.\x02#\n\x0c\n\x05\x04\x05\x02\0\x04\x12\
    \x03.\x02\n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03.\x0b\x17\n\x0c\n\x05\
    \x04\x05\x02\0\x01\x12\x03.\x18\x1e\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x03.!\"\n\x0b\n\x04\x04\x05\x02\x01\x12\x03/\x02\x1b\n\x0c\n\x05\x04\
    \x05\x02\x01\x06\x12\x03/\x02\x0f\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\
    \x03/\x10\x16\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03/\x19\x1a\n\x0b\n\
    \x04\x04\x05\x02\x02\x12\x030\x02\x16\n\x0c\n\x05\x04\x05\x02\x02\x06\
    \x12\x030\x02\t\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x030\n\x11\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x030\x14\x15\n\x0b\n\x04\x04\x05\x02\x03\
    \x12\x031\x02$\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\x031\x02\x18\n\x0c\n\
    \x05\x04\x05\x02\x03\x01\x12\x031\x19\x1f\n\x0c\n\x05\x04\x05\x02\x03\
    \x03\x12\x031\"#\n\n\n\x02\x04\x06\x12\x044\08\x01\n\n\n\x03\x04\x06\x01\
    \x12\x034\x08\x0f\n\x0b\n\x04\x04\x06\x02\0\x12\x035\x02\x12\n\x0c\n\x05\
    \x04\x06\x02\0\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x035\t\r\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x035\x10\x11\n\x0b\n\x04\x04\
    \x06\x02\x01\x12\x036\x02\x13\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x036\
    \x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x036\t\x0e\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x036\x11\x12\n\x0b\n\x04\x04\x06\x02\x02\x12\x037\
    \x02\x17\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\x037\x02\r\n\x0c\n\x05\x04\
    \x06\x02\x02\x01\x12\x037\x0e\x12\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\
    \x037\x15\x16\n\n\n\x02\x04\x07\x12\x04:\0=\x01\n\n\n\x03\x04\x07\x01\
    \x12\x03:\x08\x15\n\x0b\n\x04\x04\x07\x02\0\x12\x03;\x02-\n\x0c\n\x05\
    \x04\x07\x02\0\x04\x12\x03;\x02\n\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03;\
    \x0b\x1e\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03;\x1f(\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03;+,\n\x0b\n\x04\x04\x07\x02\x01\x12\x03<\x02\x1b\n\x0c\
    \n\x05\x04\x07\x02\x01\x06\x12\x03<\x02\x11\n\x0c\n\x05\x04\x07\x02\x01\
    \x01\x12\x03<\x12\x16\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03<\x19\x1a\n\
    \n\n\x02\x04\x08\x12\x04?\0B\x01\n\n\n\x03\x04\x08\x01\x12\x03?\x08\x15\
    \n\x0b\n\x04\x04\x08\x02\0\x12\x03@\x02$\n\x0c\n\x05\x04\x08\x02\0\x06\
    \x12\x03@\x02\x18\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03@\x19\x1f\n\x0c\n\
    \x05\x04\x08\x02\0\x03\x12\x03@\"#\n\x0b\n\x04\x04\x08\x02\x01\x12\x03A\
    \x02\x14\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03A\x02\x08\n\x0c\n\x05\
    \x04\x08\x02\x01\x01\x12\x03A\t\x0f\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\
    \x03A\x12\x13\n\n\n\x02\x04\t\x12\x04D\0H\x01\n\n\n\x03\x04\t\x01\x12\
    \x03D\x08\x15\n\x0b\n\x04\x04\t\x02\0\x12\x03E\x02\x1b\n\x0c\n\x05\x04\t\
    \x02\0\x06\x12\x03E\x02\x0f\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03E\x10\x16\
    \n\x0c\n\x05\x04\t\x02\0\x03\x12\x03E\x19\x1a\n\x0b\n\x04\x04\t\x02\x01\
    \x12\x03F\x02$\n\x0c\n\x05\x04\t\x02\x01\x06\x12\x03F\x02\x18\n\x0c\n\
    \x05\x04\t\x02\x01\x01\x12\x03F\x19\x1f\n\x0c\n\x05\x04\t\x02\x01\x03\
    \x12\x03F\"#\n\x0b\n\x04\x04\t\x02\x02\x12\x03G\x02+\n\x0c\n\x05\x04\t\
    \x02\x02\x04\x12\x03G\x02\n\n\x0c\n\x05\x04\t\x02\x02\x06\x12\x03G\x0b\
    \x1e\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03G\x1f&\n\x0c\n\x05\x04\t\x02\
    \x02\x03\x12\x03G)*\n\n\n\x02\x04\n\x12\x04J\0N\x01\n\n\n\x03\x04\n\x01\
    \x12\x03J\x08\x16\n\x0b\n\x04\x04\n\x02\0\x12\x03K\x02\x1b\n\x0c\n\x05\
    \x04\n\x02\0\x06\x12\x03K\x02\x11\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03K\
    \x12\x16\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03K\x19\x1a\n\x0b\n\x04\x04\n\
    \x02\x01\x12\x03L\x02\x1a\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03L\x02\x08\
    \n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03L\t\x15\n\x0c\n\x05\x04\n\x02\x01\
    \x03\x12\x03L\x18\x19\n\x0b\n\x04\x04\n\x02\x02\x12\x03M\x02\x18\n\x0c\n\
    \x05\x04\n\x02\x02\x05\x12\x03M\x02\x08\n\x0c\n\x05\x04\n\x02\x02\x01\
    \x12\x03M\t\x13\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03M\x16\x17\n\n\n\x02\
    \x04\x0b\x12\x04P\0S\x01\n\n\n\x03\x04\x0b\x01\x12\x03P\x08\x15\n\x0b\n\
    \x04\x04\x0b\x02\0\x12\x03Q\x02\x1b\n\x0c\n\x05\x04\x0b\x02\0\x06\x12\
    \x03Q\x02\x0f\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03Q\x10\x16\n\x0c\n\x05\
    \x04\x0b\x02\0\x03\x12\x03Q\x19\x1a\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03R\
    \x02+\n\x0c\n\x05\x04\x0b\x02\x01\x04\x12\x03R\x02\n\n\x0c\n\x05\x04\x0b\
    \x02\x01\x06\x12\x03R\x0b\x1e\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03R\
    \x1f&\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\x03R)*\n\n\n\x02\x04\x0c\x12\
    \x04U\0W\x01\n\n\n\x03\x04\x0c\x01\x12\x03U\x08$\n\x0b\n\x04\x04\x0c\x02\
    \0\x12\x03V\x02\x16\n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03V\x02\x08\n\x0c\
    \n\x05\x04\x0c\x02\0\x01\x12\x03V\t\x11\n\x0c\n\x05\x04\x0c\x02\0\x03\
    \x12\x03V\x14\x15\n\n\n\x02\x04\r\x12\x04Y\0[\x01\n\n\n\x03\x04\r\x01\
    \x12\x03Y\x08%\n\x0b\n\x04\x04\r\x02\0\x12\x03Z\x02\x1a\n\x0c\n\x05\x04\
    \r\x02\0\x05\x12\x03Z\x02\x08\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03Z\t\x15\
    \n\x0c\n\x05\x04\r\x02\0\x03\x12\x03Z\x18\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
