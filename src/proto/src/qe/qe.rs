// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `query-engine/qe.proto`

use crate::common::{common, table};

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.GetSchemaRequest)
pub struct GetSchemaRequest {
    // message fields
    // @@protoc_insertion_point(field:tableflow.GetSchemaRequest.schema)
    pub schema: ::protobuf::MessageField<table::Schema>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.GetSchemaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSchemaRequest {
    fn default() -> &'a GetSchemaRequest {
        <GetSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetSchemaRequest {
    pub fn new() -> GetSchemaRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, table::Schema>(
            "schema",
            |m: &GetSchemaRequest| { &m.schema },
            |m: &mut GetSchemaRequest| { &mut m.schema },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSchemaRequest>(
            "GetSchemaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSchemaRequest {
    const NAME: &'static str = "GetSchemaRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSchemaRequest {
        GetSchemaRequest::new()
    }

    fn clear(&mut self) {
        self.schema.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSchemaRequest {
        static instance: GetSchemaRequest = GetSchemaRequest {
            schema: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSchemaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSchemaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSchemaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.GetSchemaResponse)
pub struct GetSchemaResponse {
    // message fields
    // @@protoc_insertion_point(field:tableflow.GetSchemaResponse.schema)
    pub schema: ::protobuf::MessageField<table::Schema>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.GetSchemaResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSchemaResponse {
    fn default() -> &'a GetSchemaResponse {
        <GetSchemaResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetSchemaResponse {
    pub fn new() -> GetSchemaResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, table::Schema>(
            "schema",
            |m: &GetSchemaResponse| { &m.schema },
            |m: &mut GetSchemaResponse| { &mut m.schema },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSchemaResponse>(
            "GetSchemaResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSchemaResponse {
    const NAME: &'static str = "GetSchemaResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSchemaResponse {
        GetSchemaResponse::new()
    }

    fn clear(&mut self) {
        self.schema.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSchemaResponse {
        static instance: GetSchemaResponse = GetSchemaResponse {
            schema: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSchemaResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSchemaResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSchemaResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSchemaResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.DeleteSchemaRequest)
pub struct DeleteSchemaRequest {
    // message fields
    // @@protoc_insertion_point(field:tableflow.DeleteSchemaRequest.schema)
    pub schema: ::protobuf::MessageField<table::Schema>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.DeleteSchemaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteSchemaRequest {
    fn default() -> &'a DeleteSchemaRequest {
        <DeleteSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteSchemaRequest {
    pub fn new() -> DeleteSchemaRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, table::Schema>(
            "schema",
            |m: &DeleteSchemaRequest| { &m.schema },
            |m: &mut DeleteSchemaRequest| { &mut m.schema },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteSchemaRequest>(
            "DeleteSchemaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteSchemaRequest {
    const NAME: &'static str = "DeleteSchemaRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteSchemaRequest {
        DeleteSchemaRequest::new()
    }

    fn clear(&mut self) {
        self.schema.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteSchemaRequest {
        static instance: DeleteSchemaRequest = DeleteSchemaRequest {
            schema: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteSchemaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteSchemaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteSchemaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.UpdateSchemaRequest)
pub struct UpdateSchemaRequest {
    // message fields
    // @@protoc_insertion_point(field:tableflow.UpdateSchemaRequest.schema)
    pub schema: ::protobuf::MessageField<table::Schema>,
    // @@protoc_insertion_point(field:tableflow.UpdateSchemaRequest.added)
    pub added: ::std::vec::Vec<table::Field>,
    // @@protoc_insertion_point(field:tableflow.UpdateSchemaRequest.updated)
    pub updated: ::std::vec::Vec<table::Field>,
    // @@protoc_insertion_point(field:tableflow.UpdateSchemaRequest.dropped)
    pub dropped: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.UpdateSchemaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateSchemaRequest {
    fn default() -> &'a UpdateSchemaRequest {
        <UpdateSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateSchemaRequest {
    pub fn new() -> UpdateSchemaRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, table::Schema>(
            "schema",
            |m: &UpdateSchemaRequest| { &m.schema },
            |m: &mut UpdateSchemaRequest| { &mut m.schema },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "added",
            |m: &UpdateSchemaRequest| { &m.added },
            |m: &mut UpdateSchemaRequest| { &mut m.added },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "updated",
            |m: &UpdateSchemaRequest| { &m.updated },
            |m: &mut UpdateSchemaRequest| { &mut m.updated },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dropped",
            |m: &UpdateSchemaRequest| { &m.dropped },
            |m: &mut UpdateSchemaRequest| { &mut m.dropped },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateSchemaRequest>(
            "UpdateSchemaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateSchemaRequest {
    const NAME: &'static str = "UpdateSchemaRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                18 => {
                    self.added.push(is.read_message()?);
                },
                26 => {
                    self.updated.push(is.read_message()?);
                },
                34 => {
                    self.dropped.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.added {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.updated {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.dropped {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.added {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.updated {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.dropped {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateSchemaRequest {
        UpdateSchemaRequest::new()
    }

    fn clear(&mut self) {
        self.schema.clear();
        self.added.clear();
        self.updated.clear();
        self.dropped.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateSchemaRequest {
        static instance: UpdateSchemaRequest = UpdateSchemaRequest {
            schema: ::protobuf::MessageField::none(),
            added: ::std::vec::Vec::new(),
            updated: ::std::vec::Vec::new(),
            dropped: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateSchemaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateSchemaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateSchemaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.CreateSchemaRequest)
pub struct CreateSchemaRequest {
    // message fields
    // @@protoc_insertion_point(field:tableflow.CreateSchemaRequest.schema)
    pub schema: ::protobuf::MessageField<table::Schema>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.CreateSchemaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateSchemaRequest {
    fn default() -> &'a CreateSchemaRequest {
        <CreateSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateSchemaRequest {
    pub fn new() -> CreateSchemaRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, table::Schema>(
            "schema",
            |m: &CreateSchemaRequest| { &m.schema },
            |m: &mut CreateSchemaRequest| { &mut m.schema },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateSchemaRequest>(
            "CreateSchemaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateSchemaRequest {
    const NAME: &'static str = "CreateSchemaRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateSchemaRequest {
        CreateSchemaRequest::new()
    }

    fn clear(&mut self) {
        self.schema.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateSchemaRequest {
        static instance: CreateSchemaRequest = CreateSchemaRequest {
            schema: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateSchemaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateSchemaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSchemaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.QueryRequest)
pub struct QueryRequest {
    // message fields
    // @@protoc_insertion_point(field:tableflow.QueryRequest.fields)
    pub fields: ::std::vec::Vec<table::Field>,
    // @@protoc_insertion_point(field:tableflow.QueryRequest.schema)
    pub schema: ::protobuf::MessageField<table::Schema>,
    // @@protoc_insertion_point(field:tableflow.QueryRequest.options)
    pub options: ::protobuf::MessageField<Options>,
    // @@protoc_insertion_point(field:tableflow.QueryRequest.filter)
    pub filter: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.QueryRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryRequest {
    fn default() -> &'a QueryRequest {
        <QueryRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryRequest {
    pub fn new() -> QueryRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fields",
            |m: &QueryRequest| { &m.fields },
            |m: &mut QueryRequest| { &mut m.fields },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, table::Schema>(
            "schema",
            |m: &QueryRequest| { &m.schema },
            |m: &mut QueryRequest| { &mut m.schema },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Options>(
            "options",
            |m: &QueryRequest| { &m.options },
            |m: &mut QueryRequest| { &mut m.options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "filter",
            |m: &QueryRequest| { &m.filter },
            |m: &mut QueryRequest| { &mut m.filter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryRequest>(
            "QueryRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryRequest {
    const NAME: &'static str = "QueryRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.fields.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.options)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.filter)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.fields {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.options.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.filter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryRequest {
        QueryRequest::new()
    }

    fn clear(&mut self) {
        self.fields.clear();
        self.schema.clear();
        self.options.clear();
        self.filter.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryRequest {
        static instance: QueryRequest = QueryRequest {
            fields: ::std::vec::Vec::new(),
            schema: ::protobuf::MessageField::none(),
            options: ::protobuf::MessageField::none(),
            filter: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.Options)
pub struct Options {
    // message fields
    // @@protoc_insertion_point(field:tableflow.Options.page)
    pub page: u32,
    // @@protoc_insertion_point(field:tableflow.Options.limit)
    pub limit: u32,
    // @@protoc_insertion_point(field:tableflow.Options.sort)
    pub sort: ::protobuf::MessageField<common::Sort>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.Options.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Options {
    fn default() -> &'a Options {
        <Options as ::protobuf::Message>::default_instance()
    }
}

impl Options {
    pub fn new() -> Options {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "page",
            |m: &Options| { &m.page },
            |m: &mut Options| { &mut m.page },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "limit",
            |m: &Options| { &m.limit },
            |m: &mut Options| { &mut m.limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, common::Sort>(
            "sort",
            |m: &Options| { &m.sort },
            |m: &mut Options| { &mut m.sort },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Options>(
            "Options",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Options {
    const NAME: &'static str = "Options";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.page = is.read_uint32()?;
                },
                16 => {
                    self.limit = is.read_uint32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sort)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.page != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.page);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.limit);
        }
        if let Some(v) = self.sort.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.page != 0 {
            os.write_uint32(1, self.page)?;
        }
        if self.limit != 0 {
            os.write_uint32(2, self.limit)?;
        }
        if let Some(v) = self.sort.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Options {
        Options::new()
    }

    fn clear(&mut self) {
        self.page = 0;
        self.limit = 0;
        self.sort.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Options {
        static instance: Options = Options {
            page: 0,
            limit: 0,
            sort: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Options {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Options").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Options {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.QueryResponse)
pub struct QueryResponse {
    // message fields
    // @@protoc_insertion_point(field:tableflow.QueryResponse.resultSet)
    pub resultSet: ::std::vec::Vec<table::FieldEntries>,
    // @@protoc_insertion_point(field:tableflow.QueryResponse.resp)
    pub resp: ::protobuf::MessageField<common::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.QueryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "resultSet",
            |m: &QueryResponse| { &m.resultSet },
            |m: &mut QueryResponse| { &mut m.resultSet },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, common::Response>(
            "resp",
            |m: &QueryResponse| { &m.resp },
            |m: &mut QueryResponse| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResponse>(
            "QueryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResponse {
    const NAME: &'static str = "QueryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.resultSet.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.resultSet {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.resultSet {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn clear(&mut self) {
        self.resultSet.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: QueryResponse = QueryResponse {
            resultSet: ::std::vec::Vec::new(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.DeleteRequest)
pub struct DeleteRequest {
    // message fields
    // @@protoc_insertion_point(field:tableflow.DeleteRequest.filter)
    pub filter: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // @@protoc_insertion_point(field:tableflow.DeleteRequest.schema)
    pub schema: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.DeleteRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteRequest {
    fn default() -> &'a DeleteRequest {
        <DeleteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRequest {
    pub fn new() -> DeleteRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "filter",
            |m: &DeleteRequest| { &m.filter },
            |m: &mut DeleteRequest| { &mut m.filter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schema",
            |m: &DeleteRequest| { &m.schema },
            |m: &mut DeleteRequest| { &mut m.schema },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteRequest>(
            "DeleteRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteRequest {
    const NAME: &'static str = "DeleteRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.filter)?;
                },
                18 => {
                    self.schema = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.schema.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.schema);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.filter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.schema.is_empty() {
            os.write_string(2, &self.schema)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteRequest {
        DeleteRequest::new()
    }

    fn clear(&mut self) {
        self.filter.clear();
        self.schema.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteRequest {
        static instance: DeleteRequest = DeleteRequest {
            filter: ::protobuf::MessageField::none(),
            schema: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.UpdateRequest)
pub struct UpdateRequest {
    // message fields
    // @@protoc_insertion_point(field:tableflow.UpdateRequest.schema)
    pub schema: ::protobuf::MessageField<table::Schema>,
    // @@protoc_insertion_point(field:tableflow.UpdateRequest.filter)
    pub filter: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // @@protoc_insertion_point(field:tableflow.UpdateRequest.targets)
    pub targets: ::std::vec::Vec<table::FieldEntries>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.UpdateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateRequest {
    fn default() -> &'a UpdateRequest {
        <UpdateRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateRequest {
    pub fn new() -> UpdateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, table::Schema>(
            "schema",
            |m: &UpdateRequest| { &m.schema },
            |m: &mut UpdateRequest| { &mut m.schema },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "filter",
            |m: &UpdateRequest| { &m.filter },
            |m: &mut UpdateRequest| { &mut m.filter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "targets",
            |m: &UpdateRequest| { &m.targets },
            |m: &mut UpdateRequest| { &mut m.targets },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateRequest>(
            "UpdateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateRequest {
    const NAME: &'static str = "UpdateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.filter)?;
                },
                26 => {
                    self.targets.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.targets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.filter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.targets {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateRequest {
        UpdateRequest::new()
    }

    fn clear(&mut self) {
        self.schema.clear();
        self.filter.clear();
        self.targets.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateRequest {
        static instance: UpdateRequest = UpdateRequest {
            schema: ::protobuf::MessageField::none(),
            filter: ::protobuf::MessageField::none(),
            targets: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.UpdateResponse)
pub struct UpdateResponse {
    // message fields
    // @@protoc_insertion_point(field:tableflow.UpdateResponse.resp)
    pub resp: ::protobuf::MessageField<common::Response>,
    // @@protoc_insertion_point(field:tableflow.UpdateResponse.affectedRows)
    pub affectedRows: u32,
    // @@protoc_insertion_point(field:tableflow.UpdateResponse.lastRowIdx)
    pub lastRowIdx: u64,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.UpdateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateResponse {
    fn default() -> &'a UpdateResponse {
        <UpdateResponse as ::protobuf::Message>::default_instance()
    }
}

impl UpdateResponse {
    pub fn new() -> UpdateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, common::Response>(
            "resp",
            |m: &UpdateResponse| { &m.resp },
            |m: &mut UpdateResponse| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "affectedRows",
            |m: &UpdateResponse| { &m.affectedRows },
            |m: &mut UpdateResponse| { &mut m.affectedRows },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lastRowIdx",
            |m: &UpdateResponse| { &m.lastRowIdx },
            |m: &mut UpdateResponse| { &mut m.lastRowIdx },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateResponse>(
            "UpdateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateResponse {
    const NAME: &'static str = "UpdateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                16 => {
                    self.affectedRows = is.read_uint32()?;
                },
                24 => {
                    self.lastRowIdx = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.affectedRows != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.affectedRows);
        }
        if self.lastRowIdx != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.lastRowIdx);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.affectedRows != 0 {
            os.write_uint32(2, self.affectedRows)?;
        }
        if self.lastRowIdx != 0 {
            os.write_uint64(3, self.lastRowIdx)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateResponse {
        UpdateResponse::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.affectedRows = 0;
        self.lastRowIdx = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateResponse {
        static instance: UpdateResponse = UpdateResponse {
            resp: ::protobuf::MessageField::none(),
            affectedRows: 0,
            lastRowIdx: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tableflow.InsertRequest)
pub struct InsertRequest {
    // message fields
    // @@protoc_insertion_point(field:tableflow.InsertRequest.schema)
    pub schema: ::protobuf::MessageField<table::Schema>,
    // @@protoc_insertion_point(field:tableflow.InsertRequest.entries)
    pub entries: ::std::vec::Vec<table::FieldEntries>,
    // special fields
    // @@protoc_insertion_point(special_field:tableflow.InsertRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InsertRequest {
    fn default() -> &'a InsertRequest {
        <InsertRequest as ::protobuf::Message>::default_instance()
    }
}

impl InsertRequest {
    pub fn new() -> InsertRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, table::Schema>(
            "schema",
            |m: &InsertRequest| { &m.schema },
            |m: &mut InsertRequest| { &mut m.schema },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &InsertRequest| { &m.entries },
            |m: &mut InsertRequest| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InsertRequest>(
            "InsertRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InsertRequest {
    const NAME: &'static str = "InsertRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                18 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InsertRequest {
        InsertRequest::new()
    }

    fn clear(&mut self) {
        self.schema.clear();
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InsertRequest {
        static instance: InsertRequest = InsertRequest {
            schema: ::protobuf::MessageField::none(),
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InsertRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InsertRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InsertRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15query-engine/qe.proto\x12\ttableflow\x1a\x1cgoogle/protobuf/struct\
    .proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x12common/table.proto\
    \x1a\x13common/common.proto\":\n\x10GetSchemaRequest\x12&\n\x06schema\
    \x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06schema\";\n\x11GetSchemaRes\
    ponse\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06schem\
    a\"=\n\x13DeleteSchemaRequest\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\x0e\
    .common.SchemaR\x06schema\"\xa5\x01\n\x13UpdateSchemaRequest\x12&\n\x06s\
    chema\x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06schema\x12#\n\x05added\
    \x18\x02\x20\x03(\x0b2\r.common.FieldR\x05added\x12'\n\x07updated\x18\
    \x03\x20\x03(\x0b2\r.common.FieldR\x07updated\x12\x18\n\x07dropped\x18\
    \x04\x20\x03(\tR\x07dropped\"=\n\x13CreateSchemaRequest\x12&\n\x06schema\
    \x18\x01\x20\x01(\x0b2\x0e.common.SchemaR\x06schema\"\xbc\x01\n\x0cQuery\
    Request\x12%\n\x06fields\x18\x01\x20\x03(\x0b2\r.common.FieldR\x06fields\
    \x12&\n\x06schema\x18\x02\x20\x01(\x0b2\x0e.common.SchemaR\x06schema\x12\
    ,\n\x07options\x18\x03\x20\x01(\x0b2\x12.tableflow.OptionsR\x07options\
    \x12/\n\x06filter\x18\x04\x20\x01(\x0b2\x17.google.protobuf.StructR\x06f\
    ilter\"U\n\x07Options\x12\x12\n\x04page\x18\x01\x20\x01(\rR\x04page\x12\
    \x14\n\x05limit\x18\x02\x20\x01(\rR\x05limit\x12\x20\n\x04sort\x18\x03\
    \x20\x01(\x0b2\x0c.common.SortR\x04sort\"i\n\rQueryResponse\x122\n\tresu\
    ltSet\x18\x01\x20\x03(\x0b2\x14.common.FieldEntriesR\tresultSet\x12$\n\
    \x04resp\x18\x02\x20\x01(\x0b2\x10.common.ResponseR\x04resp\"X\n\rDelete\
    Request\x12/\n\x06filter\x18\x01\x20\x01(\x0b2\x17.google.protobuf.Struc\
    tR\x06filter\x12\x16\n\x06schema\x18\x02\x20\x01(\tR\x06schema\"\x98\x01\
    \n\rUpdateRequest\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\x0e.common.Sche\
    maR\x06schema\x12/\n\x06filter\x18\x02\x20\x01(\x0b2\x17.google.protobuf\
    .StructR\x06filter\x12.\n\x07targets\x18\x03\x20\x03(\x0b2\x14.common.Fi\
    eldEntriesR\x07targets\"z\n\x0eUpdateResponse\x12$\n\x04resp\x18\x01\x20\
    \x01(\x0b2\x10.common.ResponseR\x04resp\x12\"\n\x0caffectedRows\x18\x02\
    \x20\x01(\rR\x0caffectedRows\x12\x1e\n\nlastRowIdx\x18\x03\x20\x01(\x04R\
    \nlastRowIdx\"g\n\rInsertRequest\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\
    \x0e.common.SchemaR\x06schema\x12.\n\x07entries\x18\x02\x20\x03(\x0b2\
    \x14.common.FieldEntriesR\x07entries2\x92\x04\n\x0bQueryEngine\x12<\n\
    \x05Query\x12\x17.tableflow.QueryRequest\x1a\x18.tableflow.QueryResponse\
    \"\0\x126\n\x06Delete\x12\x18.tableflow.DeleteRequest\x1a\x10.common.Res\
    ponse\"\0\x12?\n\x06Update\x12\x18.tableflow.UpdateRequest\x1a\x19.table\
    flow.UpdateResponse\"\0\x126\n\x06Insert\x12\x18.tableflow.InsertRequest\
    \x1a\x10.common.Response\"\0\x12H\n\tGetSchema\x12\x1b.tableflow.GetSche\
    maRequest\x1a\x1c.tableflow.GetSchemaResponse\"\0\x12B\n\x0cDeleteSchema\
    \x12\x1e.tableflow.DeleteSchemaRequest\x1a\x10.common.Response\"\0\x12B\
    \n\x0cUpdateSchema\x12\x1e.tableflow.UpdateSchemaRequest\x1a\x10.common.\
    Response\"\0\x12B\n\x0cCreateSchema\x12\x1e.tableflow.CreateSchemaReques\
    t\x1a\x10.common.Response\"\0B\tZ\x07./protoJ\xfc\x12\n\x06\x12\x04\0\0Q\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x12\n\
    \x08\n\x01\x08\x12\x03\x03\0\x1e\n\t\n\x02\x08\x0b\x12\x03\x03\0\x1e\n\t\
    \n\x02\x03\0\x12\x03\x04\0&\n\t\n\x02\x03\x01\x12\x03\x05\0)\n\t\n\x02\
    \x03\x02\x12\x03\x06\0\x1c\n\t\n\x02\x03\x03\x12\x03\x07\0\x1d\n\n\n\x02\
    \x06\0\x12\x04\t\0\x12\x01\n\n\n\x03\x06\0\x01\x12\x03\t\x08\x13\n\x0b\n\
    \x04\x06\0\x02\0\x12\x03\n\x024\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\n\
    \x06\x0b\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\n\x0c\x18\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\n#0\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x0b\x028\n\x0c\
    \n\x05\x06\0\x02\x01\x01\x12\x03\x0b\x06\x0c\n\x0c\n\x05\x06\0\x02\x01\
    \x02\x12\x03\x0b\r\x1a\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0b%4\n\x0b\
    \n\x04\x06\0\x02\x02\x12\x03\x0c\x027\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03\x0c\x06\x0c\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0c\r\x1a\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x0c%3\n\x0b\n\x04\x06\0\x02\x03\x12\x03\r\
    \x028\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\r\x06\x0c\n\x0c\n\x05\x06\0\
    \x02\x03\x02\x12\x03\r\r\x1a\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\r%4\n\
    \x0b\n\x04\x06\0\x02\x04\x12\x03\x0e\x02@\n\x0c\n\x05\x06\0\x02\x04\x01\
    \x12\x03\x0e\x06\x0f\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x0e\x10\x20\n\
    \x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0e+<\n\x0b\n\x04\x06\0\x02\x05\x12\
    \x03\x0f\x02D\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\x0f\x06\x12\n\x0c\n\
    \x05\x06\0\x02\x05\x02\x12\x03\x0f\x13&\n\x0c\n\x05\x06\0\x02\x05\x03\
    \x12\x03\x0f1@\n\x0b\n\x04\x06\0\x02\x06\x12\x03\x10\x02D\n\x0c\n\x05\
    \x06\0\x02\x06\x01\x12\x03\x10\x06\x12\n\x0c\n\x05\x06\0\x02\x06\x02\x12\
    \x03\x10\x13&\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\x101@\n\x0b\n\x04\
    \x06\0\x02\x07\x12\x03\x11\x02D\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\
    \x11\x06\x12\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03\x11\x13&\n\x0c\n\x05\
    \x06\0\x02\x07\x03\x12\x03\x111@\n\n\n\x02\x04\0\x12\x04\x14\0\x16\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x14\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x15\x02\x1b\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x15\x02\x0f\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x15\x10\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x15\x19\x1a\n\n\n\x02\x04\x01\x12\x04\x18\0\x1a\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x18\x08\x19\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x19\x02\x1b\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x19\x02\x0f\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x19\x10\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x19\x19\
    \x1a\n\n\n\x02\x04\x02\x12\x04\x1c\0\x1e\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x1c\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1d\x02\x1b\n\x0c\n\
    \x05\x04\x02\x02\0\x06\x12\x03\x1d\x02\x0f\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x1d\x10\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1d\x19\x1a\n\
    \n\n\x02\x04\x03\x12\x04\x20\0%\x01\n\n\n\x03\x04\x03\x01\x12\x03\x20\
    \x08\x1b\n\x0b\n\x04\x04\x03\x02\0\x12\x03!\x02\x1b\n\x0c\n\x05\x04\x03\
    \x02\0\x06\x12\x03!\x02\x0f\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03!\x10\
    \x16\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03!\x19\x1a\n\x0b\n\x04\x04\x03\
    \x02\x01\x12\x03\"\x02\"\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\"\x02\n\
    \n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\"\x0b\x17\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x03\"\x18\x1d\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\"\
    \x20!\n\x0b\n\x04\x04\x03\x02\x02\x12\x03#\x02$\n\x0c\n\x05\x04\x03\x02\
    \x02\x04\x12\x03#\x02\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03#\x0b\x17\
    \n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03#\x18\x1f\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03#\"#\n\x0b\n\x04\x04\x03\x02\x03\x12\x03$\x02\x1e\n\
    \x0c\n\x05\x04\x03\x02\x03\x04\x12\x03$\x02\n\n\x0c\n\x05\x04\x03\x02\
    \x03\x05\x12\x03$\x0b\x11\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03$\x12\
    \x19\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03$\x1c\x1d\n\n\n\x02\x04\x04\
    \x12\x04'\0)\x01\n\n\n\x03\x04\x04\x01\x12\x03'\x08\x1b\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x03(\x02\x1b\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03(\x02\
    \x0f\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03(\x10\x16\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03(\x19\x1a\n\n\n\x02\x04\x05\x12\x04+\00\x01\n\n\n\x03\
    \x04\x05\x01\x12\x03+\x08\x14\n\x0b\n\x04\x04\x05\x02\0\x12\x03,\x02#\n\
    \x0c\n\x05\x04\x05\x02\0\x04\x12\x03,\x02\n\n\x0c\n\x05\x04\x05\x02\0\
    \x06\x12\x03,\x0b\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03,\x18\x1e\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03,!\"\n\x0b\n\x04\x04\x05\x02\x01\x12\
    \x03-\x02\x1b\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03-\x02\x0f\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x03-\x10\x16\n\x0c\n\x05\x04\x05\x02\x01\
    \x03\x12\x03-\x19\x1a\n\x0b\n\x04\x04\x05\x02\x02\x12\x03.\x02\x16\n\x0c\
    \n\x05\x04\x05\x02\x02\x06\x12\x03.\x02\t\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03.\n\x11\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03.\x14\x15\n\
    \x0b\n\x04\x04\x05\x02\x03\x12\x03/\x02$\n\x0c\n\x05\x04\x05\x02\x03\x06\
    \x12\x03/\x02\x18\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03/\x19\x1f\n\x0c\
    \n\x05\x04\x05\x02\x03\x03\x12\x03/\"#\n\n\n\x02\x04\x06\x12\x042\06\x01\
    \n\n\n\x03\x04\x06\x01\x12\x032\x08\x0f\n\x0b\n\x04\x04\x06\x02\0\x12\
    \x033\x02\x12\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x033\x02\x08\n\x0c\n\x05\
    \x04\x06\x02\0\x01\x12\x033\t\r\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x033\
    \x10\x11\n\x0b\n\x04\x04\x06\x02\x01\x12\x034\x02\x13\n\x0c\n\x05\x04\
    \x06\x02\x01\x05\x12\x034\x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\
    \x034\t\x0e\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x034\x11\x12\n\x0b\n\x04\
    \x04\x06\x02\x02\x12\x035\x02\x17\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\
    \x035\x02\r\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x035\x0e\x12\n\x0c\n\x05\
    \x04\x06\x02\x02\x03\x12\x035\x15\x16\n\n\n\x02\x04\x07\x12\x048\0;\x01\
    \n\n\n\x03\x04\x07\x01\x12\x038\x08\x15\n\x0b\n\x04\x04\x07\x02\0\x12\
    \x039\x02-\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x039\x02\n\n\x0c\n\x05\x04\
    \x07\x02\0\x06\x12\x039\x0b\x1e\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x039\
    \x1f(\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x039+,\n\x0b\n\x04\x04\x07\x02\
    \x01\x12\x03:\x02\x1b\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03:\x02\x11\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03:\x12\x16\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03:\x19\x1a\n\n\n\x02\x04\x08\x12\x04=\0@\x01\n\n\n\x03\
    \x04\x08\x01\x12\x03=\x08\x15\n\x0b\n\x04\x04\x08\x02\0\x12\x03>\x02$\n\
    \x0c\n\x05\x04\x08\x02\0\x06\x12\x03>\x02\x18\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x03>\x19\x1f\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03>\"#\n\x0b\n\
    \x04\x04\x08\x02\x01\x12\x03?\x02\x14\n\x0c\n\x05\x04\x08\x02\x01\x05\
    \x12\x03?\x02\x08\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03?\t\x0f\n\x0c\n\
    \x05\x04\x08\x02\x01\x03\x12\x03?\x12\x13\n\n\n\x02\x04\t\x12\x04B\0F\
    \x01\n\n\n\x03\x04\t\x01\x12\x03B\x08\x15\n\x0b\n\x04\x04\t\x02\0\x12\
    \x03C\x02\x1b\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03C\x02\x0f\n\x0c\n\x05\
    \x04\t\x02\0\x01\x12\x03C\x10\x16\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03C\
    \x19\x1a\n\x0b\n\x04\x04\t\x02\x01\x12\x03D\x02$\n\x0c\n\x05\x04\t\x02\
    \x01\x06\x12\x03D\x02\x18\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03D\x19\x1f\
    \n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03D\"#\n\x0b\n\x04\x04\t\x02\x02\x12\
    \x03E\x02+\n\x0c\n\x05\x04\t\x02\x02\x04\x12\x03E\x02\n\n\x0c\n\x05\x04\
    \t\x02\x02\x06\x12\x03E\x0b\x1e\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03E\
    \x1f&\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03E)*\n\n\n\x02\x04\n\x12\x04H\
    \0L\x01\n\n\n\x03\x04\n\x01\x12\x03H\x08\x16\n\x0b\n\x04\x04\n\x02\0\x12\
    \x03I\x02\x1b\n\x0c\n\x05\x04\n\x02\0\x06\x12\x03I\x02\x11\n\x0c\n\x05\
    \x04\n\x02\0\x01\x12\x03I\x12\x16\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03I\
    \x19\x1a\n\x0b\n\x04\x04\n\x02\x01\x12\x03J\x02\x1a\n\x0c\n\x05\x04\n\
    \x02\x01\x05\x12\x03J\x02\x08\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03J\t\
    \x15\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03J\x18\x19\n\x0b\n\x04\x04\n\
    \x02\x02\x12\x03K\x02\x18\n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03K\x02\x08\
    \n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03K\t\x13\n\x0c\n\x05\x04\n\x02\x02\
    \x03\x12\x03K\x16\x17\n\n\n\x02\x04\x0b\x12\x04N\0Q\x01\n\n\n\x03\x04\
    \x0b\x01\x12\x03N\x08\x15\n\x0b\n\x04\x04\x0b\x02\0\x12\x03O\x02\x1b\n\
    \x0c\n\x05\x04\x0b\x02\0\x06\x12\x03O\x02\x0f\n\x0c\n\x05\x04\x0b\x02\0\
    \x01\x12\x03O\x10\x16\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03O\x19\x1a\n\
    \x0b\n\x04\x04\x0b\x02\x01\x12\x03P\x02+\n\x0c\n\x05\x04\x0b\x02\x01\x04\
    \x12\x03P\x02\n\n\x0c\n\x05\x04\x0b\x02\x01\x06\x12\x03P\x0b\x1e\n\x0c\n\
    \x05\x04\x0b\x02\x01\x01\x12\x03P\x1f&\n\x0c\n\x05\x04\x0b\x02\x01\x03\
    \x12\x03P)*b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(table::file_descriptor().clone());
            deps.push(common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(GetSchemaRequest::generated_message_descriptor_data());
            messages.push(GetSchemaResponse::generated_message_descriptor_data());
            messages.push(DeleteSchemaRequest::generated_message_descriptor_data());
            messages.push(UpdateSchemaRequest::generated_message_descriptor_data());
            messages.push(CreateSchemaRequest::generated_message_descriptor_data());
            messages.push(QueryRequest::generated_message_descriptor_data());
            messages.push(Options::generated_message_descriptor_data());
            messages.push(QueryResponse::generated_message_descriptor_data());
            messages.push(DeleteRequest::generated_message_descriptor_data());
            messages.push(UpdateRequest::generated_message_descriptor_data());
            messages.push(UpdateResponse::generated_message_descriptor_data());
            messages.push(InsertRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
