// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `apiserver/apiserver.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

use crate::common::{common, stream};

#[derive(PartialEq,Clone,Default)]
pub struct CreateResourceRequest {
    // message fields
    pub name: ::std::string::String,
    pub namespace: ::std::string::String,
    pub resource_type: ResourceTypeEnum,
    // message oneof groups
    pub options: ::std::option::Option<CreateResourceRequest_oneof_options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateResourceRequest {
    fn default() -> &'a CreateResourceRequest {
        <CreateResourceRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CreateResourceRequest_oneof_options {
    dataflow(CreateDataflowOptions),
}

impl CreateResourceRequest {
    pub fn new() -> CreateResourceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string namespace = 2;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // .apiserver.ResourceTypeEnum resource_type = 3;


    pub fn get_resource_type(&self) -> ResourceTypeEnum {
        self.resource_type
    }
    pub fn clear_resource_type(&mut self) {
        self.resource_type = ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC;
    }

    // Param is passed by value, moved
    pub fn set_resource_type(&mut self, v: ResourceTypeEnum) {
        self.resource_type = v;
    }

    // .apiserver.CreateDataflowOptions dataflow = 4;


    pub fn get_dataflow(&self) -> &CreateDataflowOptions {
        match self.options {
            ::std::option::Option::Some(CreateResourceRequest_oneof_options::dataflow(ref v)) => v,
            _ => <CreateDataflowOptions as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_dataflow(&mut self) {
        self.options = ::std::option::Option::None;
    }

    pub fn has_dataflow(&self) -> bool {
        match self.options {
            ::std::option::Option::Some(CreateResourceRequest_oneof_options::dataflow(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dataflow(&mut self, v: CreateDataflowOptions) {
        self.options = ::std::option::Option::Some(CreateResourceRequest_oneof_options::dataflow(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dataflow(&mut self) -> &mut CreateDataflowOptions {
        if let ::std::option::Option::Some(CreateResourceRequest_oneof_options::dataflow(_)) = self.options {
        } else {
            self.options = ::std::option::Option::Some(CreateResourceRequest_oneof_options::dataflow(CreateDataflowOptions::new()));
        }
        match self.options {
            ::std::option::Option::Some(CreateResourceRequest_oneof_options::dataflow(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dataflow(&mut self) -> CreateDataflowOptions {
        if self.has_dataflow() {
            match self.options.take() {
                ::std::option::Option::Some(CreateResourceRequest_oneof_options::dataflow(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateDataflowOptions::new()
        }
    }
}

impl ::protobuf::Message for CreateResourceRequest {
    fn is_initialized(&self) -> bool {
        if let Some(CreateResourceRequest_oneof_options::dataflow(ref v)) = self.options {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.resource_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.options = ::std::option::Option::Some(CreateResourceRequest_oneof_options::dataflow(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.namespace);
        }
        if self.resource_type != ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC {
            my_size += ::protobuf::rt::enum_size(3, self.resource_type);
        }
        if let ::std::option::Option::Some(ref v) = self.options {
            match v {
                &CreateResourceRequest_oneof_options::dataflow(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.namespace.is_empty() {
            os.write_string(2, &self.namespace)?;
        }
        if self.resource_type != ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.resource_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.options {
            match v {
                &CreateResourceRequest_oneof_options::dataflow(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateResourceRequest {
        CreateResourceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CreateResourceRequest| { &m.name },
                |m: &mut CreateResourceRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &CreateResourceRequest| { &m.namespace },
                |m: &mut CreateResourceRequest| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResourceTypeEnum>>(
                "resource_type",
                |m: &CreateResourceRequest| { &m.resource_type },
                |m: &mut CreateResourceRequest| { &mut m.resource_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CreateDataflowOptions>(
                "dataflow",
                CreateResourceRequest::has_dataflow,
                CreateResourceRequest::get_dataflow,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateResourceRequest>(
                "CreateResourceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateResourceRequest {
        static instance: ::protobuf::rt::LazyV2<CreateResourceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateResourceRequest::new)
    }
}

impl ::protobuf::Clear for CreateResourceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.namespace.clear();
        self.resource_type = ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC;
        self.options = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResourceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateResourceResponse {
    // message fields
    pub status: ResourceStatusEnum,
    pub resource_id: ::protobuf::SingularPtrField<common::ResourceId>,
    pub error_msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateResourceResponse {
    fn default() -> &'a CreateResourceResponse {
        <CreateResourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateResourceResponse {
    pub fn new() -> CreateResourceResponse {
        ::std::default::Default::default()
    }

    // .apiserver.ResourceStatusEnum status = 1;


    pub fn get_status(&self) -> ResourceStatusEnum {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ResourceStatusEnum) {
        self.status = v;
    }

    // .common.ResourceId resource_id = 2;


    pub fn get_resource_id(&self) -> &common::ResourceId {
        self.resource_id.as_ref().unwrap_or_else(|| <common::ResourceId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id.clear();
    }

    pub fn has_resource_id(&self) -> bool {
        self.resource_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: common::ResourceId) {
        self.resource_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_id(&mut self) -> &mut common::ResourceId {
        if self.resource_id.is_none() {
            self.resource_id.set_default();
        }
        self.resource_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource_id(&mut self) -> common::ResourceId {
        self.resource_id.take().unwrap_or_else(|| common::ResourceId::new())
    }

    // string error_msg = 3;


    pub fn get_error_msg(&self) -> &str {
        &self.error_msg
    }
    pub fn clear_error_msg(&mut self) {
        self.error_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_msg(&mut self, v: ::std::string::String) {
        self.error_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_msg(&mut self) -> &mut ::std::string::String {
        &mut self.error_msg
    }

    // Take field
    pub fn take_error_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateResourceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resource_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if let Some(ref v) = self.resource_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let Some(ref v) = self.resource_id.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error_msg.is_empty() {
            os.write_string(3, &self.error_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateResourceResponse {
        CreateResourceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResourceStatusEnum>>(
                "status",
                |m: &CreateResourceResponse| { &m.status },
                |m: &mut CreateResourceResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::ResourceId>>(
                "resource_id",
                |m: &CreateResourceResponse| { &m.resource_id },
                |m: &mut CreateResourceResponse| { &mut m.resource_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error_msg",
                |m: &CreateResourceResponse| { &m.error_msg },
                |m: &mut CreateResourceResponse| { &mut m.error_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateResourceResponse>(
                "CreateResourceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateResourceResponse {
        static instance: ::protobuf::rt::LazyV2<CreateResourceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateResourceResponse::new)
    }
}

impl ::protobuf::Clear for CreateResourceResponse {
    fn clear(&mut self) {
        self.status = ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC;
        self.resource_id.clear();
        self.error_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateResourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResourceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDataflowOptions {
    // message fields
    pub dataflow: ::protobuf::SingularPtrField<stream::Dataflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDataflowOptions {
    fn default() -> &'a CreateDataflowOptions {
        <CreateDataflowOptions as ::protobuf::Message>::default_instance()
    }
}

impl CreateDataflowOptions {
    pub fn new() -> CreateDataflowOptions {
        ::std::default::Default::default()
    }

    // .common.Dataflow dataflow = 1;


    pub fn get_dataflow(&self) -> &stream::Dataflow {
        self.dataflow.as_ref().unwrap_or_else(|| <stream::Dataflow as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dataflow(&mut self) {
        self.dataflow.clear();
    }

    pub fn has_dataflow(&self) -> bool {
        self.dataflow.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dataflow(&mut self, v: stream::Dataflow) {
        self.dataflow = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataflow(&mut self) -> &mut stream::Dataflow {
        if self.dataflow.is_none() {
            self.dataflow.set_default();
        }
        self.dataflow.as_mut().unwrap()
    }

    // Take field
    pub fn take_dataflow(&mut self) -> stream::Dataflow {
        self.dataflow.take().unwrap_or_else(|| stream::Dataflow::new())
    }
}

impl ::protobuf::Message for CreateDataflowOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.dataflow {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dataflow)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.dataflow.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.dataflow.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDataflowOptions {
        CreateDataflowOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<stream::Dataflow>>(
                "dataflow",
                |m: &CreateDataflowOptions| { &m.dataflow },
                |m: &mut CreateDataflowOptions| { &mut m.dataflow },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateDataflowOptions>(
                "CreateDataflowOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateDataflowOptions {
        static instance: ::protobuf::rt::LazyV2<CreateDataflowOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateDataflowOptions::new)
    }
}

impl ::protobuf::Clear for CreateDataflowOptions {
    fn clear(&mut self) {
        self.dataflow.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDataflowOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDataflowOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListResourcesRequest {
    // message fields
    pub namespace: ::std::string::String,
    pub resource_type: ResourceTypeEnum,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListResourcesRequest {
    fn default() -> &'a ListResourcesRequest {
        <ListResourcesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListResourcesRequest {
    pub fn new() -> ListResourcesRequest {
        ::std::default::Default::default()
    }

    // string namespace = 1;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // .apiserver.ResourceTypeEnum resource_type = 2;


    pub fn get_resource_type(&self) -> ResourceTypeEnum {
        self.resource_type
    }
    pub fn clear_resource_type(&mut self) {
        self.resource_type = ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC;
    }

    // Param is passed by value, moved
    pub fn set_resource_type(&mut self, v: ResourceTypeEnum) {
        self.resource_type = v;
    }
}

impl ::protobuf::Message for ListResourcesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.resource_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.namespace);
        }
        if self.resource_type != ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC {
            my_size += ::protobuf::rt::enum_size(2, self.resource_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.namespace.is_empty() {
            os.write_string(1, &self.namespace)?;
        }
        if self.resource_type != ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.resource_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListResourcesRequest {
        ListResourcesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &ListResourcesRequest| { &m.namespace },
                |m: &mut ListResourcesRequest| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResourceTypeEnum>>(
                "resource_type",
                |m: &ListResourcesRequest| { &m.resource_type },
                |m: &mut ListResourcesRequest| { &mut m.resource_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListResourcesRequest>(
                "ListResourcesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListResourcesRequest {
        static instance: ::protobuf::rt::LazyV2<ListResourcesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListResourcesRequest::new)
    }
}

impl ::protobuf::Clear for ListResourcesRequest {
    fn clear(&mut self) {
        self.namespace.clear();
        self.resource_type = ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListResourcesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListResourcesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListResourcesResponse {
    // message fields
    pub resources: ::protobuf::RepeatedField<Resource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListResourcesResponse {
    fn default() -> &'a ListResourcesResponse {
        <ListResourcesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListResourcesResponse {
    pub fn new() -> ListResourcesResponse {
        ::std::default::Default::default()
    }

    // repeated .apiserver.Resource resources = 1;


    pub fn get_resources(&self) -> &[Resource] {
        &self.resources
    }
    pub fn clear_resources(&mut self) {
        self.resources.clear();
    }

    // Param is passed by value, moved
    pub fn set_resources(&mut self, v: ::protobuf::RepeatedField<Resource>) {
        self.resources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resources(&mut self) -> &mut ::protobuf::RepeatedField<Resource> {
        &mut self.resources
    }

    // Take field
    pub fn take_resources(&mut self) -> ::protobuf::RepeatedField<Resource> {
        ::std::mem::replace(&mut self.resources, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListResourcesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resources {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resources)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.resources {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.resources {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListResourcesResponse {
        ListResourcesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                "resources",
                |m: &ListResourcesResponse| { &m.resources },
                |m: &mut ListResourcesResponse| { &mut m.resources },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListResourcesResponse>(
                "ListResourcesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListResourcesResponse {
        static instance: ::protobuf::rt::LazyV2<ListResourcesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListResourcesResponse::new)
    }
}

impl ::protobuf::Clear for ListResourcesResponse {
    fn clear(&mut self) {
        self.resources.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListResourcesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListResourcesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resource {
    // message fields
    pub resource_id: ::protobuf::SingularPtrField<common::ResourceId>,
    pub resource_name: ::std::string::String,
    pub resource_type: ResourceTypeEnum,
    pub status: ResourceStatusEnum,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resource {
    fn default() -> &'a Resource {
        <Resource as ::protobuf::Message>::default_instance()
    }
}

impl Resource {
    pub fn new() -> Resource {
        ::std::default::Default::default()
    }

    // .common.ResourceId resource_id = 1;


    pub fn get_resource_id(&self) -> &common::ResourceId {
        self.resource_id.as_ref().unwrap_or_else(|| <common::ResourceId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id.clear();
    }

    pub fn has_resource_id(&self) -> bool {
        self.resource_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: common::ResourceId) {
        self.resource_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_id(&mut self) -> &mut common::ResourceId {
        if self.resource_id.is_none() {
            self.resource_id.set_default();
        }
        self.resource_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource_id(&mut self) -> common::ResourceId {
        self.resource_id.take().unwrap_or_else(|| common::ResourceId::new())
    }

    // string resource_name = 2;


    pub fn get_resource_name(&self) -> &str {
        &self.resource_name
    }
    pub fn clear_resource_name(&mut self) {
        self.resource_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_name(&mut self, v: ::std::string::String) {
        self.resource_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_name(&mut self) -> &mut ::std::string::String {
        &mut self.resource_name
    }

    // Take field
    pub fn take_resource_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_name, ::std::string::String::new())
    }

    // .apiserver.ResourceTypeEnum resource_type = 3;


    pub fn get_resource_type(&self) -> ResourceTypeEnum {
        self.resource_type
    }
    pub fn clear_resource_type(&mut self) {
        self.resource_type = ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC;
    }

    // Param is passed by value, moved
    pub fn set_resource_type(&mut self, v: ResourceTypeEnum) {
        self.resource_type = v;
    }

    // .apiserver.ResourceStatusEnum status = 4;


    pub fn get_status(&self) -> ResourceStatusEnum {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ResourceStatusEnum) {
        self.status = v;
    }
}

impl ::protobuf::Message for Resource {
    fn is_initialized(&self) -> bool {
        for v in &self.resource_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_name)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.resource_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.resource_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.resource_name);
        }
        if self.resource_type != ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC {
            my_size += ::protobuf::rt::enum_size(3, self.resource_type);
        }
        if self.status != ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC {
            my_size += ::protobuf::rt::enum_size(4, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.resource_name.is_empty() {
            os.write_string(2, &self.resource_name)?;
        }
        if self.resource_type != ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.resource_type))?;
        }
        if self.status != ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resource {
        Resource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::ResourceId>>(
                "resource_id",
                |m: &Resource| { &m.resource_id },
                |m: &mut Resource| { &mut m.resource_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_name",
                |m: &Resource| { &m.resource_name },
                |m: &mut Resource| { &mut m.resource_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResourceTypeEnum>>(
                "resource_type",
                |m: &Resource| { &m.resource_type },
                |m: &mut Resource| { &mut m.resource_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResourceStatusEnum>>(
                "status",
                |m: &Resource| { &m.status },
                |m: &mut Resource| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Resource>(
                "Resource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Resource {
        static instance: ::protobuf::rt::LazyV2<Resource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Resource::new)
    }
}

impl ::protobuf::Clear for Resource {
    fn clear(&mut self) {
        self.resource_id.clear();
        self.resource_name.clear();
        self.resource_type = ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC;
        self.status = ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResourceRequest {
    // message fields
    pub resource_id: ::protobuf::SingularPtrField<common::ResourceId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResourceRequest {
    fn default() -> &'a GetResourceRequest {
        <GetResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetResourceRequest {
    pub fn new() -> GetResourceRequest {
        ::std::default::Default::default()
    }

    // .common.ResourceId resource_id = 1;


    pub fn get_resource_id(&self) -> &common::ResourceId {
        self.resource_id.as_ref().unwrap_or_else(|| <common::ResourceId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id.clear();
    }

    pub fn has_resource_id(&self) -> bool {
        self.resource_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: common::ResourceId) {
        self.resource_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_id(&mut self) -> &mut common::ResourceId {
        if self.resource_id.is_none() {
            self.resource_id.set_default();
        }
        self.resource_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource_id(&mut self) -> common::ResourceId {
        self.resource_id.take().unwrap_or_else(|| common::ResourceId::new())
    }
}

impl ::protobuf::Message for GetResourceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResourceRequest {
        GetResourceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::ResourceId>>(
                "resource_id",
                |m: &GetResourceRequest| { &m.resource_id },
                |m: &mut GetResourceRequest| { &mut m.resource_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetResourceRequest>(
                "GetResourceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetResourceRequest {
        static instance: ::protobuf::rt::LazyV2<GetResourceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetResourceRequest::new)
    }
}

impl ::protobuf::Clear for GetResourceRequest {
    fn clear(&mut self) {
        self.resource_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResourceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResourceResponse {
    // message fields
    pub resource: ::protobuf::SingularPtrField<Resource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResourceResponse {
    fn default() -> &'a GetResourceResponse {
        <GetResourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetResourceResponse {
    pub fn new() -> GetResourceResponse {
        ::std::default::Default::default()
    }

    // .apiserver.Resource resource = 1;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| <Resource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }
}

impl ::protobuf::Message for GetResourceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResourceResponse {
        GetResourceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                "resource",
                |m: &GetResourceResponse| { &m.resource },
                |m: &mut GetResourceResponse| { &mut m.resource },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetResourceResponse>(
                "GetResourceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetResourceResponse {
        static instance: ::protobuf::rt::LazyV2<GetResourceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetResourceResponse::new)
    }
}

impl ::protobuf::Clear for GetResourceResponse {
    fn clear(&mut self) {
        self.resource.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetResourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResourceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResourceRequest {
    // message fields
    pub resource_id: ::protobuf::SingularPtrField<common::ResourceId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResourceRequest {
    fn default() -> &'a DeleteResourceRequest {
        <DeleteResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResourceRequest {
    pub fn new() -> DeleteResourceRequest {
        ::std::default::Default::default()
    }

    // .common.ResourceId resource_id = 1;


    pub fn get_resource_id(&self) -> &common::ResourceId {
        self.resource_id.as_ref().unwrap_or_else(|| <common::ResourceId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id.clear();
    }

    pub fn has_resource_id(&self) -> bool {
        self.resource_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: common::ResourceId) {
        self.resource_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_id(&mut self) -> &mut common::ResourceId {
        if self.resource_id.is_none() {
            self.resource_id.set_default();
        }
        self.resource_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource_id(&mut self) -> common::ResourceId {
        self.resource_id.take().unwrap_or_else(|| common::ResourceId::new())
    }
}

impl ::protobuf::Message for DeleteResourceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResourceRequest {
        DeleteResourceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::ResourceId>>(
                "resource_id",
                |m: &DeleteResourceRequest| { &m.resource_id },
                |m: &mut DeleteResourceRequest| { &mut m.resource_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteResourceRequest>(
                "DeleteResourceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteResourceRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteResourceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteResourceRequest::new)
    }
}

impl ::protobuf::Clear for DeleteResourceRequest {
    fn clear(&mut self) {
        self.resource_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResourceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResourceResponse {
    // message fields
    pub resource: ::protobuf::SingularPtrField<Resource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResourceResponse {
    fn default() -> &'a DeleteResourceResponse {
        <DeleteResourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResourceResponse {
    pub fn new() -> DeleteResourceResponse {
        ::std::default::Default::default()
    }

    // .apiserver.Resource resource = 1;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| <Resource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }
}

impl ::protobuf::Message for DeleteResourceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResourceResponse {
        DeleteResourceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                "resource",
                |m: &DeleteResourceResponse| { &m.resource },
                |m: &mut DeleteResourceResponse| { &mut m.resource },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteResourceResponse>(
                "DeleteResourceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteResourceResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteResourceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteResourceResponse::new)
    }
}

impl ::protobuf::Clear for DeleteResourceResponse {
    fn clear(&mut self) {
        self.resource.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResourceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ResourceTypeEnum {
    RESOURCE_TYPE_ENUM_UNSPECIFIC = 0,
    RESOURCE_TYPE_ENUM_DATAFLOW = 1,
}

impl ::protobuf::ProtobufEnum for ResourceTypeEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ResourceTypeEnum> {
        match value {
            0 => ::std::option::Option::Some(ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC),
            1 => ::std::option::Option::Some(ResourceTypeEnum::RESOURCE_TYPE_ENUM_DATAFLOW),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ResourceTypeEnum] = &[
            ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC,
            ResourceTypeEnum::RESOURCE_TYPE_ENUM_DATAFLOW,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ResourceTypeEnum>("ResourceTypeEnum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ResourceTypeEnum {
}

impl ::std::default::Default for ResourceTypeEnum {
    fn default() -> Self {
        ResourceTypeEnum::RESOURCE_TYPE_ENUM_UNSPECIFIC
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceTypeEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ResourceStatusEnum {
    RESOURCE_STATUS_ENUM_UNSPECIFIC = 0,
    RESOURCE_STATUS_ENUM_STARTING = 1,
    RESOURCE_STATUS_ENUM_RUNNING = 2,
    RESOURCE_STATUS_ENUM_FAILURE = 3,
    RESOURCE_STATUS_ENUM_STOPPING = 4,
    RESOURCE_STATUS_ENUM_DELETED = 5,
}

impl ::protobuf::ProtobufEnum for ResourceStatusEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ResourceStatusEnum> {
        match value {
            0 => ::std::option::Option::Some(ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC),
            1 => ::std::option::Option::Some(ResourceStatusEnum::RESOURCE_STATUS_ENUM_STARTING),
            2 => ::std::option::Option::Some(ResourceStatusEnum::RESOURCE_STATUS_ENUM_RUNNING),
            3 => ::std::option::Option::Some(ResourceStatusEnum::RESOURCE_STATUS_ENUM_FAILURE),
            4 => ::std::option::Option::Some(ResourceStatusEnum::RESOURCE_STATUS_ENUM_STOPPING),
            5 => ::std::option::Option::Some(ResourceStatusEnum::RESOURCE_STATUS_ENUM_DELETED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ResourceStatusEnum] = &[
            ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC,
            ResourceStatusEnum::RESOURCE_STATUS_ENUM_STARTING,
            ResourceStatusEnum::RESOURCE_STATUS_ENUM_RUNNING,
            ResourceStatusEnum::RESOURCE_STATUS_ENUM_FAILURE,
            ResourceStatusEnum::RESOURCE_STATUS_ENUM_STOPPING,
            ResourceStatusEnum::RESOURCE_STATUS_ENUM_DELETED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ResourceStatusEnum>("ResourceStatusEnum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ResourceStatusEnum {
}

impl ::std::default::Default for ResourceStatusEnum {
    fn default() -> Self {
        ResourceStatusEnum::RESOURCE_STATUS_ENUM_UNSPECIFIC
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceStatusEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19apiserver/apiserver.proto\x12\tapiserver\x1a\x13common/stream.prot\
    o\x1a\x13common/common.proto\"\xd6\x01\n\x15CreateResourceRequest\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1c\n\tnamespace\x18\x02\
    \x20\x01(\tR\tnamespace\x12@\n\rresource_type\x18\x03\x20\x01(\x0e2\x1b.\
    apiserver.ResourceTypeEnumR\x0cresourceType\x12>\n\x08dataflow\x18\x04\
    \x20\x01(\x0b2\x20.apiserver.CreateDataflowOptionsH\0R\x08dataflowB\t\n\
    \x07options\"\xa1\x01\n\x16CreateResourceResponse\x125\n\x06status\x18\
    \x01\x20\x01(\x0e2\x1d.apiserver.ResourceStatusEnumR\x06status\x123\n\
    \x0bresource_id\x18\x02\x20\x01(\x0b2\x12.common.ResourceIdR\nresourceId\
    \x12\x1b\n\terror_msg\x18\x03\x20\x01(\tR\x08errorMsg\"E\n\x15CreateData\
    flowOptions\x12,\n\x08dataflow\x18\x01\x20\x01(\x0b2\x10.common.Dataflow\
    R\x08dataflow\"v\n\x14ListResourcesRequest\x12\x1c\n\tnamespace\x18\x01\
    \x20\x01(\tR\tnamespace\x12@\n\rresource_type\x18\x02\x20\x01(\x0e2\x1b.\
    apiserver.ResourceTypeEnumR\x0cresourceType\"J\n\x15ListResourcesRespons\
    e\x121\n\tresources\x18\x01\x20\x03(\x0b2\x13.apiserver.ResourceR\tresou\
    rces\"\xdd\x01\n\x08Resource\x123\n\x0bresource_id\x18\x01\x20\x01(\x0b2\
    \x12.common.ResourceIdR\nresourceId\x12#\n\rresource_name\x18\x02\x20\
    \x01(\tR\x0cresourceName\x12@\n\rresource_type\x18\x03\x20\x01(\x0e2\x1b\
    .apiserver.ResourceTypeEnumR\x0cresourceType\x125\n\x06status\x18\x04\
    \x20\x01(\x0e2\x1d.apiserver.ResourceStatusEnumR\x06status\"I\n\x12GetRe\
    sourceRequest\x123\n\x0bresource_id\x18\x01\x20\x01(\x0b2\x12.common.Res\
    ourceIdR\nresourceId\"F\n\x13GetResourceResponse\x12/\n\x08resource\x18\
    \x01\x20\x01(\x0b2\x13.apiserver.ResourceR\x08resource\"L\n\x15DeleteRes\
    ourceRequest\x123\n\x0bresource_id\x18\x01\x20\x01(\x0b2\x12.common.Reso\
    urceIdR\nresourceId\"I\n\x16DeleteResourceResponse\x12/\n\x08resource\
    \x18\x01\x20\x01(\x0b2\x13.apiserver.ResourceR\x08resource*V\n\x10Resour\
    ceTypeEnum\x12!\n\x1dRESOURCE_TYPE_ENUM_UNSPECIFIC\x10\0\x12\x1f\n\x1bRE\
    SOURCE_TYPE_ENUM_DATAFLOW\x10\x01*\xe5\x01\n\x12ResourceStatusEnum\x12#\
    \n\x1fRESOURCE_STATUS_ENUM_UNSPECIFIC\x10\0\x12!\n\x1dRESOURCE_STATUS_EN\
    UM_STARTING\x10\x01\x12\x20\n\x1cRESOURCE_STATUS_ENUM_RUNNING\x10\x02\
    \x12\x20\n\x1cRESOURCE_STATUS_ENUM_FAILURE\x10\x03\x12!\n\x1dRESOURCE_ST\
    ATUS_ENUM_STOPPING\x10\x04\x12\x20\n\x1cRESOURCE_STATUS_ENUM_DELETED\x10\
    \x05B\x1bZ\x19tableflow/alpha/apiserverJ\xde\x0e\n\x06\x12\x04\0\0F\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x12\n\t\n\
    \x02\x03\0\x12\x03\x03\0\x1d\n\t\n\x02\x03\x01\x12\x03\x04\0\x1d\n\x08\n\
    \x01\x08\x12\x03\x06\00\n\t\n\x02\x08\x0b\x12\x03\x06\00\n\n\n\x02\x04\0\
    \x12\x04\x08\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x1d\n\x1c\n\
    \x04\x04\0\x02\0\x12\x03\t\x02\x12\"\x0f\x20resource\x20name\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\t\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x10\x11\n\x18\n\x04\x04\
    \0\x02\x01\x12\x03\n\x02\x17\"\x0b\x20namespace\n\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\t\x12\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\x15\x16\n&\n\x04\x04\0\x02\x02\
    \x12\x03\x0b\x02%\"\x19\x20resource\x20type\x20to\x20create\n\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\x0b\x02\x12\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x0b\x13\x20\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b#$\n\x0c\n\
    \x04\x04\0\x08\0\x12\x04\x0c\x02\x0e\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\
    \x03\x0c\x08\x0f\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x04'\n\x0c\n\x05\
    \x04\0\x02\x03\x06\x12\x03\r\x04\x19\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\r\x1a\"\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r%&\n\n\n\x02\x04\x01\
    \x12\x04\x11\0\x15\x01\n\n\n\x03\x04\x01\x01\x12\x03\x11\x08\x1e\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x12\x02\x20\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03\x12\x02\x14\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x12\x15\x1b\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x12\x1e\x1f\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x13\x02$\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x13\x02\x13\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x13\x14\x1f\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x13\"#\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x14\x02\
    \x17\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03\x14\t\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\x14\x15\x16\n\n\n\x02\x05\0\x12\x04\x17\0\x1a\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x17\x05\x15\n\x0b\n\x04\x05\0\x02\0\x12\x03\x18\x02$\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x18\x02\x1f\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x18\"#\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x19\x02\"\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03\x19\x02\x1d\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\x19\x20!\n\n\n\x02\x05\x01\x12\x04\x1c\0#\x01\n\n\n\x03\x05\x01\x01\
    \x12\x03\x1c\x05\x17\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x1d\x02&\n\x0c\n\
    \x05\x05\x01\x02\0\x01\x12\x03\x1d\x02!\n\x0c\n\x05\x05\x01\x02\0\x02\
    \x12\x03\x1d$%\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x1e\x02$\n\x0c\n\x05\
    \x05\x01\x02\x01\x01\x12\x03\x1e\x02\x1f\n\x0c\n\x05\x05\x01\x02\x01\x02\
    \x12\x03\x1e\"#\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x1f\x02#\n\x0c\n\x05\
    \x05\x01\x02\x02\x01\x12\x03\x1f\x02\x1e\n\x0c\n\x05\x05\x01\x02\x02\x02\
    \x12\x03\x1f!\"\n\x0b\n\x04\x05\x01\x02\x03\x12\x03\x20\x02#\n\x0c\n\x05\
    \x05\x01\x02\x03\x01\x12\x03\x20\x02\x1e\n\x0c\n\x05\x05\x01\x02\x03\x02\
    \x12\x03\x20!\"\n\x0b\n\x04\x05\x01\x02\x04\x12\x03!\x02$\n\x0c\n\x05\
    \x05\x01\x02\x04\x01\x12\x03!\x02\x1f\n\x0c\n\x05\x05\x01\x02\x04\x02\
    \x12\x03!\"#\n\x0b\n\x04\x05\x01\x02\x05\x12\x03\"\x02#\n\x0c\n\x05\x05\
    \x01\x02\x05\x01\x12\x03\"\x02\x1e\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\
    \x03\"!\"\n\n\n\x02\x04\x02\x12\x04%\0'\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03%\x08\x1d\n\x0b\n\x04\x04\x02\x02\0\x12\x03&\x02\x1f\n\x0c\n\x05\x04\
    \x02\x02\0\x06\x12\x03&\x02\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03&\
    \x12\x1a\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03&\x1d\x1e\n\n\n\x02\x04\
    \x03\x12\x04)\0,\x01\n\n\n\x03\x04\x03\x01\x12\x03)\x08\x1c\n\x18\n\x04\
    \x04\x03\x02\0\x12\x03*\x02\x17\"\x0b\x20namespace\n\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03*\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03*\t\x12\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03*\x15\x16\n$\n\x04\x04\x03\x02\x01\
    \x12\x03+\x02%\"\x17\x20resource\x20type\x20to\x20list\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x06\x12\x03+\x02\x12\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03+\x13\x20\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03+#$\n\n\n\x02\x04\
    \x04\x12\x04-\0/\x01\n\n\n\x03\x04\x04\x01\x12\x03-\x08\x1d\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03.\x02\"\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03.\x02\
    \n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03.\x0b\x13\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03.\x14\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03.\x20!\
    \n\n\n\x02\x04\x05\x12\x041\06\x01\n\n\n\x03\x04\x05\x01\x12\x031\x08\
    \x10\n\x0b\n\x04\x04\x05\x02\0\x12\x032\x02$\n\x0c\n\x05\x04\x05\x02\0\
    \x06\x12\x032\x02\x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x032\x14\x1f\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x032\"#\n\x0b\n\x04\x04\x05\x02\x01\x12\
    \x033\x02\x1b\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x033\x02\x08\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x033\t\x16\n\x0c\n\x05\x04\x05\x02\x01\x03\
    \x12\x033\x19\x1a\n\x1c\n\x04\x04\x05\x02\x02\x12\x034\x02%\"\x0f\x20res\
    ource\x20type\n\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x034\x02\x12\n\x0c\n\
    \x05\x04\x05\x02\x02\x01\x12\x034\x13\x20\n\x0c\n\x05\x04\x05\x02\x02\
    \x03\x12\x034#$\n\x0b\n\x04\x04\x05\x02\x03\x12\x035\x02\x20\n\x0c\n\x05\
    \x04\x05\x02\x03\x06\x12\x035\x02\x14\n\x0c\n\x05\x04\x05\x02\x03\x01\
    \x12\x035\x15\x1b\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x035\x1e\x1f\n\n\n\
    \x02\x04\x06\x12\x048\0:\x01\n\n\n\x03\x04\x06\x01\x12\x038\x08\x1a\n\
    \x0b\n\x04\x04\x06\x02\0\x12\x039\x02$\n\x0c\n\x05\x04\x06\x02\0\x06\x12\
    \x039\x02\x13\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x039\x14\x1f\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x039\"#\n\n\n\x02\x04\x07\x12\x04<\0>\x01\n\n\n\
    \x03\x04\x07\x01\x12\x03<\x08\x1b\n\x0b\n\x04\x04\x07\x02\0\x12\x03=\x02\
    \x18\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03=\x02\n\n\x0c\n\x05\x04\x07\
    \x02\0\x01\x12\x03=\x0b\x13\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03=\x16\
    \x17\n\n\n\x02\x04\x08\x12\x04@\0B\x01\n\n\n\x03\x04\x08\x01\x12\x03@\
    \x08\x1d\n\x0b\n\x04\x04\x08\x02\0\x12\x03A\x02$\n\x0c\n\x05\x04\x08\x02\
    \0\x06\x12\x03A\x02\x13\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03A\x14\x1f\n\
    \x0c\n\x05\x04\x08\x02\0\x03\x12\x03A\"#\n\n\n\x02\x04\t\x12\x04D\0F\x01\
    \n\n\n\x03\x04\t\x01\x12\x03D\x08\x1e\n\x0b\n\x04\x04\t\x02\0\x12\x03E\
    \x02\x18\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03E\x02\n\n\x0c\n\x05\x04\t\
    \x02\0\x01\x12\x03E\x0b\x13\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03E\x16\x17\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
