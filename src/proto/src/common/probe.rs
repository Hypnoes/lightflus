// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `probe.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.ProbeRequest)
pub struct ProbeRequest {
    // message fields
    // @@protoc_insertion_point(field:common.ProbeRequest.nodeType)
    pub nodeType: ::protobuf::EnumOrUnknown<probe_request::NodeType>,
    // @@protoc_insertion_point(field:common.ProbeRequest.probeType)
    pub probeType: ::protobuf::EnumOrUnknown<probe_request::ProbeType>,
    // special fields
    // @@protoc_insertion_point(special_field:common.ProbeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProbeRequest {
    fn default() -> &'a ProbeRequest {
        <ProbeRequest as ::protobuf::Message>::default_instance()
    }
}

impl ProbeRequest {
    pub fn new() -> ProbeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nodeType",
            |m: &ProbeRequest| { &m.nodeType },
            |m: &mut ProbeRequest| { &mut m.nodeType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "probeType",
            |m: &ProbeRequest| { &m.probeType },
            |m: &mut ProbeRequest| { &mut m.probeType },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProbeRequest>(
            "ProbeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProbeRequest {
    const NAME: &'static str = "ProbeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.nodeType = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.probeType = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.nodeType != ::protobuf::EnumOrUnknown::new(probe_request::NodeType::Coordinator) {
            my_size += ::protobuf::rt::int32_size(1, self.nodeType.value());
        }
        if self.probeType != ::protobuf::EnumOrUnknown::new(probe_request::ProbeType::Liveness) {
            my_size += ::protobuf::rt::int32_size(2, self.probeType.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.nodeType != ::protobuf::EnumOrUnknown::new(probe_request::NodeType::Coordinator) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.nodeType))?;
        }
        if self.probeType != ::protobuf::EnumOrUnknown::new(probe_request::ProbeType::Liveness) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.probeType))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProbeRequest {
        ProbeRequest::new()
    }

    fn clear(&mut self) {
        self.nodeType = ::protobuf::EnumOrUnknown::new(probe_request::NodeType::Coordinator);
        self.probeType = ::protobuf::EnumOrUnknown::new(probe_request::ProbeType::Liveness);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProbeRequest {
        static instance: ProbeRequest = ProbeRequest {
            nodeType: ::protobuf::EnumOrUnknown::from_i32(0),
            probeType: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProbeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProbeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProbeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProbeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ProbeRequest`
pub mod probe_request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:common.ProbeRequest.NodeType)
    pub enum NodeType {
        // @@protoc_insertion_point(enum_value:common.ProbeRequest.NodeType.Coordinator)
        Coordinator = 0,
        // @@protoc_insertion_point(enum_value:common.ProbeRequest.NodeType.TaskWorker)
        TaskWorker = 1,
        // @@protoc_insertion_point(enum_value:common.ProbeRequest.NodeType.Connector)
        Connector = 2,
    }

    impl ::protobuf::Enum for NodeType {
        const NAME: &'static str = "NodeType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<NodeType> {
            match value {
                0 => ::std::option::Option::Some(NodeType::Coordinator),
                1 => ::std::option::Option::Some(NodeType::TaskWorker),
                2 => ::std::option::Option::Some(NodeType::Connector),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [NodeType] = &[
            NodeType::Coordinator,
            NodeType::TaskWorker,
            NodeType::Connector,
        ];
    }

    impl ::protobuf::EnumFull for NodeType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ProbeRequest.NodeType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for NodeType {
        fn default() -> Self {
            NodeType::Coordinator
        }
    }

    impl NodeType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<NodeType>("ProbeRequest.NodeType")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:common.ProbeRequest.ProbeType)
    pub enum ProbeType {
        // @@protoc_insertion_point(enum_value:common.ProbeRequest.ProbeType.Liveness)
        Liveness = 0,
        // @@protoc_insertion_point(enum_value:common.ProbeRequest.ProbeType.Readiness)
        Readiness = 1,
    }

    impl ::protobuf::Enum for ProbeType {
        const NAME: &'static str = "ProbeType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ProbeType> {
            match value {
                0 => ::std::option::Option::Some(ProbeType::Liveness),
                1 => ::std::option::Option::Some(ProbeType::Readiness),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ProbeType] = &[
            ProbeType::Liveness,
            ProbeType::Readiness,
        ];
    }

    impl ::protobuf::EnumFull for ProbeType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ProbeRequest.ProbeType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ProbeType {
        fn default() -> Self {
            ProbeType::Liveness
        }
    }

    impl ProbeType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ProbeType>("ProbeRequest.ProbeType")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.ProbeResponse)
pub struct ProbeResponse {
    // message fields
    // @@protoc_insertion_point(field:common.ProbeResponse.memory)
    pub memory: f32,
    // @@protoc_insertion_point(field:common.ProbeResponse.cpu)
    pub cpu: f32,
    // @@protoc_insertion_point(field:common.ProbeResponse.available)
    pub available: bool,
    // special fields
    // @@protoc_insertion_point(special_field:common.ProbeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProbeResponse {
    fn default() -> &'a ProbeResponse {
        <ProbeResponse as ::protobuf::Message>::default_instance()
    }
}

impl ProbeResponse {
    pub fn new() -> ProbeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "memory",
            |m: &ProbeResponse| { &m.memory },
            |m: &mut ProbeResponse| { &mut m.memory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cpu",
            |m: &ProbeResponse| { &m.cpu },
            |m: &mut ProbeResponse| { &mut m.cpu },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "available",
            |m: &ProbeResponse| { &m.available },
            |m: &mut ProbeResponse| { &mut m.available },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProbeResponse>(
            "ProbeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProbeResponse {
    const NAME: &'static str = "ProbeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.memory = is.read_float()?;
                },
                21 => {
                    self.cpu = is.read_float()?;
                },
                24 => {
                    self.available = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.memory != 0. {
            my_size += 1 + 4;
        }
        if self.cpu != 0. {
            my_size += 1 + 4;
        }
        if self.available != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.memory != 0. {
            os.write_float(1, self.memory)?;
        }
        if self.cpu != 0. {
            os.write_float(2, self.cpu)?;
        }
        if self.available != false {
            os.write_bool(3, self.available)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProbeResponse {
        ProbeResponse::new()
    }

    fn clear(&mut self) {
        self.memory = 0.;
        self.cpu = 0.;
        self.available = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProbeResponse {
        static instance: ProbeResponse = ProbeResponse {
            memory: 0.,
            cpu: 0.,
            available: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProbeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProbeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProbeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProbeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.EventRequest)
pub struct EventRequest {
    // message fields
    // @@protoc_insertion_point(field:common.EventRequest.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:common.EventRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EventRequest {
    fn default() -> &'a EventRequest {
        <EventRequest as ::protobuf::Message>::default_instance()
    }
}

impl EventRequest {
    pub fn new() -> EventRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &EventRequest| { &m.data },
            |m: &mut EventRequest| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EventRequest>(
            "EventRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EventRequest {
    const NAME: &'static str = "EventRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EventRequest {
        EventRequest::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EventRequest {
        static instance: EventRequest = EventRequest {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EventRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EventRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EventRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.EventResponse)
pub struct EventResponse {
    // message fields
    // @@protoc_insertion_point(field:common.EventResponse.code)
    pub code: i32,
    // @@protoc_insertion_point(field:common.EventResponse.msg)
    pub msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:common.EventResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EventResponse {
    fn default() -> &'a EventResponse {
        <EventResponse as ::protobuf::Message>::default_instance()
    }
}

impl EventResponse {
    pub fn new() -> EventResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &EventResponse| { &m.code },
            |m: &mut EventResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &EventResponse| { &m.msg },
            |m: &mut EventResponse| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EventResponse>(
            "EventResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EventResponse {
    const NAME: &'static str = "EventResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_int32()?;
                },
                18 => {
                    self.msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.code);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code != 0 {
            os.write_int32(1, self.code)?;
        }
        if !self.msg.is_empty() {
            os.write_string(2, &self.msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EventResponse {
        EventResponse::new()
    }

    fn clear(&mut self) {
        self.code = 0;
        self.msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EventResponse {
        static instance: EventResponse = EventResponse {
            code: 0,
            msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EventResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EventResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EventResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bprobe.proto\x12\x06common\"\xed\x01\n\x0cProbeRequest\x129\n\x08no\
    deType\x18\x01\x20\x01(\x0e2\x1d.common.ProbeRequest.NodeTypeR\x08nodeTy\
    pe\x12<\n\tprobeType\x18\x02\x20\x01(\x0e2\x1e.common.ProbeRequest.Probe\
    TypeR\tprobeType\":\n\x08NodeType\x12\x0f\n\x0bCoordinator\x10\0\x12\x0e\
    \n\nTaskWorker\x10\x01\x12\r\n\tConnector\x10\x02\"(\n\tProbeType\x12\
    \x0c\n\x08Liveness\x10\0\x12\r\n\tReadiness\x10\x01\"W\n\rProbeResponse\
    \x12\x16\n\x06memory\x18\x01\x20\x01(\x02R\x06memory\x12\x10\n\x03cpu\
    \x18\x02\x20\x01(\x02R\x03cpu\x12\x1c\n\tavailable\x18\x03\x20\x01(\x08R\
    \tavailable\"\"\n\x0cEventRequest\x12\x12\n\x04data\x18\x01\x20\x01(\x0c\
    R\x04data\"5\n\rEventResponse\x12\x12\n\x04code\x18\x01\x20\x01(\x05R\
    \x04code\x12\x10\n\x03msg\x18\x02\x20\x01(\tR\x03msgB\x07Z\x05protoJ\xec\
    \x06\n\x06\x12\x04\0\0\x20\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x0f\n\x08\n\x01\x08\x12\x03\x03\0\x1c\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0\x1c\n\n\n\x02\x04\0\x12\x04\x05\0\x11\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x05\x08\x14\n\x0c\n\x04\x04\0\x04\0\x12\x04\x06\
    \x02\n\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x06\x07\x0f\n\r\n\x06\x04\
    \0\x04\0\x02\0\x12\x03\x07\x04\x14\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\
    \x03\x07\x04\x0f\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x07\x12\x13\n\
    \r\n\x06\x04\0\x04\0\x02\x01\x12\x03\x08\x04\x13\n\x0e\n\x07\x04\0\x04\0\
    \x02\x01\x01\x12\x03\x08\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\
    \x03\x08\x11\x12\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\t\x04\x12\n\x0e\n\
    \x07\x04\0\x04\0\x02\x02\x01\x12\x03\t\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\
    \x02\x02\x12\x03\t\x10\x11\n\x0c\n\x04\x04\0\x04\x01\x12\x04\x0b\x02\x0e\
    \x03\n\x0c\n\x05\x04\0\x04\x01\x01\x12\x03\x0b\x07\x10\n\r\n\x06\x04\0\
    \x04\x01\x02\0\x12\x03\x0c\x04\x11\n\x0e\n\x07\x04\0\x04\x01\x02\0\x01\
    \x12\x03\x0c\x04\x0c\n\x0e\n\x07\x04\0\x04\x01\x02\0\x02\x12\x03\x0c\x0f\
    \x10\n\r\n\x06\x04\0\x04\x01\x02\x01\x12\x03\r\x04\x12\n\x0e\n\x07\x04\0\
    \x04\x01\x02\x01\x01\x12\x03\r\x04\r\n\x0e\n\x07\x04\0\x04\x01\x02\x01\
    \x02\x12\x03\r\x10\x11\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x02\x18\n\x0c\
    \n\x05\x04\0\x02\0\x06\x12\x03\x0f\x02\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0f\x0b\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x16\x17\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x10\x02\x1a\n\x0c\n\x05\x04\0\x02\x01\x06\x12\
    \x03\x10\x02\x0b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\x0c\x15\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x10\x18\x19\n\n\n\x02\x04\x01\x12\x04\
    \x13\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\x03\x13\x08\x15\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\x14\x02\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x14\
    \x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x14\x08\x0e\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x14\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\x15\x02\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x15\x02\x07\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\x08\x0b\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x15\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x16\
    \x02\x15\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x16\x02\x06\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x16\x07\x10\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x16\x13\x14\n\n\n\x02\x04\x02\x12\x04\x19\0\x1b\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x19\x08\x14\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1a\
    \x02\x11\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1a\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x1a\x08\x0c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x1a\x0f\x10\n\n\n\x02\x04\x03\x12\x04\x1d\0\x20\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03\x1d\x08\x15\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1e\x02\
    \x11\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1e\x02\x07\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03\x1e\x08\x0c\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\
    \x1e\x0f\x10\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1f\x02\x11\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03\x1f\t\x0c\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1f\x0f\x10b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(ProbeRequest::generated_message_descriptor_data());
            messages.push(ProbeResponse::generated_message_descriptor_data());
            messages.push(EventRequest::generated_message_descriptor_data());
            messages.push(EventResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(probe_request::NodeType::generated_enum_descriptor_data());
            enums.push(probe_request::ProbeType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
