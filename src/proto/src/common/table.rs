// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/table.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Entry {
    // message fields
    pub pk: u64,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Entry {
    fn default() -> &'a Entry {
        <Entry as ::protobuf::Message>::default_instance()
    }
}

impl Entry {
    pub fn new() -> Entry {
        ::std::default::Default::default()
    }

    // uint64 pk = 1;


    pub fn get_pk(&self) -> u64 {
        self.pk
    }
    pub fn clear_pk(&mut self) {
        self.pk = 0;
    }

    // Param is passed by value, moved
    pub fn set_pk(&mut self, v: u64) {
        self.pk = v;
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Entry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.pk = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.pk != 0 {
            my_size += ::protobuf::rt::value_size(1, self.pk, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.pk != 0 {
            os.write_uint64(1, self.pk)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Entry {
        Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "pk",
                |m: &Entry| { &m.pk },
                |m: &mut Entry| { &mut m.pk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &Entry| { &m.value },
                |m: &mut Entry| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Entry>(
                "Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Entry {
        static instance: ::protobuf::rt::LazyV2<Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Entry::new)
    }
}

impl ::protobuf::Clear for Entry {
    fn clear(&mut self) {
        self.pk = 0;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EntryList {
    // message fields
    pub entries: ::protobuf::RepeatedField<Entry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EntryList {
    fn default() -> &'a EntryList {
        <EntryList as ::protobuf::Message>::default_instance()
    }
}

impl EntryList {
    pub fn new() -> EntryList {
        ::std::default::Default::default()
    }

    // repeated .common.Entry entries = 1;


    pub fn get_entries(&self) -> &[Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EntryList {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntryList {
        EntryList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Entry>>(
                "entries",
                |m: &EntryList| { &m.entries },
                |m: &mut EntryList| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EntryList>(
                "EntryList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EntryList {
        static instance: ::protobuf::rt::LazyV2<EntryList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EntryList::new)
    }
}

impl ::protobuf::Clear for EntryList {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntryList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntryList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Schema {
    // message fields
    pub database: ::std::string::String,
    pub name: ::std::string::String,
    pub fields: ::protobuf::RepeatedField<Field>,
    pub account_id: ::std::string::String,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub modified_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Schema {
    fn default() -> &'a Schema {
        <Schema as ::protobuf::Message>::default_instance()
    }
}

impl Schema {
    pub fn new() -> Schema {
        ::std::default::Default::default()
    }

    // string database = 1;


    pub fn get_database(&self) -> &str {
        &self.database
    }
    pub fn clear_database(&mut self) {
        self.database.clear();
    }

    // Param is passed by value, moved
    pub fn set_database(&mut self, v: ::std::string::String) {
        self.database = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database(&mut self) -> &mut ::std::string::String {
        &mut self.database
    }

    // Take field
    pub fn take_database(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .common.Field fields = 3;


    pub fn get_fields(&self) -> &[Field] {
        &self.fields
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::protobuf::RepeatedField<Field>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::protobuf::RepeatedField<Field> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::protobuf::RepeatedField<Field> {
        ::std::mem::replace(&mut self.fields, ::protobuf::RepeatedField::new())
    }

    // string account_id = 4;


    pub fn get_account_id(&self) -> &str {
        &self.account_id
    }
    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.account_id
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_id, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp created_at = 5;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp modified_at = 6;


    pub fn get_modified_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.modified_at.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_modified_at(&mut self) {
        self.modified_at.clear();
    }

    pub fn has_modified_at(&self) -> bool {
        self.modified_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_modified_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.modified_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_modified_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.modified_at.is_none() {
            self.modified_at.set_default();
        }
        self.modified_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_modified_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.modified_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Schema {
    fn is_initialized(&self) -> bool {
        for v in &self.fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.modified_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fields)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.modified_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.account_id);
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.modified_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.fields {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.account_id.is_empty() {
            os.write_string(4, &self.account_id)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.modified_at.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Schema {
        Schema::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "database",
                |m: &Schema| { &m.database },
                |m: &mut Schema| { &mut m.database },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Schema| { &m.name },
                |m: &mut Schema| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Field>>(
                "fields",
                |m: &Schema| { &m.fields },
                |m: &mut Schema| { &mut m.fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_id",
                |m: &Schema| { &m.account_id },
                |m: &mut Schema| { &mut m.account_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "created_at",
                |m: &Schema| { &m.created_at },
                |m: &mut Schema| { &mut m.created_at },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "modified_at",
                |m: &Schema| { &m.modified_at },
                |m: &mut Schema| { &mut m.modified_at },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Schema>(
                "Schema",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Schema {
        static instance: ::protobuf::rt::LazyV2<Schema> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Schema::new)
    }
}

impl ::protobuf::Clear for Schema {
    fn clear(&mut self) {
        self.database.clear();
        self.name.clear();
        self.fields.clear();
        self.account_id.clear();
        self.created_at.clear();
        self.modified_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Schema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schema {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Field {
    // message fields
    pub name: ::std::string::String,
    pub field_type: FieldType,
    pub comment: ::std::string::String,
    pub default_value: ::std::vec::Vec<u8>,
    pub nullable: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as ::protobuf::Message>::default_instance()
    }
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .common.FieldType type = 2;


    pub fn get_field_type(&self) -> FieldType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = FieldType::BOOLEAN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: FieldType) {
        self.field_type = v;
    }

    // string comment = 3;


    pub fn get_comment(&self) -> &str {
        &self.comment
    }
    pub fn clear_comment(&mut self) {
        self.comment.clear();
    }

    // Param is passed by value, moved
    pub fn set_comment(&mut self, v: ::std::string::String) {
        self.comment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comment(&mut self) -> &mut ::std::string::String {
        &mut self.comment
    }

    // Take field
    pub fn take_comment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comment, ::std::string::String::new())
    }

    // bytes default_value = 4;


    pub fn get_default_value(&self) -> &[u8] {
        &self.default_value
    }
    pub fn clear_default_value(&mut self) {
        self.default_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_default_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.default_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.default_value
    }

    // Take field
    pub fn take_default_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.default_value, ::std::vec::Vec::new())
    }

    // bool nullable = 5;


    pub fn get_nullable(&self) -> bool {
        self.nullable
    }
    pub fn clear_nullable(&mut self) {
        self.nullable = false;
    }

    // Param is passed by value, moved
    pub fn set_nullable(&mut self, v: bool) {
        self.nullable = v;
    }
}

impl ::protobuf::Message for Field {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comment)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.default_value)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.nullable = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.field_type != FieldType::BOOLEAN {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if !self.comment.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.comment);
        }
        if !self.default_value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.default_value);
        }
        if self.nullable != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.field_type != FieldType::BOOLEAN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.comment.is_empty() {
            os.write_string(3, &self.comment)?;
        }
        if !self.default_value.is_empty() {
            os.write_bytes(4, &self.default_value)?;
        }
        if self.nullable != false {
            os.write_bool(5, self.nullable)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Field {
        Field::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Field| { &m.name },
                |m: &mut Field| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FieldType>>(
                "type",
                |m: &Field| { &m.field_type },
                |m: &mut Field| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comment",
                |m: &Field| { &m.comment },
                |m: &mut Field| { &mut m.comment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "default_value",
                |m: &Field| { &m.default_value },
                |m: &mut Field| { &mut m.default_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "nullable",
                |m: &Field| { &m.nullable },
                |m: &mut Field| { &mut m.nullable },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Field>(
                "Field",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Field {
        static instance: ::protobuf::rt::LazyV2<Field> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Field::new)
    }
}

impl ::protobuf::Clear for Field {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type = FieldType::BOOLEAN;
        self.comment.clear();
        self.default_value.clear();
        self.nullable = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Field {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FieldEntries {
    // message fields
    pub name: ::std::string::String,
    pub entries: ::protobuf::RepeatedField<Entry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldEntries {
    fn default() -> &'a FieldEntries {
        <FieldEntries as ::protobuf::Message>::default_instance()
    }
}

impl FieldEntries {
    pub fn new() -> FieldEntries {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .common.Entry entries = 2;


    pub fn get_entries(&self) -> &[Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FieldEntries {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldEntries {
        FieldEntries::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &FieldEntries| { &m.name },
                |m: &mut FieldEntries| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Entry>>(
                "entries",
                |m: &FieldEntries| { &m.entries },
                |m: &mut FieldEntries| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldEntries>(
                "FieldEntries",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldEntries {
        static instance: ::protobuf::rt::LazyV2<FieldEntries> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldEntries::new)
    }
}

impl ::protobuf::Clear for FieldEntries {
    fn clear(&mut self) {
        self.name.clear();
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldEntries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldEntries {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Sort {
    // message fields
    pub field_name: ::std::string::String,
    pub field_type: Sort_SortType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sort {
    fn default() -> &'a Sort {
        <Sort as ::protobuf::Message>::default_instance()
    }
}

impl Sort {
    pub fn new() -> Sort {
        ::std::default::Default::default()
    }

    // string field_name = 1;


    pub fn get_field_name(&self) -> &str {
        &self.field_name
    }
    pub fn clear_field_name(&mut self) {
        self.field_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_name(&mut self, v: ::std::string::String) {
        self.field_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_name(&mut self) -> &mut ::std::string::String {
        &mut self.field_name
    }

    // Take field
    pub fn take_field_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_name, ::std::string::String::new())
    }

    // .common.Sort.SortType type = 2;


    pub fn get_field_type(&self) -> Sort_SortType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Sort_SortType::DESC;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Sort_SortType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for Sort {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_name);
        }
        if self.field_type != Sort_SortType::DESC {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_name.is_empty() {
            os.write_string(1, &self.field_name)?;
        }
        if self.field_type != Sort_SortType::DESC {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sort {
        Sort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field_name",
                |m: &Sort| { &m.field_name },
                |m: &mut Sort| { &mut m.field_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Sort_SortType>>(
                "type",
                |m: &Sort| { &m.field_type },
                |m: &mut Sort| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Sort>(
                "Sort",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Sort {
        static instance: ::protobuf::rt::LazyV2<Sort> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Sort::new)
    }
}

impl ::protobuf::Clear for Sort {
    fn clear(&mut self) {
        self.field_name.clear();
        self.field_type = Sort_SortType::DESC;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sort {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Sort_SortType {
    DESC = 0,
    ASC = 1,
}

impl ::protobuf::ProtobufEnum for Sort_SortType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Sort_SortType> {
        match value {
            0 => ::std::option::Option::Some(Sort_SortType::DESC),
            1 => ::std::option::Option::Some(Sort_SortType::ASC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Sort_SortType] = &[
            Sort_SortType::DESC,
            Sort_SortType::ASC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Sort_SortType>("Sort.SortType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Sort_SortType {
}

impl ::std::default::Default for Sort_SortType {
    fn default() -> Self {
        Sort_SortType::DESC
    }
}

impl ::protobuf::reflect::ProtobufValue for Sort_SortType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FieldType {
    BOOLEAN = 0,
    INT_32 = 1,
    INT_64 = 2,
    FLOAT_32 = 3,
    FLOAT_64 = 4,
    VARCHAR = 5,
    DATE = 6,
    TIMESTAMP = 7,
}

impl ::protobuf::ProtobufEnum for FieldType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FieldType> {
        match value {
            0 => ::std::option::Option::Some(FieldType::BOOLEAN),
            1 => ::std::option::Option::Some(FieldType::INT_32),
            2 => ::std::option::Option::Some(FieldType::INT_64),
            3 => ::std::option::Option::Some(FieldType::FLOAT_32),
            4 => ::std::option::Option::Some(FieldType::FLOAT_64),
            5 => ::std::option::Option::Some(FieldType::VARCHAR),
            6 => ::std::option::Option::Some(FieldType::DATE),
            7 => ::std::option::Option::Some(FieldType::TIMESTAMP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FieldType] = &[
            FieldType::BOOLEAN,
            FieldType::INT_32,
            FieldType::INT_64,
            FieldType::FLOAT_32,
            FieldType::FLOAT_64,
            FieldType::VARCHAR,
            FieldType::DATE,
            FieldType::TIMESTAMP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FieldType>("FieldType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FieldType {
}

impl ::std::default::Default for FieldType {
    fn default() -> Self {
        FieldType::BOOLEAN
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12common/table.proto\x12\x06common\x1a\x1cgoogle/protobuf/struct.pro\
    to\x1a\x1fgoogle/protobuf/timestamp.proto\"-\n\x05Entry\x12\x0e\n\x02pk\
    \x18\x01\x20\x01(\x04R\x02pk\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\
    \x05value\"4\n\tEntryList\x12'\n\x07entries\x18\x01\x20\x03(\x0b2\r.comm\
    on.EntryR\x07entries\"\xf6\x01\n\x06Schema\x12\x1a\n\x08database\x18\x01\
    \x20\x01(\tR\x08database\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\
    \x12%\n\x06fields\x18\x03\x20\x03(\x0b2\r.common.FieldR\x06fields\x12\
    \x1d\n\naccount_id\x18\x04\x20\x01(\tR\taccountId\x129\n\ncreated_at\x18\
    \x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tcreatedAt\x12;\n\x0bm\
    odified_at\x18\x06\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nmodifie\
    dAt\"\x9d\x01\n\x05Field\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12%\n\x04type\x18\x02\x20\x01(\x0e2\x11.common.FieldTypeR\x04type\x12\
    \x18\n\x07comment\x18\x03\x20\x01(\tR\x07comment\x12#\n\rdefault_value\
    \x18\x04\x20\x01(\x0cR\x0cdefaultValue\x12\x1a\n\x08nullable\x18\x05\x20\
    \x01(\x08R\x08nullable\"K\n\x0cFieldEntries\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12'\n\x07entries\x18\x02\x20\x03(\x0b2\r.common.En\
    tryR\x07entries\"o\n\x04Sort\x12\x1d\n\nfield_name\x18\x01\x20\x01(\tR\t\
    fieldName\x12)\n\x04type\x18\x02\x20\x01(\x0e2\x15.common.Sort.SortTypeR\
    \x04type\"\x1d\n\x08SortType\x12\x08\n\x04DESC\x10\0\x12\x07\n\x03ASC\
    \x10\x01*r\n\tFieldType\x12\x0b\n\x07BOOLEAN\x10\0\x12\n\n\x06INT_32\x10\
    \x01\x12\n\n\x06INT_64\x10\x02\x12\x0c\n\x08FLOAT_32\x10\x03\x12\x0c\n\
    \x08FLOAT_64\x10\x04\x12\x0b\n\x07VARCHAR\x10\x05\x12\x08\n\x04DATE\x10\
    \x06\x12\r\n\tTIMESTAMP\x10\x07B\x1eZ\x1ctableflow/alpha/common/tableJ\
    \xb3\x0f\n\x06\x12\x04\0\0<\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x0f\n\x08\n\x01\x08\x12\x03\x03\03\n\t\n\x02\x08\
    \x0b\x12\x03\x03\03\n\t\n\x02\x03\0\x12\x03\x04\0&\n\t\n\x02\x03\x01\x12\
    \x03\x05\0)\n\n\n\x02\x04\0\x12\x04\x07\0\n\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x07\x08\r\n\x1d\n\x04\x04\0\x02\0\x12\x03\x08\x02\x10\"\x10\x20prim\
    ary\x20key\x20id\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\x08\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x08\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x08\x0e\x0f\n\x1a\n\x04\x04\0\x02\x01\x12\x03\t\x02\x12\"\r\x20entr\
    y\x20value\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\t\x08\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \t\x10\x11\n\n\n\x02\x04\x01\x12\x04\x0c\0\x0e\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x0c\x08\x11\n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\x02$\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03\r\x0b\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\r\x18\x1f\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\r\"#\n)\n\x02\x04\x02\x12\x04\x13\0\x1a\
    \x01\x1a\x1d*\nDefinition\x20of\x20Table\x20Schema\n\n\n\n\x03\x04\x02\
    \x01\x12\x03\x13\x08\x0e\n\x17\n\x04\x04\x02\x02\0\x12\x03\x14\x02\x16\"\
    \n\x20database\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03\x14\t\x11\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x14\x14\x15\n\x1a\n\x04\x04\x02\x02\x01\x12\x03\x15\x02\x12\"\r\
    \x20schema\x20name\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x15\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\t\r\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x15\x10\x11\n\x15\n\x04\x04\x02\x02\x02\x12\x03\x16\x02\
    \x1c\"\x08\x20fields\n\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x16\x02\n\
    \n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x16\x0b\x10\n\x0c\n\x05\x04\x02\
    \x02\x02\x01\x12\x03\x16\x11\x17\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\
    \x16\x1a\x1b\n\x19\n\x04\x04\x02\x02\x03\x12\x03\x17\x02\x18\"\x0c\x20ac\
    count\x20id\n\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x17\x02\x08\n\x0c\
    \n\x05\x04\x02\x02\x03\x01\x12\x03\x17\t\x13\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03\x17\x16\x17\n\x1a\n\x04\x04\x02\x02\x04\x12\x03\x18\x02+\"\
    \r\x20create\x20time\n\n\x0c\n\x05\x04\x02\x02\x04\x06\x12\x03\x18\x02\
    \x1b\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x18\x1c&\n\x0c\n\x05\x04\
    \x02\x02\x04\x03\x12\x03\x18)*\n\x20\n\x04\x04\x02\x02\x05\x12\x03\x19\
    \x02,\"\x13\x20modification\x20time\n\n\x0c\n\x05\x04\x02\x02\x05\x06\
    \x12\x03\x19\x02\x1b\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x19\x1c'\n\
    \x0c\n\x05\x04\x02\x02\x05\x03\x12\x03\x19*+\n\n\n\x02\x04\x03\x12\x04\
    \x1c\0\"\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1c\x08\r\n\x19\n\x04\x04\x03\
    \x02\0\x12\x03\x1d\x02\x12\"\x0c\x20field\x20name\n\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1d\
    \t\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1d\x10\x11\n\x19\n\x04\x04\
    \x03\x02\x01\x12\x03\x1e\x02\x15\"\x0c\x20field\x20type\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x06\x12\x03\x1e\x02\x0b\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03\x1e\x0c\x10\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1e\x13\x14\
    \n\x16\n\x04\x04\x03\x02\x02\x12\x03\x1f\x02\x15\"\t\x20comment\n\n\x0c\
    \n\x05\x04\x03\x02\x02\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x02\x01\x12\x03\x1f\t\x10\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1f\
    \x13\x14\n\x1c\n\x04\x04\x03\x02\x03\x12\x03\x20\x02\x1a\"\x0f\x20defaul\
    t\x20value\n\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x20\x02\x07\n\x0c\n\
    \x05\x04\x03\x02\x03\x01\x12\x03\x20\x08\x15\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03\x20\x18\x19\n\x17\n\x04\x04\x03\x02\x04\x12\x03!\x02\x14\"\
    \n\x20nullable\n\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03!\x02\x06\n\x0c\
    \n\x05\x04\x03\x02\x04\x01\x12\x03!\x07\x0f\n\x0c\n\x05\x04\x03\x02\x04\
    \x03\x12\x03!\x12\x13\n\n\n\x02\x05\0\x12\x04$\0-\x01\n\n\n\x03\x05\0\
    \x01\x12\x03$\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03%\x02\x0e\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03%\x02\t\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03%\
    \x0c\r\n\x0b\n\x04\x05\0\x02\x01\x12\x03&\x02\r\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03&\x02\x08\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03&\x0b\x0c\
    \n\x0b\n\x04\x05\0\x02\x02\x12\x03'\x02\r\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03'\x02\x08\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03'\x0b\x0c\n\x0b\n\
    \x04\x05\0\x02\x03\x12\x03(\x02\x0f\n\x0c\n\x05\x05\0\x02\x03\x01\x12\
    \x03(\x02\n\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03(\r\x0e\n\x0b\n\x04\x05\
    \0\x02\x04\x12\x03)\x02\x0f\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03)\x02\n\
    \n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03)\r\x0e\n\x0b\n\x04\x05\0\x02\x05\
    \x12\x03*\x02\x0e\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03*\x02\t\n\x0c\n\
    \x05\x05\0\x02\x05\x02\x12\x03*\x0c\r\n\x0b\n\x04\x05\0\x02\x06\x12\x03+\
    \x02\x0b\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03+\x02\x06\n\x0c\n\x05\x05\
    \0\x02\x06\x02\x12\x03+\t\n\n\x0b\n\x04\x05\0\x02\x07\x12\x03,\x02\x10\n\
    \x0c\n\x05\x05\0\x02\x07\x01\x12\x03,\x02\x0b\n\x0c\n\x05\x05\0\x02\x07\
    \x02\x12\x03,\x0e\x0f\n\n\n\x02\x04\x04\x12\x04/\02\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03/\x08\x14\n\x19\n\x04\x04\x04\x02\0\x12\x030\x02\x12\"\
    \x0c\x20field\x20name\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x030\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x030\t\r\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x030\x10\x11\n\x1c\n\x04\x04\x04\x02\x01\x12\x031\x02\x1d\"\x0f\x20\
    field\x20entries\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x031\x02\n\n\x0c\
    \n\x05\x04\x04\x02\x01\x06\x12\x031\x0b\x10\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x031\x11\x18\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x031\x1b\x1c\n\
    \n\n\x02\x04\x05\x12\x044\0<\x01\n\n\n\x03\x04\x05\x01\x12\x034\x08\x0c\
    \n\x0b\n\x04\x04\x05\x02\0\x12\x035\x02\x18\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x035\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x035\t\x13\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x035\x16\x17\n\x0b\n\x04\x04\x05\x02\x01\
    \x12\x036\x02\x14\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x036\x02\n\n\x0c\n\
    \x05\x04\x05\x02\x01\x01\x12\x036\x0b\x0f\n\x0c\n\x05\x04\x05\x02\x01\
    \x03\x12\x036\x12\x13\n\x0c\n\x04\x04\x05\x04\0\x12\x048\x02;\x03\n\x0c\
    \n\x05\x04\x05\x04\0\x01\x12\x038\x07\x0f\n\r\n\x06\x04\x05\x04\0\x02\0\
    \x12\x039\x04\r\n\x0e\n\x07\x04\x05\x04\0\x02\0\x01\x12\x039\x04\x08\n\
    \x0e\n\x07\x04\x05\x04\0\x02\0\x02\x12\x039\x0b\x0c\n\r\n\x06\x04\x05\
    \x04\0\x02\x01\x12\x03:\x04\x0c\n\x0e\n\x07\x04\x05\x04\0\x02\x01\x01\
    \x12\x03:\x04\x07\n\x0e\n\x07\x04\x05\x04\0\x02\x01\x02\x12\x03:\n\x0bb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
