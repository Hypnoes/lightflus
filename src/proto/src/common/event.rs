#![cfg_attr(tarpaulin, ignore)]
// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

use crate::common::common;

#[derive(PartialEq,Clone,Default)]
pub struct KeyedDataEvent {
    // message fields
    pub job_id: ::protobuf::SingularPtrField<common::ResourceId>,
    pub key: ::protobuf::SingularPtrField<Entry>,
    pub to_operator_id: u32,
    pub data: ::protobuf::RepeatedField<Entry>,
    pub event_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub process_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub from_operator_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyedDataEvent {
    fn default() -> &'a KeyedDataEvent {
        <KeyedDataEvent as ::protobuf::Message>::default_instance()
    }
}

impl KeyedDataEvent {
    pub fn new() -> KeyedDataEvent {
        ::std::default::Default::default()
    }

    // .common.ResourceId job_id = 1;


    pub fn get_job_id(&self) -> &common::ResourceId {
        self.job_id.as_ref().unwrap_or_else(|| <common::ResourceId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    pub fn has_job_id(&self) -> bool {
        self.job_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: common::ResourceId) {
        self.job_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut common::ResourceId {
        if self.job_id.is_none() {
            self.job_id.set_default();
        }
        self.job_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_job_id(&mut self) -> common::ResourceId {
        self.job_id.take().unwrap_or_else(|| common::ResourceId::new())
    }

    // .common.Entry key = 2;


    pub fn get_key(&self) -> &Entry {
        self.key.as_ref().unwrap_or_else(|| <Entry as ::protobuf::Message>::default_instance())
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: Entry) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut Entry {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> Entry {
        self.key.take().unwrap_or_else(|| Entry::new())
    }

    // uint32 to_operator_id = 3;


    pub fn get_to_operator_id(&self) -> u32 {
        self.to_operator_id
    }
    pub fn clear_to_operator_id(&mut self) {
        self.to_operator_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_to_operator_id(&mut self, v: u32) {
        self.to_operator_id = v;
    }

    // repeated .common.Entry data = 5;


    pub fn get_data(&self) -> &[Entry] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<Entry>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<Entry> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<Entry> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Timestamp event_time = 6;


    pub fn get_event_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.event_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_event_time(&mut self) {
        self.event_time.clear();
    }

    pub fn has_event_time(&self) -> bool {
        self.event_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.event_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.event_time.is_none() {
            self.event_time.set_default();
        }
        self.event_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_event_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.event_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp process_time = 7;


    pub fn get_process_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.process_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_process_time(&mut self) {
        self.process_time.clear();
    }

    pub fn has_process_time(&self) -> bool {
        self.process_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_process_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.process_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_process_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.process_time.is_none() {
            self.process_time.set_default();
        }
        self.process_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_process_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.process_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // uint32 from_operator_id = 8;


    pub fn get_from_operator_id(&self) -> u32 {
        self.from_operator_id
    }
    pub fn clear_from_operator_id(&mut self) {
        self.from_operator_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_from_operator_id(&mut self, v: u32) {
        self.from_operator_id = v;
    }
}

impl ::protobuf::Message for KeyedDataEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.job_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.event_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.process_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.job_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_operator_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.event_time)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.process_time)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_operator_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.job_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.to_operator_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.to_operator_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.event_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.process_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.from_operator_id != 0 {
            my_size += ::protobuf::rt::value_size(8, self.from_operator_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.job_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.to_operator_id != 0 {
            os.write_uint32(3, self.to_operator_id)?;
        }
        for v in &self.data {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.event_time.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.process_time.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.from_operator_id != 0 {
            os.write_uint32(8, self.from_operator_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyedDataEvent {
        KeyedDataEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::ResourceId>>(
                "job_id",
                |m: &KeyedDataEvent| { &m.job_id },
                |m: &mut KeyedDataEvent| { &mut m.job_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Entry>>(
                "key",
                |m: &KeyedDataEvent| { &m.key },
                |m: &mut KeyedDataEvent| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "to_operator_id",
                |m: &KeyedDataEvent| { &m.to_operator_id },
                |m: &mut KeyedDataEvent| { &mut m.to_operator_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Entry>>(
                "data",
                |m: &KeyedDataEvent| { &m.data },
                |m: &mut KeyedDataEvent| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "event_time",
                |m: &KeyedDataEvent| { &m.event_time },
                |m: &mut KeyedDataEvent| { &mut m.event_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "process_time",
                |m: &KeyedDataEvent| { &m.process_time },
                |m: &mut KeyedDataEvent| { &mut m.process_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "from_operator_id",
                |m: &KeyedDataEvent| { &m.from_operator_id },
                |m: &mut KeyedDataEvent| { &mut m.from_operator_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KeyedDataEvent>(
                "KeyedDataEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KeyedDataEvent {
        static instance: ::protobuf::rt::LazyV2<KeyedDataEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyedDataEvent::new)
    }
}

impl ::protobuf::Clear for KeyedDataEvent {
    fn clear(&mut self) {
        self.job_id.clear();
        self.key.clear();
        self.to_operator_id = 0;
        self.data.clear();
        self.event_time.clear();
        self.process_time.clear();
        self.from_operator_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeyedDataEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyedDataEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Entry {
    // message fields
    pub data_type: common::DataTypeEnum,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Entry {
    fn default() -> &'a Entry {
        <Entry as ::protobuf::Message>::default_instance()
    }
}

impl Entry {
    pub fn new() -> Entry {
        ::std::default::Default::default()
    }

    // .common.DataTypeEnum data_type = 1;


    pub fn get_data_type(&self) -> common::DataTypeEnum {
        self.data_type
    }
    pub fn clear_data_type(&mut self) {
        self.data_type = common::DataTypeEnum::DATA_TYPE_ENUM_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: common::DataTypeEnum) {
        self.data_type = v;
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Entry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.data_type != common::DataTypeEnum::DATA_TYPE_ENUM_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.data_type);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.data_type != common::DataTypeEnum::DATA_TYPE_ENUM_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.data_type))?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Entry {
        Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<common::DataTypeEnum>>(
                "data_type",
                |m: &Entry| { &m.data_type },
                |m: &mut Entry| { &mut m.data_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &Entry| { &m.value },
                |m: &mut Entry| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Entry>(
                "Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Entry {
        static instance: ::protobuf::rt::LazyV2<Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Entry::new)
    }
}

impl ::protobuf::Clear for Entry {
    fn clear(&mut self) {
        self.data_type = common::DataTypeEnum::DATA_TYPE_ENUM_UNSPECIFIED;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12common/event.proto\x12\x06common\x1a\x13common/common.proto\x1a\
    \x1fgoogle/protobuf/timestamp.proto\"\xc9\x02\n\x0eKeyedDataEvent\x12)\n\
    \x06job_id\x18\x01\x20\x01(\x0b2\x12.common.ResourceIdR\x05jobId\x12\x1f\
    \n\x03key\x18\x02\x20\x01(\x0b2\r.common.EntryR\x03key\x12$\n\x0eto_oper\
    ator_id\x18\x03\x20\x01(\rR\x0ctoOperatorId\x12!\n\x04data\x18\x05\x20\
    \x03(\x0b2\r.common.EntryR\x04data\x129\n\nevent_time\x18\x06\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\teventTime\x12=\n\x0cprocess_time\
    \x18\x07\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0bprocessTime\x12\
    (\n\x10from_operator_id\x18\x08\x20\x01(\rR\x0efromOperatorId\"P\n\x05En\
    try\x121\n\tdata_type\x18\x01\x20\x01(\x0e2\x14.common.DataTypeEnumR\x08\
    dataType\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05valueBB\n\"tableflo\
    w.alpha.proto.common.eventZ\x1ctableflow/alpha/common/eventJ\x96\x06\n\
    \x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x03\0\x1d\n\t\n\x02\x03\x01\
    \x12\x03\x04\0)\n\x08\n\x01\x08\x12\x03\x05\03\n\t\n\x02\x08\x0b\x12\x03\
    \x05\03\n\x08\n\x01\x08\x12\x03\x06\0;\n\t\n\x02\x08\x01\x12\x03\x06\0;\
    \n\n\n\x02\x04\0\x12\x04\x08\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\
    \x08\x16\n\x18\n\x04\x04\0\x02\0\x12\x03\t\x02\x1f\"\x0b\x20source\x20id\
    \n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\t\x02\x13\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\t\x14\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x1d\x1e\n\
    \x20\n\x04\x04\0\x02\x01\x12\x03\n\x02\x17\"\x13\x20key\x20of\x20data\
    \x20event\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\n\x02\x0e\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\n\x0f\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\n\x15\x16\n2\n\x04\x04\0\x02\x02\x12\x03\x0b\x02\x1c\"%\x20operator\
    _id\x20this\x20event\x20will\x20be\x20sent\n\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0b\t\x17\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\x1a\x1b\n\x18\n\x04\x04\0\x02\
    \x03\x12\x03\x0c\x02!\"\x0b\x20mandatory\n\n\x0c\n\x05\x04\0\x02\x03\x04\
    \x12\x03\x0c\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x0c\x0b\x17\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0c\x18\x1c\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x0c\x1f\x20\n\x0b\n\x04\x04\0\x02\x04\x12\x03\r\x02+\n\
    \x0c\n\x05\x04\0\x02\x04\x06\x12\x03\r\x02\x1b\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03\r\x1c&\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\r)*\n\x0b\n\
    \x04\x04\0\x02\x05\x12\x03\x0e\x02-\n\x0c\n\x05\x04\0\x02\x05\x06\x12\
    \x03\x0e\x02\x1b\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0e\x1c(\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03\x0e+,\n3\n\x04\x04\0\x02\x06\x12\x03\x0f\
    \x02\x1e\"&\x20operator_id\x20this\x20event\x20where\x20be\x20sent\n\n\
    \x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x06\x01\x12\x03\x0f\t\x19\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0f\x1c\
    \x1d\n\n\n\x02\x04\x01\x12\x04\x12\0\x15\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x12\x08\r\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x13\x02\x1d\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03\x13\x02\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x13\x0f\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x13\x1b\x1c\n\x1a\
    \n\x04\x04\x01\x02\x01\x12\x03\x14\x02\x12\"\r\x20entry\x20value\n\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03\x14\x02\x07\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\x14\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x14\
    \x10\x11b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
