// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `common/event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.DataEvent)
pub struct DataEvent {
    // message fields
    // @@protoc_insertion_point(field:common.DataEvent.job_id)
    pub job_id: ::protobuf::MessageField<super::common::JobId>,
    // @@protoc_insertion_point(field:common.DataEvent.to)
    pub to: u64,
    // @@protoc_insertion_point(field:common.DataEvent.event_type)
    pub event_type: ::protobuf::EnumOrUnknown<DataEventTypeEnum>,
    // @@protoc_insertion_point(field:common.DataEvent.data)
    pub data: ::std::vec::Vec<super::table::Entry>,
    // @@protoc_insertion_point(field:common.DataEvent.old_data)
    pub old_data: ::std::vec::Vec<super::table::Entry>,
    // @@protoc_insertion_point(field:common.DataEvent.event_time)
    pub event_time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:common.DataEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataEvent {
    fn default() -> &'a DataEvent {
        <DataEvent as ::protobuf::Message>::default_instance()
    }
}

impl DataEvent {
    pub fn new() -> DataEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::JobId>(
            "job_id",
            |m: &DataEvent| { &m.job_id },
            |m: &mut DataEvent| { &mut m.job_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to",
            |m: &DataEvent| { &m.to },
            |m: &mut DataEvent| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_type",
            |m: &DataEvent| { &m.event_type },
            |m: &mut DataEvent| { &mut m.event_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &DataEvent| { &m.data },
            |m: &mut DataEvent| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "old_data",
            |m: &DataEvent| { &m.old_data },
            |m: &mut DataEvent| { &mut m.old_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "event_time",
            |m: &DataEvent| { &m.event_time },
            |m: &mut DataEvent| { &mut m.event_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataEvent>(
            "DataEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataEvent {
    const NAME: &'static str = "DataEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.job_id)?;
                },
                16 => {
                    self.to = is.read_uint64()?;
                },
                24 => {
                    self.event_type = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.data.push(is.read_message()?);
                },
                42 => {
                    self.old_data.push(is.read_message()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.event_time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.job_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.to);
        }
        if self.event_type != ::protobuf::EnumOrUnknown::new(DataEventTypeEnum::INSERT) {
            my_size += ::protobuf::rt::int32_size(3, self.event_type.value());
        }
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.old_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.event_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.job_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.to != 0 {
            os.write_uint64(2, self.to)?;
        }
        if self.event_type != ::protobuf::EnumOrUnknown::new(DataEventTypeEnum::INSERT) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.event_type))?;
        }
        for v in &self.data {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.old_data {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.event_time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataEvent {
        DataEvent::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.to = 0;
        self.event_type = ::protobuf::EnumOrUnknown::new(DataEventTypeEnum::INSERT);
        self.data.clear();
        self.old_data.clear();
        self.event_time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataEvent {
        static instance: DataEvent = DataEvent {
            job_id: ::protobuf::MessageField::none(),
            to: 0,
            event_type: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::vec::Vec::new(),
            old_data: ::std::vec::Vec::new(),
            event_time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:common.DataEventTypeEnum)
pub enum DataEventTypeEnum {
    // @@protoc_insertion_point(enum_value:common.DataEventTypeEnum.INSERT)
    INSERT = 0,
    // @@protoc_insertion_point(enum_value:common.DataEventTypeEnum.UPDATE)
    UPDATE = 1,
    // @@protoc_insertion_point(enum_value:common.DataEventTypeEnum.DELETE)
    DELETE = 2,
    // @@protoc_insertion_point(enum_value:common.DataEventTypeEnum.STOP)
    STOP = 3,
}

impl ::protobuf::Enum for DataEventTypeEnum {
    const NAME: &'static str = "DataEventTypeEnum";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataEventTypeEnum> {
        match value {
            0 => ::std::option::Option::Some(DataEventTypeEnum::INSERT),
            1 => ::std::option::Option::Some(DataEventTypeEnum::UPDATE),
            2 => ::std::option::Option::Some(DataEventTypeEnum::DELETE),
            3 => ::std::option::Option::Some(DataEventTypeEnum::STOP),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DataEventTypeEnum] = &[
        DataEventTypeEnum::INSERT,
        DataEventTypeEnum::UPDATE,
        DataEventTypeEnum::DELETE,
        DataEventTypeEnum::STOP,
    ];
}

impl ::protobuf::EnumFull for DataEventTypeEnum {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DataEventTypeEnum").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DataEventTypeEnum {
    fn default() -> Self {
        DataEventTypeEnum::INSERT
    }
}

impl DataEventTypeEnum {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataEventTypeEnum>("DataEventTypeEnum")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12common/event.proto\x12\x06common\x1a\x13common/common.proto\x1a\
    \x12common/table.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x83\x02\
    \n\tDataEvent\x12$\n\x06job_id\x18\x01\x20\x01(\x0b2\r.common.JobIdR\x05\
    jobId\x12\x0e\n\x02to\x18\x02\x20\x01(\x04R\x02to\x128\n\nevent_type\x18\
    \x03\x20\x01(\x0e2\x19.common.DataEventTypeEnumR\teventType\x12!\n\x04da\
    ta\x18\x04\x20\x03(\x0b2\r.common.EntryR\x04data\x12(\n\x08old_data\x18\
    \x05\x20\x03(\x0b2\r.common.EntryR\x07oldData\x129\n\nevent_time\x18\x06\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\teventTime*A\n\x11DataEven\
    tTypeEnum\x12\n\n\x06INSERT\x10\0\x12\n\n\x06UPDATE\x10\x01\x12\n\n\x06D\
    ELETE\x10\x02\x12\x08\n\x04STOP\x10\x03B\x07Z\x05protoJ\xd1\x05\n\x06\
    \x12\x04\0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x03\0\x1d\n\t\n\x02\x03\x01\x12\
    \x03\x04\0\x1c\n\t\n\x02\x03\x02\x12\x03\x05\0)\n\x08\n\x01\x08\x12\x03\
    \x06\0\x1c\n\t\n\x02\x08\x0b\x12\x03\x06\0\x1c\n\n\n\x02\x04\0\x12\x04\
    \x08\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x11\n\x18\n\x04\x04\0\
    \x02\0\x12\x03\t\x02\x1a\"\x0b\x20source\x20id\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\t\x02\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\x0f\x15\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x18\x19\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\n\x02\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\n\t\x0b\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\n\x0e\x0f\n\x19\n\x04\x04\0\x02\x02\x12\x03\x0b\x02#\"\x0c\x20e\
    vent\x20type\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x0b\x02\x13\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x0b\x14\x1e\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x0b!\"\n\x18\n\x04\x04\0\x02\x03\x12\x03\x0c\x02!\"\x0b\x20mand\
    atory\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x04\
    \0\x02\x03\x06\x12\x03\x0c\x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \x0c\x18\x1c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0c\x1f\x20\n(\n\x04\
    \x04\0\x02\x04\x12\x03\r\x02%\"\x1b\x20optional\x20for\x20INSERT\x20even\
    t\n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\0\x02\
    \x04\x06\x12\x03\r\x0b\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\r\x18\
    \x20\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\r#$\n\x0b\n\x04\x04\0\x02\x05\
    \x12\x03\x0e\x02+\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x0e\x02\x1b\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0e\x1c&\n\x0c\n\x05\x04\0\x02\x05\
    \x03\x12\x03\x0e)*\n\n\n\x02\x05\0\x12\x04\x11\0\x16\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x11\x05\x16\n\x0b\n\x04\x05\0\x02\0\x12\x03\x12\x02\r\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x12\x02\x08\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x12\x0b\x0c\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x13\x02\r\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x13\x02\x08\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x13\x0b\x0c\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x14\x02\r\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x14\x02\x08\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x14\x0b\x0c\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x15\x02\x0b\n\x0c\
    \n\x05\x05\0\x02\x03\x01\x12\x03\x15\x02\x06\n\x0c\n\x05\x05\0\x02\x03\
    \x02\x12\x03\x15\t\nb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::table::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DataEvent::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(DataEventTypeEnum::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
