// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct DataEvent {
    // message fields
    pub job_id: ::protobuf::SingularPtrField<super::common::JobId>,
    pub to: u64,
    pub event_type: DataEventTypeEnum,
    pub data: ::protobuf::RepeatedField<super::table::Entry>,
    pub old_data: ::protobuf::RepeatedField<super::table::Entry>,
    pub event_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DataEvent {
    fn default() -> &'a DataEvent {
        <DataEvent as ::protobuf::Message>::default_instance()
    }
}

impl DataEvent {
    pub fn new() -> DataEvent {
        ::std::default::Default::default()
    }

    // .common.JobId job_id = 1;


    pub fn get_job_id(&self) -> &super::common::JobId {
        self.job_id.as_ref().unwrap_or_else(|| <super::common::JobId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    pub fn has_job_id(&self) -> bool {
        self.job_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: super::common::JobId) {
        self.job_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut super::common::JobId {
        if self.job_id.is_none() {
            self.job_id.set_default();
        }
        self.job_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_job_id(&mut self) -> super::common::JobId {
        self.job_id.take().unwrap_or_else(|| super::common::JobId::new())
    }

    // uint64 to = 2;


    pub fn get_to(&self) -> u64 {
        self.to
    }
    pub fn clear_to(&mut self) {
        self.to = 0;
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: u64) {
        self.to = v;
    }

    // .common.DataEventTypeEnum event_type = 3;


    pub fn get_event_type(&self) -> DataEventTypeEnum {
        self.event_type
    }
    pub fn clear_event_type(&mut self) {
        self.event_type = DataEventTypeEnum::INSERT;
    }

    // Param is passed by value, moved
    pub fn set_event_type(&mut self, v: DataEventTypeEnum) {
        self.event_type = v;
    }

    // repeated .common.Entry data = 4;


    pub fn get_data(&self) -> &[super::table::Entry] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<super::table::Entry>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<super::table::Entry> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<super::table::Entry> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }

    // repeated .common.Entry old_data = 5;


    pub fn get_old_data(&self) -> &[super::table::Entry] {
        &self.old_data
    }
    pub fn clear_old_data(&mut self) {
        self.old_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_old_data(&mut self, v: ::protobuf::RepeatedField<super::table::Entry>) {
        self.old_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_old_data(&mut self) -> &mut ::protobuf::RepeatedField<super::table::Entry> {
        &mut self.old_data
    }

    // Take field
    pub fn take_old_data(&mut self) -> ::protobuf::RepeatedField<super::table::Entry> {
        ::std::mem::replace(&mut self.old_data, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Timestamp event_time = 6;


    pub fn get_event_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.event_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_event_time(&mut self) {
        self.event_time.clear();
    }

    pub fn has_event_time(&self) -> bool {
        self.event_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.event_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.event_time.is_none() {
            self.event_time.set_default();
        }
        self.event_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_event_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.event_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for DataEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.job_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.old_data {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.event_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.job_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.to = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.old_data)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.event_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.job_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::value_size(2, self.to, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event_type != DataEventTypeEnum::INSERT {
            my_size += ::protobuf::rt::enum_size(3, self.event_type);
        }
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.old_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.event_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.job_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.to != 0 {
            os.write_uint64(2, self.to)?;
        }
        if self.event_type != DataEventTypeEnum::INSERT {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.event_type))?;
        }
        for v in &self.data {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.old_data {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.event_time.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DataEvent {
        DataEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::JobId>>(
                "job_id",
                |m: &DataEvent| { &m.job_id },
                |m: &mut DataEvent| { &mut m.job_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "to",
                |m: &DataEvent| { &m.to },
                |m: &mut DataEvent| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DataEventTypeEnum>>(
                "event_type",
                |m: &DataEvent| { &m.event_type },
                |m: &mut DataEvent| { &mut m.event_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::table::Entry>>(
                "data",
                |m: &DataEvent| { &m.data },
                |m: &mut DataEvent| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::table::Entry>>(
                "old_data",
                |m: &DataEvent| { &m.old_data },
                |m: &mut DataEvent| { &mut m.old_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "event_time",
                |m: &DataEvent| { &m.event_time },
                |m: &mut DataEvent| { &mut m.event_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DataEvent>(
                "DataEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DataEvent {
        static instance: ::protobuf::rt::LazyV2<DataEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DataEvent::new)
    }
}

impl ::protobuf::Clear for DataEvent {
    fn clear(&mut self) {
        self.job_id.clear();
        self.to = 0;
        self.event_type = DataEventTypeEnum::INSERT;
        self.data.clear();
        self.old_data.clear();
        self.event_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DataEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DataEventTypeEnum {
    INSERT = 0,
    UPDATE = 1,
    DELETE = 2,
    STOP = 3,
}

impl ::protobuf::ProtobufEnum for DataEventTypeEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataEventTypeEnum> {
        match value {
            0 => ::std::option::Option::Some(DataEventTypeEnum::INSERT),
            1 => ::std::option::Option::Some(DataEventTypeEnum::UPDATE),
            2 => ::std::option::Option::Some(DataEventTypeEnum::DELETE),
            3 => ::std::option::Option::Some(DataEventTypeEnum::STOP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DataEventTypeEnum] = &[
            DataEventTypeEnum::INSERT,
            DataEventTypeEnum::UPDATE,
            DataEventTypeEnum::DELETE,
            DataEventTypeEnum::STOP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DataEventTypeEnum>("DataEventTypeEnum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DataEventTypeEnum {
}

impl ::std::default::Default for DataEventTypeEnum {
    fn default() -> Self {
        DataEventTypeEnum::INSERT
    }
}

impl ::protobuf::reflect::ProtobufValue for DataEventTypeEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12common/event.proto\x12\x06common\x1a\x13common/common.proto\x1a\
    \x12common/table.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x83\x02\
    \n\tDataEvent\x12$\n\x06job_id\x18\x01\x20\x01(\x0b2\r.common.JobIdR\x05\
    jobId\x12\x0e\n\x02to\x18\x02\x20\x01(\x04R\x02to\x128\n\nevent_type\x18\
    \x03\x20\x01(\x0e2\x19.common.DataEventTypeEnumR\teventType\x12!\n\x04da\
    ta\x18\x04\x20\x03(\x0b2\r.common.EntryR\x04data\x12(\n\x08old_data\x18\
    \x05\x20\x03(\x0b2\r.common.EntryR\x07oldData\x129\n\nevent_time\x18\x06\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\teventTime*A\n\x11DataEven\
    tTypeEnum\x12\n\n\x06INSERT\x10\0\x12\n\n\x06UPDATE\x10\x01\x12\n\n\x06D\
    ELETE\x10\x02\x12\x08\n\x04STOP\x10\x03B\x07Z\x05protoJ\xd1\x05\n\x06\
    \x12\x04\0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x03\0\x1d\n\t\n\x02\x03\x01\x12\
    \x03\x04\0\x1c\n\t\n\x02\x03\x02\x12\x03\x05\0)\n\x08\n\x01\x08\x12\x03\
    \x06\0\x1c\n\t\n\x02\x08\x0b\x12\x03\x06\0\x1c\n\n\n\x02\x04\0\x12\x04\
    \x08\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x11\n\x18\n\x04\x04\0\
    \x02\0\x12\x03\t\x02\x1a\"\x0b\x20source\x20id\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\t\x02\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\x0f\x15\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x18\x19\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\n\x02\x10\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\n\t\x0b\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\n\x0e\x0f\n\x19\n\x04\x04\0\x02\x02\x12\x03\x0b\x02#\"\x0c\x20e\
    vent\x20type\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x0b\x02\x13\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x0b\x14\x1e\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x0b!\"\n\x18\n\x04\x04\0\x02\x03\x12\x03\x0c\x02!\"\x0b\x20mand\
    atory\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x04\
    \0\x02\x03\x06\x12\x03\x0c\x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \x0c\x18\x1c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0c\x1f\x20\n(\n\x04\
    \x04\0\x02\x04\x12\x03\r\x02%\"\x1b\x20optional\x20for\x20INSERT\x20even\
    t\n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\0\x02\
    \x04\x06\x12\x03\r\x0b\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\r\x18\
    \x20\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\r#$\n\x0b\n\x04\x04\0\x02\x05\
    \x12\x03\x0e\x02+\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x0e\x02\x1b\n\
    \x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0e\x1c&\n\x0c\n\x05\x04\0\x02\x05\
    \x03\x12\x03\x0e)*\n\n\n\x02\x05\0\x12\x04\x11\0\x16\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x11\x05\x16\n\x0b\n\x04\x05\0\x02\0\x12\x03\x12\x02\r\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x12\x02\x08\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x12\x0b\x0c\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x13\x02\r\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x13\x02\x08\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x13\x0b\x0c\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x14\x02\r\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x14\x02\x08\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x14\x0b\x0c\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x15\x02\x0b\n\x0c\
    \n\x05\x05\0\x02\x03\x01\x12\x03\x15\x02\x06\n\x0c\n\x05\x05\0\x02\x03\
    \x02\x12\x03\x15\t\nb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
