// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `common/stream.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
/// StreamGraph metadata, it stores the structural information of a stream graph
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.DataflowMeta)
pub struct DataflowMeta {
    // message fields
    // @@protoc_insertion_point(field:common.DataflowMeta.center)
    pub center: u32,
    // @@protoc_insertion_point(field:common.DataflowMeta.neighbors)
    pub neighbors: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:common.DataflowMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataflowMeta {
    fn default() -> &'a DataflowMeta {
        <DataflowMeta as ::protobuf::Message>::default_instance()
    }
}

impl DataflowMeta {
    pub fn new() -> DataflowMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "center",
            |m: &DataflowMeta| { &m.center },
            |m: &mut DataflowMeta| { &mut m.center },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "neighbors",
            |m: &DataflowMeta| { &m.neighbors },
            |m: &mut DataflowMeta| { &mut m.neighbors },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataflowMeta>(
            "DataflowMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataflowMeta {
    const NAME: &'static str = "DataflowMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.center = is.read_uint32()?;
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.neighbors)?;
                },
                16 => {
                    self.neighbors.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.center != 0 {
            os.write_uint32(1, self.center)?;
        }
        for v in &self.neighbors {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.center != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.center);
        }
        for value in &self.neighbors {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataflowMeta {
        DataflowMeta::new()
    }

    fn clear(&mut self) {
        self.center = 0;
        self.neighbors.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataflowMeta {
        static instance: DataflowMeta = DataflowMeta {
            center: 0,
            neighbors: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataflowMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataflowMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataflowMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataflowMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
/// OperatorInfo, stores detail information of an operator
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.OperatorInfo)
pub struct OperatorInfo {
    // message fields
    // @@protoc_insertion_point(field:common.OperatorInfo.type)
    pub type_: ::protobuf::EnumOrUnknown<OperatorType>,
    // @@protoc_insertion_point(field:common.OperatorInfo.table_id)
    pub table_id: u32,
    // @@protoc_insertion_point(field:common.OperatorInfo.header_id)
    pub header_id: u32,
    // @@protoc_insertion_point(field:common.OperatorInfo.values)
    pub values: ::std::vec::Vec<ConstOp>,
    // @@protoc_insertion_point(field:common.OperatorInfo.connector)
    pub connector: ::protobuf::MessageField<Connector>,
    // special fields
    // @@protoc_insertion_point(special_field:common.OperatorInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OperatorInfo {
    fn default() -> &'a OperatorInfo {
        <OperatorInfo as ::protobuf::Message>::default_instance()
    }
}

impl OperatorInfo {
    pub fn new() -> OperatorInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &OperatorInfo| { &m.type_ },
            |m: &mut OperatorInfo| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_id",
            |m: &OperatorInfo| { &m.table_id },
            |m: &mut OperatorInfo| { &mut m.table_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "header_id",
            |m: &OperatorInfo| { &m.header_id },
            |m: &mut OperatorInfo| { &mut m.header_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &OperatorInfo| { &m.values },
            |m: &mut OperatorInfo| { &mut m.values },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Connector>(
            "connector",
            |m: &OperatorInfo| { &m.connector },
            |m: &mut OperatorInfo| { &mut m.connector },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OperatorInfo>(
            "OperatorInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OperatorInfo {
    const NAME: &'static str = "OperatorInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.table_id = is.read_uint32()?;
                },
                24 => {
                    self.header_id = is.read_uint32()?;
                },
                34 => {
                    self.values.push(is.read_message()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.connector)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(OperatorType::REFERENCE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.table_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.table_id);
        }
        if self.header_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.header_id);
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.connector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(OperatorType::REFERENCE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.table_id != 0 {
            os.write_uint32(2, self.table_id)?;
        }
        if self.header_id != 0 {
            os.write_uint32(3, self.header_id)?;
        }
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.connector.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OperatorInfo {
        OperatorInfo::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(OperatorType::REFERENCE);
        self.table_id = 0;
        self.header_id = 0;
        self.values.clear();
        self.connector.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OperatorInfo {
        static instance: OperatorInfo = OperatorInfo {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            table_id: 0,
            header_id: 0,
            values: ::std::vec::Vec::new(),
            connector: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OperatorInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OperatorInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OperatorInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OperatorInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
/// Constant operator
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.ConstOp)
pub struct ConstOp {
    // message fields
    // @@protoc_insertion_point(field:common.ConstOp.value)
    pub value: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:common.ConstOp.node_id)
    pub node_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:common.ConstOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConstOp {
    fn default() -> &'a ConstOp {
        <ConstOp as ::protobuf::Message>::default_instance()
    }
}

impl ConstOp {
    pub fn new() -> ConstOp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &ConstOp| { &m.value },
            |m: &mut ConstOp| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_id",
            |m: &ConstOp| { &m.node_id },
            |m: &mut ConstOp| { &mut m.node_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConstOp>(
            "ConstOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConstOp {
    const NAME: &'static str = "ConstOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = is.read_bytes()?;
                },
                16 => {
                    self.node_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.value);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.node_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.value.is_empty() {
            os.write_bytes(1, &self.value)?;
        }
        if self.node_id != 0 {
            os.write_uint32(2, self.node_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConstOp {
        ConstOp::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.node_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConstOp {
        static instance: ConstOp = ConstOp {
            value: ::std::vec::Vec::new(),
            node_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConstOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConstOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConstOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConstOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.Connector)
pub struct Connector {
    // message fields
    // @@protoc_insertion_point(field:common.Connector.type)
    pub type_: ::protobuf::EnumOrUnknown<ConnectorTypeEnum>,
    // @@protoc_insertion_point(field:common.Connector.connector_basic)
    pub connector_basic: ::protobuf::MessageField<ConnectionBasic>,
    // @@protoc_insertion_point(field:common.Connector.options)
    pub options: ::protobuf::MessageField<Options>,
    // special fields
    // @@protoc_insertion_point(special_field:common.Connector.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Connector {
    fn default() -> &'a Connector {
        <Connector as ::protobuf::Message>::default_instance()
    }
}

impl Connector {
    pub fn new() -> Connector {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Connector| { &m.type_ },
            |m: &mut Connector| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConnectionBasic>(
            "connector_basic",
            |m: &Connector| { &m.connector_basic },
            |m: &mut Connector| { &mut m.connector_basic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Options>(
            "options",
            |m: &Connector| { &m.options },
            |m: &mut Connector| { &mut m.options },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Connector>(
            "Connector",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Connector {
    const NAME: &'static str = "Connector";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.connector_basic)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.options)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(ConnectorTypeEnum::KAFKA) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if let Some(v) = self.connector_basic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(ConnectorTypeEnum::KAFKA) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.connector_basic.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.options.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Connector {
        Connector::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(ConnectorTypeEnum::KAFKA);
        self.connector_basic.clear();
        self.options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Connector {
        static instance: Connector = Connector {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            connector_basic: ::protobuf::MessageField::none(),
            options: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Connector {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Connector").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Connector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Connector {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.ConnectionBasic)
pub struct ConnectionBasic {
    // message fields
    // @@protoc_insertion_point(field:common.ConnectionBasic.uri)
    pub uri: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:common.ConnectionBasic.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectionBasic {
    fn default() -> &'a ConnectionBasic {
        <ConnectionBasic as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionBasic {
    pub fn new() -> ConnectionBasic {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uri",
            |m: &ConnectionBasic| { &m.uri },
            |m: &mut ConnectionBasic| { &mut m.uri },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectionBasic>(
            "ConnectionBasic",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectionBasic {
    const NAME: &'static str = "ConnectionBasic";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uri = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uri);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uri.is_empty() {
            os.write_string(1, &self.uri)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectionBasic {
        ConnectionBasic::new()
    }

    fn clear(&mut self) {
        self.uri.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectionBasic {
        static instance: ConnectionBasic = ConnectionBasic {
            uri: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectionBasic {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectionBasic").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectionBasic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionBasic {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.Options)
pub struct Options {
    // message fields
    // @@protoc_insertion_point(field:common.Options.qe_opts)
    pub qe_opts: ::protobuf::MessageField<QueryEngineOptions>,
    // @@protoc_insertion_point(field:common.Options.kafka_opts)
    pub kafka_opts: ::protobuf::MessageField<KafkaOptions>,
    // special fields
    // @@protoc_insertion_point(special_field:common.Options.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Options {
    fn default() -> &'a Options {
        <Options as ::protobuf::Message>::default_instance()
    }
}

impl Options {
    pub fn new() -> Options {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, QueryEngineOptions>(
            "qe_opts",
            |m: &Options| { &m.qe_opts },
            |m: &mut Options| { &mut m.qe_opts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, KafkaOptions>(
            "kafka_opts",
            |m: &Options| { &m.kafka_opts },
            |m: &mut Options| { &mut m.kafka_opts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Options>(
            "Options",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Options {
    const NAME: &'static str = "Options";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.qe_opts)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.kafka_opts)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.qe_opts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.kafka_opts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.qe_opts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.kafka_opts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Options {
        Options::new()
    }

    fn clear(&mut self) {
        self.qe_opts.clear();
        self.kafka_opts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Options {
        static instance: Options = Options {
            qe_opts: ::protobuf::MessageField::none(),
            kafka_opts: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Options {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Options").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Options {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.KafkaOptions)
pub struct KafkaOptions {
    // special fields
    // @@protoc_insertion_point(special_field:common.KafkaOptions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KafkaOptions {
    fn default() -> &'a KafkaOptions {
        <KafkaOptions as ::protobuf::Message>::default_instance()
    }
}

impl KafkaOptions {
    pub fn new() -> KafkaOptions {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KafkaOptions>(
            "KafkaOptions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KafkaOptions {
    const NAME: &'static str = "KafkaOptions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KafkaOptions {
        KafkaOptions::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KafkaOptions {
        static instance: KafkaOptions = KafkaOptions {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KafkaOptions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KafkaOptions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KafkaOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KafkaOptions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.QueryEngineOptions)
pub struct QueryEngineOptions {
    // message fields
    // @@protoc_insertion_point(field:common.QueryEngineOptions.interval)
    pub interval: u32,
    // @@protoc_insertion_point(field:common.QueryEngineOptions.batch_size)
    pub batch_size: u32,
    // special fields
    // @@protoc_insertion_point(special_field:common.QueryEngineOptions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryEngineOptions {
    fn default() -> &'a QueryEngineOptions {
        <QueryEngineOptions as ::protobuf::Message>::default_instance()
    }
}

impl QueryEngineOptions {
    pub fn new() -> QueryEngineOptions {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interval",
            |m: &QueryEngineOptions| { &m.interval },
            |m: &mut QueryEngineOptions| { &mut m.interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "batch_size",
            |m: &QueryEngineOptions| { &m.batch_size },
            |m: &mut QueryEngineOptions| { &mut m.batch_size },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryEngineOptions>(
            "QueryEngineOptions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryEngineOptions {
    const NAME: &'static str = "QueryEngineOptions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.interval = is.read_uint32()?;
                },
                16 => {
                    self.batch_size = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.interval != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.interval);
        }
        if self.batch_size != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.batch_size);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.interval != 0 {
            os.write_uint32(1, self.interval)?;
        }
        if self.batch_size != 0 {
            os.write_uint32(2, self.batch_size)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryEngineOptions {
        QueryEngineOptions::new()
    }

    fn clear(&mut self) {
        self.interval = 0;
        self.batch_size = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryEngineOptions {
        static instance: QueryEngineOptions = QueryEngineOptions {
            interval: 0,
            batch_size: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryEngineOptions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryEngineOptions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryEngineOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryEngineOptions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.Dataflow)
pub struct Dataflow {
    // message fields
    // @@protoc_insertion_point(field:common.Dataflow.job_id)
    pub job_id: ::protobuf::MessageField<super::common::JobId>,
    // @@protoc_insertion_point(field:common.Dataflow.meta)
    pub meta: ::std::vec::Vec<DataflowMeta>,
    // @@protoc_insertion_point(field:common.Dataflow.nodes)
    pub nodes: ::std::collections::HashMap<u32, OperatorInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:common.Dataflow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Dataflow {
    fn default() -> &'a Dataflow {
        <Dataflow as ::protobuf::Message>::default_instance()
    }
}

impl Dataflow {
    pub fn new() -> Dataflow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::JobId>(
            "job_id",
            |m: &Dataflow| { &m.job_id },
            |m: &mut Dataflow| { &mut m.job_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "meta",
            |m: &Dataflow| { &m.meta },
            |m: &mut Dataflow| { &mut m.meta },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "nodes",
            |m: &Dataflow| { &m.nodes },
            |m: &mut Dataflow| { &mut m.nodes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dataflow>(
            "Dataflow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Dataflow {
    const NAME: &'static str = "Dataflow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.job_id)?;
                },
                18 => {
                    self.meta.push(is.read_message()?);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.nodes.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.job_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.meta {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.nodes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.job_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.meta {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.nodes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Dataflow {
        Dataflow::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.meta.clear();
        self.nodes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Dataflow {
        static instance: ::protobuf::rt::Lazy<Dataflow> = ::protobuf::rt::Lazy::new();
        instance.get(Dataflow::new)
    }
}

impl ::protobuf::MessageFull for Dataflow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Dataflow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Dataflow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dataflow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:common.ConnectorTypeEnum)
pub enum ConnectorTypeEnum {
    // @@protoc_insertion_point(enum_value:common.ConnectorTypeEnum.KAFKA)
    KAFKA = 0,
    // @@protoc_insertion_point(enum_value:common.ConnectorTypeEnum.QE)
    QE = 1,
}

impl ::protobuf::Enum for ConnectorTypeEnum {
    const NAME: &'static str = "ConnectorTypeEnum";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConnectorTypeEnum> {
        match value {
            0 => ::std::option::Option::Some(ConnectorTypeEnum::KAFKA),
            1 => ::std::option::Option::Some(ConnectorTypeEnum::QE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ConnectorTypeEnum] = &[
        ConnectorTypeEnum::KAFKA,
        ConnectorTypeEnum::QE,
    ];
}

impl ::protobuf::EnumFull for ConnectorTypeEnum {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ConnectorTypeEnum").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ConnectorTypeEnum {
    fn default() -> Self {
        ConnectorTypeEnum::KAFKA
    }
}

impl ConnectorTypeEnum {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ConnectorTypeEnum>("ConnectorTypeEnum")
    }
}

/// *
/// Operator Type
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:common.OperatorType)
pub enum OperatorType {
    // @@protoc_insertion_point(enum_value:common.OperatorType.REFERENCE)
    REFERENCE = 0,
    // @@protoc_insertion_point(enum_value:common.OperatorType.ADD)
    ADD = 1,
    // @@protoc_insertion_point(enum_value:common.OperatorType.SUM)
    SUM = 2,
    // @@protoc_insertion_point(enum_value:common.OperatorType.SUMIF)
    SUMIF = 3,
    // @@protoc_insertion_point(enum_value:common.OperatorType.COUNTIF)
    COUNTIF = 4,
    // @@protoc_insertion_point(enum_value:common.OperatorType.COUNT)
    COUNT = 5,
    // @@protoc_insertion_point(enum_value:common.OperatorType.AVG)
    AVG = 6,
    // @@protoc_insertion_point(enum_value:common.OperatorType.GROUP)
    GROUP = 7,
    // @@protoc_insertion_point(enum_value:common.OperatorType.GROUPIF)
    GROUPIF = 8,
    // @@protoc_insertion_point(enum_value:common.OperatorType.MAX)
    MAX = 9,
    // @@protoc_insertion_point(enum_value:common.OperatorType.MAXIF)
    MAXIF = 10,
    // @@protoc_insertion_point(enum_value:common.OperatorType.MIN)
    MIN = 11,
    // @@protoc_insertion_point(enum_value:common.OperatorType.MINIF)
    MINIF = 12,
    // @@protoc_insertion_point(enum_value:common.OperatorType.SUB)
    SUB = 13,
    // @@protoc_insertion_point(enum_value:common.OperatorType.MUL)
    MUL = 14,
    // @@protoc_insertion_point(enum_value:common.OperatorType.DIV)
    DIV = 15,
    // @@protoc_insertion_point(enum_value:common.OperatorType.EQ)
    EQ = 16,
    // @@protoc_insertion_point(enum_value:common.OperatorType.NEQ)
    NEQ = 17,
    // @@protoc_insertion_point(enum_value:common.OperatorType.LT)
    LT = 18,
    // @@protoc_insertion_point(enum_value:common.OperatorType.GT)
    GT = 19,
    // @@protoc_insertion_point(enum_value:common.OperatorType.LTE)
    LTE = 20,
    // @@protoc_insertion_point(enum_value:common.OperatorType.GTE)
    GTE = 21,
    // @@protoc_insertion_point(enum_value:common.OperatorType.CONNECTOR)
    CONNECTOR = 22,
}

impl ::protobuf::Enum for OperatorType {
    const NAME: &'static str = "OperatorType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OperatorType> {
        match value {
            0 => ::std::option::Option::Some(OperatorType::REFERENCE),
            1 => ::std::option::Option::Some(OperatorType::ADD),
            2 => ::std::option::Option::Some(OperatorType::SUM),
            3 => ::std::option::Option::Some(OperatorType::SUMIF),
            4 => ::std::option::Option::Some(OperatorType::COUNTIF),
            5 => ::std::option::Option::Some(OperatorType::COUNT),
            6 => ::std::option::Option::Some(OperatorType::AVG),
            7 => ::std::option::Option::Some(OperatorType::GROUP),
            8 => ::std::option::Option::Some(OperatorType::GROUPIF),
            9 => ::std::option::Option::Some(OperatorType::MAX),
            10 => ::std::option::Option::Some(OperatorType::MAXIF),
            11 => ::std::option::Option::Some(OperatorType::MIN),
            12 => ::std::option::Option::Some(OperatorType::MINIF),
            13 => ::std::option::Option::Some(OperatorType::SUB),
            14 => ::std::option::Option::Some(OperatorType::MUL),
            15 => ::std::option::Option::Some(OperatorType::DIV),
            16 => ::std::option::Option::Some(OperatorType::EQ),
            17 => ::std::option::Option::Some(OperatorType::NEQ),
            18 => ::std::option::Option::Some(OperatorType::LT),
            19 => ::std::option::Option::Some(OperatorType::GT),
            20 => ::std::option::Option::Some(OperatorType::LTE),
            21 => ::std::option::Option::Some(OperatorType::GTE),
            22 => ::std::option::Option::Some(OperatorType::CONNECTOR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [OperatorType] = &[
        OperatorType::REFERENCE,
        OperatorType::ADD,
        OperatorType::SUM,
        OperatorType::SUMIF,
        OperatorType::COUNTIF,
        OperatorType::COUNT,
        OperatorType::AVG,
        OperatorType::GROUP,
        OperatorType::GROUPIF,
        OperatorType::MAX,
        OperatorType::MAXIF,
        OperatorType::MIN,
        OperatorType::MINIF,
        OperatorType::SUB,
        OperatorType::MUL,
        OperatorType::DIV,
        OperatorType::EQ,
        OperatorType::NEQ,
        OperatorType::LT,
        OperatorType::GT,
        OperatorType::LTE,
        OperatorType::GTE,
        OperatorType::CONNECTOR,
    ];
}

impl ::protobuf::EnumFull for OperatorType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("OperatorType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for OperatorType {
    fn default() -> Self {
        OperatorType::REFERENCE
    }
}

impl OperatorType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OperatorType>("OperatorType")
    }
}

/// *
/// Stream Graph Status. It shows which status a stream job is now.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:common.DataflowStatus)
pub enum DataflowStatus {
    // @@protoc_insertion_point(enum_value:common.DataflowStatus.INITIALIZED)
    INITIALIZED = 0,
    // @@protoc_insertion_point(enum_value:common.DataflowStatus.RUNNING)
    RUNNING = 1,
    // @@protoc_insertion_point(enum_value:common.DataflowStatus.CLOSING)
    CLOSING = 2,
    // @@protoc_insertion_point(enum_value:common.DataflowStatus.CLOSED)
    CLOSED = 3,
}

impl ::protobuf::Enum for DataflowStatus {
    const NAME: &'static str = "DataflowStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataflowStatus> {
        match value {
            0 => ::std::option::Option::Some(DataflowStatus::INITIALIZED),
            1 => ::std::option::Option::Some(DataflowStatus::RUNNING),
            2 => ::std::option::Option::Some(DataflowStatus::CLOSING),
            3 => ::std::option::Option::Some(DataflowStatus::CLOSED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DataflowStatus] = &[
        DataflowStatus::INITIALIZED,
        DataflowStatus::RUNNING,
        DataflowStatus::CLOSING,
        DataflowStatus::CLOSED,
    ];
}

impl ::protobuf::EnumFull for DataflowStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DataflowStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DataflowStatus {
    fn default() -> Self {
        DataflowStatus::INITIALIZED
    }
}

impl DataflowStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataflowStatus>("DataflowStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13common/stream.proto\x12\x06common\x1a\x13common/common.proto\"D\n\
    \x0cDataflowMeta\x12\x16\n\x06center\x18\x01\x20\x01(\rR\x06center\x12\
    \x1c\n\tneighbors\x18\x02\x20\x03(\rR\tneighbors\"\xca\x01\n\x0cOperator\
    Info\x12(\n\x04type\x18\x01\x20\x01(\x0e2\x14.common.OperatorTypeR\x04ty\
    pe\x12\x19\n\x08table_id\x18\x02\x20\x01(\rR\x07tableId\x12\x1b\n\theade\
    r_id\x18\x03\x20\x01(\rR\x08headerId\x12'\n\x06values\x18\x04\x20\x03(\
    \x0b2\x0f.common.ConstOpR\x06values\x12/\n\tconnector\x18\x05\x20\x01(\
    \x0b2\x11.common.ConnectorR\tconnector\"8\n\x07ConstOp\x12\x14\n\x05valu\
    e\x18\x01\x20\x01(\x0cR\x05value\x12\x17\n\x07node_id\x18\x02\x20\x01(\r\
    R\x06nodeId\"\xa7\x01\n\tConnector\x12-\n\x04type\x18\x01\x20\x01(\x0e2\
    \x19.common.ConnectorTypeEnumR\x04type\x12@\n\x0fconnector_basic\x18\x02\
    \x20\x01(\x0b2\x17.common.ConnectionBasicR\x0econnectorBasic\x12)\n\x07o\
    ptions\x18\x03\x20\x01(\x0b2\x0f.common.OptionsR\x07options\"#\n\x0fConn\
    ectionBasic\x12\x10\n\x03uri\x18\x01\x20\x01(\tR\x03uri\"s\n\x07Options\
    \x123\n\x07qe_opts\x18\x01\x20\x01(\x0b2\x1a.common.QueryEngineOptionsR\
    \x06qeOpts\x123\n\nkafka_opts\x18\x02\x20\x01(\x0b2\x14.common.KafkaOpti\
    onsR\tkafkaOpts\"\x0e\n\x0cKafkaOptions\"O\n\x12QueryEngineOptions\x12\
    \x1a\n\x08interval\x18\x01\x20\x01(\rR\x08interval\x12\x1d\n\nbatch_size\
    \x18\x02\x20\x01(\rR\tbatchSize\"\xdd\x01\n\x08Dataflow\x12$\n\x06job_id\
    \x18\x01\x20\x01(\x0b2\r.common.JobIdR\x05jobId\x12(\n\x04meta\x18\x02\
    \x20\x03(\x0b2\x14.common.DataflowMetaR\x04meta\x121\n\x05nodes\x18\x03\
    \x20\x03(\x0b2\x1b.common.Dataflow.NodesEntryR\x05nodes\x1aN\n\nNodesEnt\
    ry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12*\n\x05value\x18\x02\
    \x20\x01(\x0b2\x14.common.OperatorInfoR\x05value:\x028\x01*&\n\x11Connec\
    torTypeEnum\x12\t\n\x05KAFKA\x10\0\x12\x06\n\x02QE\x10\x01*\xf8\x01\n\
    \x0cOperatorType\x12\r\n\tREFERENCE\x10\0\x12\x07\n\x03ADD\x10\x01\x12\
    \x07\n\x03SUM\x10\x02\x12\t\n\x05SUMIF\x10\x03\x12\x0b\n\x07COUNTIF\x10\
    \x04\x12\t\n\x05COUNT\x10\x05\x12\x07\n\x03AVG\x10\x06\x12\t\n\x05GROUP\
    \x10\x07\x12\x0b\n\x07GROUPIF\x10\x08\x12\x07\n\x03MAX\x10\t\x12\t\n\x05\
    MAXIF\x10\n\x12\x07\n\x03MIN\x10\x0b\x12\t\n\x05MINIF\x10\x0c\x12\x07\n\
    \x03SUB\x10\r\x12\x07\n\x03MUL\x10\x0e\x12\x07\n\x03DIV\x10\x0f\x12\x06\
    \n\x02EQ\x10\x10\x12\x07\n\x03NEQ\x10\x11\x12\x06\n\x02LT\x10\x12\x12\
    \x06\n\x02GT\x10\x13\x12\x07\n\x03LTE\x10\x14\x12\x07\n\x03GTE\x10\x15\
    \x12\r\n\tCONNECTOR\x10\x16*G\n\x0eDataflowStatus\x12\x0f\n\x0bINITIALIZ\
    ED\x10\0\x12\x0b\n\x07RUNNING\x10\x01\x12\x0b\n\x07CLOSING\x10\x02\x12\n\
    \n\x06CLOSED\x10\x03B\x07Z\x05protoJ\xd1\x19\n\x06\x12\x04\0\0j\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\t\n\
    \x02\x03\0\x12\x03\x03\0\x1d\n\x08\n\x01\x08\x12\x03\x04\0\x1c\n\t\n\x02\
    \x08\x0b\x12\x03\x04\0\x1c\n[\n\x02\x04\0\x12\x04\t\0\x0c\x01\x1aO*\nStr\
    eamGraph\x20metadata,\x20it\x20stores\x20the\x20structural\x20informatio\
    n\x20of\x20a\x20stream\x20graph\n\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x14\
    \n\x1d\n\x04\x04\0\x02\0\x12\x03\n\x02\x14\"\x10\x20center\x20node\x20id\
    \n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\n\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x12\x13\n!\n\
    \x04\x04\0\x02\x01\x12\x03\x0b\x02\x20\"\x14\x20center's\x20neighbors\n\
    \n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0b\x02\n\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x0b\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\
    \x12\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x1e\x1f\nE\n\x02\x04\
    \x01\x12\x04\x11\0\x17\x01\x1a9*\nOperatorInfo,\x20stores\x20detail\x20i\
    nformation\x20of\x20an\x20operator\n\n\n\n\x03\x04\x01\x01\x12\x03\x11\
    \x08\x14\n\x13\n\x04\x04\x01\x02\0\x12\x03\x12\x02\x18\"\x06\x20type\n\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x12\x02\x0e\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x12\x0f\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x12\x16\
    \x17\n*\n\x04\x04\x01\x02\x01\x12\x03\x13\x02\x16\"\x1d\x20only\x20for\
    \x20Reference\x20Operator\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x13\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x13\t\x11\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x13\x14\x15\n*\n\x04\x04\x01\x02\x02\x12\
    \x03\x14\x02\x17\"\x1d\x20only\x20for\x20Reference\x20Operator\n\n\x0c\n\
    \x05\x04\x01\x02\x02\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03\x14\t\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x14\x15\
    \x16\n\x1b\n\x04\x04\x01\x02\x03\x12\x03\x15\x02\x1e\"\x0e\x20consts\x20\
    value\n\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03\x15\x02\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x06\x12\x03\x15\x0b\x12\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03\x15\x13\x19\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x15\x1c\x1d\
    \n<\n\x04\x04\x01\x02\x04\x12\x03\x16\x02\x1a\"/\x20connector\x20config,\
    \x20only\x20for\x20Connector\x20Operator\n\n\x0c\n\x05\x04\x01\x02\x04\
    \x06\x12\x03\x16\x02\x0b\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x16\x0c\
    \x15\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x16\x18\x19\n\x20\n\x02\x04\
    \x02\x12\x04\x1c\0\x1f\x01\x1a\x14*\nConstant\x20operator\n\n\n\n\x03\
    \x04\x02\x01\x12\x03\x1c\x08\x0f\nE\n\x04\x04\x02\x02\0\x12\x03\x1d\x02\
    \x12\"8\x20value\x20of\x20constant,\x20format:\x20[<flag\x20byte>,\x20<d\
    ata\x20bytes>]\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1d\x02\x07\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03\x1d\x08\r\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x1d\x10\x11\n\x16\n\x04\x04\x02\x02\x01\x12\x03\x1e\x02\x15\"\t\
    \x20node\x20id\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1e\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1e\t\x10\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x1e\x13\x14\n\n\n\x02\x04\x03\x12\x04\"\0&\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03\"\x08\x11\n\x0b\n\x04\x04\x03\x02\0\x12\x03#\
    \x02\x1d\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03#\x02\x13\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03#\x14\x18\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03#\
    \x1b\x1c\n\x0b\n\x04\x04\x03\x02\x01\x12\x03$\x02&\n\x0c\n\x05\x04\x03\
    \x02\x01\x06\x12\x03$\x02\x11\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03$\
    \x12!\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03$$%\n\x0b\n\x04\x04\x03\x02\
    \x02\x12\x03%\x02\x16\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03%\x02\t\n\
    \x0c\n\x05\x04\x03\x02\x02\x01\x12\x03%\n\x11\n\x0c\n\x05\x04\x03\x02\
    \x02\x03\x12\x03%\x14\x15\n\n\n\x02\x05\0\x12\x04(\0+\x01\n\n\n\x03\x05\
    \0\x01\x12\x03(\x05\x16\n\x0b\n\x04\x05\0\x02\0\x12\x03)\x02\x0c\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03)\x02\x07\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03)\n\x0b\n\x0b\n\x04\x05\0\x02\x01\x12\x03*\x02\t\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03*\x02\x04\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03*\x07\
    \x08\n\n\n\x02\x04\x04\x12\x04-\0/\x01\n\n\n\x03\x04\x04\x01\x12\x03-\
    \x08\x17\n\x0b\n\x04\x04\x04\x02\0\x12\x03.\x02\x11\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03.\t\x0c\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03.\x0f\x10\n\n\n\x02\x04\x05\x12\
    \x041\04\x01\n\n\n\x03\x04\x05\x01\x12\x031\x08\x0f\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x032\x02!\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x032\x02\x14\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x032\x15\x1c\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x032\x1f\x20\n\x0b\n\x04\x04\x05\x02\x01\x12\x033\x02\x1e\n\x0c\
    \n\x05\x04\x05\x02\x01\x06\x12\x033\x02\x0e\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x033\x0f\x19\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x033\x1c\x1d\n\
    \n\n\x02\x04\x06\x12\x046\08\x01\n\n\n\x03\x04\x06\x01\x12\x036\x08\x14\
    \n\n\n\x02\x04\x07\x12\x04:\0=\x01\n\n\n\x03\x04\x07\x01\x12\x03:\x08\
    \x1a\n\x0b\n\x04\x04\x07\x02\0\x12\x03;\x02\x16\n\x0c\n\x05\x04\x07\x02\
    \0\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03;\t\x11\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x03;\x14\x15\n\x0b\n\x04\x04\x07\x02\
    \x01\x12\x03<\x02\x18\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03<\x02\x08\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03<\t\x13\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03<\x16\x17\n\x1c\n\x02\x05\x01\x12\x04B\0Z\x01\x1a\x10*\n\
    Operator\x20Type\n\n\n\n\x03\x05\x01\x01\x12\x03B\x05\x11\n\x0b\n\x04\
    \x05\x01\x02\0\x12\x03C\x02\x10\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03C\
    \x02\x0b\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03C\x0e\x0f\n\x0b\n\x04\x05\
    \x01\x02\x01\x12\x03D\x02\n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03D\x02\
    \x05\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03D\x08\t\n\x0b\n\x04\x05\x01\
    \x02\x02\x12\x03E\x02\n\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03E\x02\x05\
    \n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03E\x08\t\n\x0b\n\x04\x05\x01\x02\
    \x03\x12\x03F\x02\x0c\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03F\x02\x07\n\
    \x0c\n\x05\x05\x01\x02\x03\x02\x12\x03F\n\x0b\n\x0b\n\x04\x05\x01\x02\
    \x04\x12\x03G\x02\x0e\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03G\x02\t\n\
    \x0c\n\x05\x05\x01\x02\x04\x02\x12\x03G\x0c\r\n\x0b\n\x04\x05\x01\x02\
    \x05\x12\x03H\x02\x0c\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03H\x02\x07\n\
    \x0c\n\x05\x05\x01\x02\x05\x02\x12\x03H\n\x0b\n\x0b\n\x04\x05\x01\x02\
    \x06\x12\x03I\x02\n\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03I\x02\x05\n\
    \x0c\n\x05\x05\x01\x02\x06\x02\x12\x03I\x08\t\n\x0b\n\x04\x05\x01\x02\
    \x07\x12\x03J\x02\x0c\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\x03J\x02\x07\n\
    \x0c\n\x05\x05\x01\x02\x07\x02\x12\x03J\n\x0b\n\x0b\n\x04\x05\x01\x02\
    \x08\x12\x03K\x02\x0e\n\x0c\n\x05\x05\x01\x02\x08\x01\x12\x03K\x02\t\n\
    \x0c\n\x05\x05\x01\x02\x08\x02\x12\x03K\x0c\r\n\x0b\n\x04\x05\x01\x02\t\
    \x12\x03L\x02\n\n\x0c\n\x05\x05\x01\x02\t\x01\x12\x03L\x02\x05\n\x0c\n\
    \x05\x05\x01\x02\t\x02\x12\x03L\x08\t\n\x0b\n\x04\x05\x01\x02\n\x12\x03M\
    \x02\r\n\x0c\n\x05\x05\x01\x02\n\x01\x12\x03M\x02\x07\n\x0c\n\x05\x05\
    \x01\x02\n\x02\x12\x03M\n\x0c\n\x0b\n\x04\x05\x01\x02\x0b\x12\x03N\x02\
    \x0b\n\x0c\n\x05\x05\x01\x02\x0b\x01\x12\x03N\x02\x05\n\x0c\n\x05\x05\
    \x01\x02\x0b\x02\x12\x03N\x08\n\n\x0b\n\x04\x05\x01\x02\x0c\x12\x03O\x02\
    \r\n\x0c\n\x05\x05\x01\x02\x0c\x01\x12\x03O\x02\x07\n\x0c\n\x05\x05\x01\
    \x02\x0c\x02\x12\x03O\n\x0c\n\x0b\n\x04\x05\x01\x02\r\x12\x03P\x02\x0b\n\
    \x0c\n\x05\x05\x01\x02\r\x01\x12\x03P\x02\x05\n\x0c\n\x05\x05\x01\x02\r\
    \x02\x12\x03P\x08\n\n\x0b\n\x04\x05\x01\x02\x0e\x12\x03Q\x02\x0b\n\x0c\n\
    \x05\x05\x01\x02\x0e\x01\x12\x03Q\x02\x05\n\x0c\n\x05\x05\x01\x02\x0e\
    \x02\x12\x03Q\x08\n\n\x0b\n\x04\x05\x01\x02\x0f\x12\x03R\x02\x0b\n\x0c\n\
    \x05\x05\x01\x02\x0f\x01\x12\x03R\x02\x05\n\x0c\n\x05\x05\x01\x02\x0f\
    \x02\x12\x03R\x08\n\n\x0b\n\x04\x05\x01\x02\x10\x12\x03S\x02\n\n\x0c\n\
    \x05\x05\x01\x02\x10\x01\x12\x03S\x02\x04\n\x0c\n\x05\x05\x01\x02\x10\
    \x02\x12\x03S\x07\t\n\x0b\n\x04\x05\x01\x02\x11\x12\x03T\x02\x0b\n\x0c\n\
    \x05\x05\x01\x02\x11\x01\x12\x03T\x02\x05\n\x0c\n\x05\x05\x01\x02\x11\
    \x02\x12\x03T\x08\n\n\x0b\n\x04\x05\x01\x02\x12\x12\x03U\x02\n\n\x0c\n\
    \x05\x05\x01\x02\x12\x01\x12\x03U\x02\x04\n\x0c\n\x05\x05\x01\x02\x12\
    \x02\x12\x03U\x07\t\n\x0b\n\x04\x05\x01\x02\x13\x12\x03V\x02\n\n\x0c\n\
    \x05\x05\x01\x02\x13\x01\x12\x03V\x02\x04\n\x0c\n\x05\x05\x01\x02\x13\
    \x02\x12\x03V\x07\t\n\x0b\n\x04\x05\x01\x02\x14\x12\x03W\x02\x0b\n\x0c\n\
    \x05\x05\x01\x02\x14\x01\x12\x03W\x02\x05\n\x0c\n\x05\x05\x01\x02\x14\
    \x02\x12\x03W\x08\n\n\x0b\n\x04\x05\x01\x02\x15\x12\x03X\x02\x0b\n\x0c\n\
    \x05\x05\x01\x02\x15\x01\x12\x03X\x02\x05\n\x0c\n\x05\x05\x01\x02\x15\
    \x02\x12\x03X\x08\n\n\x0b\n\x04\x05\x01\x02\x16\x12\x03Y\x02\x11\n\x0c\n\
    \x05\x05\x01\x02\x16\x01\x12\x03Y\x02\x0b\n\x0c\n\x05\x05\x01\x02\x16\
    \x02\x12\x03Y\x0e\x10\nN\n\x02\x05\x02\x12\x04_\0d\x01\x1aB*\nStream\x20\
    Graph\x20Status.\x20It\x20shows\x20which\x20status\x20a\x20stream\x20job\
    \x20is\x20now.\n\n\n\n\x03\x05\x02\x01\x12\x03_\x05\x13\n\x0b\n\x04\x05\
    \x02\x02\0\x12\x03`\x02\x12\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03`\x02\r\
    \n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03`\x10\x11\n\x0b\n\x04\x05\x02\x02\
    \x01\x12\x03a\x02\x0e\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03a\x02\t\n\
    \x0c\n\x05\x05\x02\x02\x01\x02\x12\x03a\x0c\r\n\x0b\n\x04\x05\x02\x02\
    \x02\x12\x03b\x02\x0e\n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03b\x02\t\n\
    \x0c\n\x05\x05\x02\x02\x02\x02\x12\x03b\x0c\r\n\x0b\n\x04\x05\x02\x02\
    \x03\x12\x03c\x02\r\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\x03c\x02\x08\n\
    \x0c\n\x05\x05\x02\x02\x03\x02\x12\x03c\x0b\x0c\n\n\n\x02\x04\x08\x12\
    \x04f\0j\x01\n\n\n\x03\x04\x08\x01\x12\x03f\x08\x10\nR\n\x04\x04\x08\x02\
    \0\x12\x03g\x02\x1a\"E\x20job\x20id,\x20for\x20now\x20it\x20is\x20which\
    \x20table\x20the\x20stream\x20graph\x20output\x20will\x20sink\n\n\x0c\n\
    \x05\x04\x08\x02\0\x06\x12\x03g\x02\x0e\n\x0c\n\x05\x04\x08\x02\0\x01\
    \x12\x03g\x0f\x15\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03g\x18\x19\n\x1e\n\
    \x04\x04\x08\x02\x01\x12\x03h\x02(\"\x11\x20graph\x20structure\n\n\x0c\n\
    \x05\x04\x08\x02\x01\x04\x12\x03h\x02\n\n\x0c\n\x05\x04\x08\x02\x01\x06\
    \x12\x03h\x0b\x1e\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03h\x1f#\n\x0c\n\
    \x05\x04\x08\x02\x01\x03\x12\x03h&'\n\x1f\n\x04\x04\x08\x02\x02\x12\x03i\
    \x02-\"\x12\x20details\x20of\x20nodes\n\n\x0c\n\x05\x04\x08\x02\x02\x06\
    \x12\x03i\x02\"\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03i#(\n\x0c\n\x05\
    \x04\x08\x02\x02\x03\x12\x03i+,b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(DataflowMeta::generated_message_descriptor_data());
            messages.push(OperatorInfo::generated_message_descriptor_data());
            messages.push(ConstOp::generated_message_descriptor_data());
            messages.push(Connector::generated_message_descriptor_data());
            messages.push(ConnectionBasic::generated_message_descriptor_data());
            messages.push(Options::generated_message_descriptor_data());
            messages.push(KafkaOptions::generated_message_descriptor_data());
            messages.push(QueryEngineOptions::generated_message_descriptor_data());
            messages.push(Dataflow::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(ConnectorTypeEnum::generated_enum_descriptor_data());
            enums.push(OperatorType::generated_enum_descriptor_data());
            enums.push(DataflowStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
