// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct ResourceId {
    // message fields
    pub resource_id: ::std::string::String,
    pub namespace_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceId {
    fn default() -> &'a ResourceId {
        <ResourceId as ::protobuf::Message>::default_instance()
    }
}

impl ResourceId {
    pub fn new() -> ResourceId {
        ::std::default::Default::default()
    }

    // string resource_id = 1;


    pub fn get_resource_id(&self) -> &str {
        &self.resource_id
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: ::std::string::String) {
        self.resource_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_id(&mut self) -> &mut ::std::string::String {
        &mut self.resource_id
    }

    // Take field
    pub fn take_resource_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_id, ::std::string::String::new())
    }

    // string namespace_id = 2;


    pub fn get_namespace_id(&self) -> &str {
        &self.namespace_id
    }
    pub fn clear_namespace_id(&mut self) {
        self.namespace_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace_id(&mut self, v: ::std::string::String) {
        self.namespace_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace_id(&mut self) -> &mut ::std::string::String {
        &mut self.namespace_id
    }

    // Take field
    pub fn take_namespace_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ResourceId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_id);
        }
        if !self.namespace_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.namespace_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_id.is_empty() {
            os.write_string(1, &self.resource_id)?;
        }
        if !self.namespace_id.is_empty() {
            os.write_string(2, &self.namespace_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceId {
        ResourceId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_id",
                |m: &ResourceId| { &m.resource_id },
                |m: &mut ResourceId| { &mut m.resource_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace_id",
                |m: &ResourceId| { &m.namespace_id },
                |m: &mut ResourceId| { &mut m.namespace_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceId>(
                "ResourceId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceId {
        static instance: ::protobuf::rt::LazyV2<ResourceId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceId::new)
    }
}

impl ::protobuf::Clear for ResourceId {
    fn clear(&mut self) {
        self.resource_id.clear();
        self.namespace_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub status: ::std::string::String,
    pub err_msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // string status = 1;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // string err_msg = 2;


    pub fn get_err_msg(&self) -> &str {
        &self.err_msg
    }
    pub fn clear_err_msg(&mut self) {
        self.err_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_msg(&mut self, v: ::std::string::String) {
        self.err_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_msg(&mut self) -> &mut ::std::string::String {
        &mut self.err_msg
    }

    // Take field
    pub fn take_err_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        if !self.err_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        if !self.err_msg.is_empty() {
            os.write_string(2, &self.err_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &Response| { &m.status },
                |m: &mut Response| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "err_msg",
                |m: &Response| { &m.err_msg },
                |m: &mut Response| { &mut m.err_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.status.clear();
        self.err_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HostAddr {
    // message fields
    pub host: ::std::string::String,
    pub port: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HostAddr {
    fn default() -> &'a HostAddr {
        <HostAddr as ::protobuf::Message>::default_instance()
    }
}

impl HostAddr {
    pub fn new() -> HostAddr {
        ::std::default::Default::default()
    }

    // string host = 1;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    // uint32 port = 2;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }
}

impl ::protobuf::Message for HostAddr {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HostAddr {
        HostAddr::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host",
                |m: &HostAddr| { &m.host },
                |m: &mut HostAddr| { &mut m.host },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &HostAddr| { &m.port },
                |m: &mut HostAddr| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HostAddr>(
                "HostAddr",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HostAddr {
        static instance: ::protobuf::rt::LazyV2<HostAddr> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HostAddr::new)
    }
}

impl ::protobuf::Clear for HostAddr {
    fn clear(&mut self) {
        self.host.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HostAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HostAddr {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Time {
    // message fields
    pub millis: u64,
    pub seconds: u64,
    pub minutes: u32,
    pub hours: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Time {
    fn default() -> &'a Time {
        <Time as ::protobuf::Message>::default_instance()
    }
}

impl Time {
    pub fn new() -> Time {
        ::std::default::Default::default()
    }

    // uint64 millis = 1;


    pub fn get_millis(&self) -> u64 {
        self.millis
    }
    pub fn clear_millis(&mut self) {
        self.millis = 0;
    }

    // Param is passed by value, moved
    pub fn set_millis(&mut self, v: u64) {
        self.millis = v;
    }

    // uint64 seconds = 2;


    pub fn get_seconds(&self) -> u64 {
        self.seconds
    }
    pub fn clear_seconds(&mut self) {
        self.seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_seconds(&mut self, v: u64) {
        self.seconds = v;
    }

    // uint32 minutes = 3;


    pub fn get_minutes(&self) -> u32 {
        self.minutes
    }
    pub fn clear_minutes(&mut self) {
        self.minutes = 0;
    }

    // Param is passed by value, moved
    pub fn set_minutes(&mut self, v: u32) {
        self.minutes = v;
    }

    // uint32 hours = 4;


    pub fn get_hours(&self) -> u32 {
        self.hours
    }
    pub fn clear_hours(&mut self) {
        self.hours = 0;
    }

    // Param is passed by value, moved
    pub fn set_hours(&mut self, v: u32) {
        self.hours = v;
    }
}

impl ::protobuf::Message for Time {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.millis = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seconds = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minutes = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hours = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.millis != 0 {
            my_size += ::protobuf::rt::value_size(1, self.millis, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seconds != 0 {
            my_size += ::protobuf::rt::value_size(2, self.seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minutes != 0 {
            my_size += ::protobuf::rt::value_size(3, self.minutes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hours != 0 {
            my_size += ::protobuf::rt::value_size(4, self.hours, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.millis != 0 {
            os.write_uint64(1, self.millis)?;
        }
        if self.seconds != 0 {
            os.write_uint64(2, self.seconds)?;
        }
        if self.minutes != 0 {
            os.write_uint32(3, self.minutes)?;
        }
        if self.hours != 0 {
            os.write_uint32(4, self.hours)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Time {
        Time::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "millis",
                |m: &Time| { &m.millis },
                |m: &mut Time| { &mut m.millis },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "seconds",
                |m: &Time| { &m.seconds },
                |m: &mut Time| { &mut m.seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "minutes",
                |m: &Time| { &m.minutes },
                |m: &mut Time| { &mut m.minutes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hours",
                |m: &Time| { &m.hours },
                |m: &mut Time| { &mut m.hours },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Time>(
                "Time",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Time {
        static instance: ::protobuf::rt::LazyV2<Time> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Time::new)
    }
}

impl ::protobuf::Clear for Time {
    fn clear(&mut self) {
        self.millis = 0;
        self.seconds = 0;
        self.minutes = 0;
        self.hours = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Time {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Time {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DataTypeEnum {
    DATA_TYPE_ENUM_UNSPECIFIED = 0,
    DATA_TYPE_ENUM_BIGINT = 1,
    DATA_TYPE_ENUM_NUMBER = 2,
    DATA_TYPE_ENUM_NULL = 3,
    DATA_TYPE_ENUM_STRING = 4,
    DATA_TYPE_ENUM_BOOLEAN = 5,
    DATA_TYPE_ENUM_OBJECT = 6,
    DATA_TYPE_ENUM_ARRAY = 7,
}

impl ::protobuf::ProtobufEnum for DataTypeEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataTypeEnum> {
        match value {
            0 => ::std::option::Option::Some(DataTypeEnum::DATA_TYPE_ENUM_UNSPECIFIED),
            1 => ::std::option::Option::Some(DataTypeEnum::DATA_TYPE_ENUM_BIGINT),
            2 => ::std::option::Option::Some(DataTypeEnum::DATA_TYPE_ENUM_NUMBER),
            3 => ::std::option::Option::Some(DataTypeEnum::DATA_TYPE_ENUM_NULL),
            4 => ::std::option::Option::Some(DataTypeEnum::DATA_TYPE_ENUM_STRING),
            5 => ::std::option::Option::Some(DataTypeEnum::DATA_TYPE_ENUM_BOOLEAN),
            6 => ::std::option::Option::Some(DataTypeEnum::DATA_TYPE_ENUM_OBJECT),
            7 => ::std::option::Option::Some(DataTypeEnum::DATA_TYPE_ENUM_ARRAY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DataTypeEnum] = &[
            DataTypeEnum::DATA_TYPE_ENUM_UNSPECIFIED,
            DataTypeEnum::DATA_TYPE_ENUM_BIGINT,
            DataTypeEnum::DATA_TYPE_ENUM_NUMBER,
            DataTypeEnum::DATA_TYPE_ENUM_NULL,
            DataTypeEnum::DATA_TYPE_ENUM_STRING,
            DataTypeEnum::DATA_TYPE_ENUM_BOOLEAN,
            DataTypeEnum::DATA_TYPE_ENUM_OBJECT,
            DataTypeEnum::DATA_TYPE_ENUM_ARRAY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DataTypeEnum>("DataTypeEnum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DataTypeEnum {
}

impl ::std::default::Default for DataTypeEnum {
    fn default() -> Self {
        DataTypeEnum::DATA_TYPE_ENUM_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for DataTypeEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorCode {
    ERROR_CODE_UNSPECIFIED = 0,
    ERROR_CODE_RESOURCE_NOT_FOUND = 1,
    ERROR_CODE_RPC_UNIMPLEMENTED = 2,
    ERROR_CODE_RPC_UNAVAILABLE = 3,
    ERROR_CODE_RPC_UNAUTHORIZED = 4,
    ERROR_CODE_RPC_INVALID_ARGUMENT = 5,
    ERROR_CODE_RPC_PERMISSION_DENIED = 6,
    ERROR_CODE_INTERNAL_ERROR = 7,
    ERROR_CODE_TOO_MANY_REQUEST = 8,
    ERROR_CODE_RPC_BIND_FAILED = 9,
    ERROR_CODE_GOOGLE_AUTH_FAILED = 10,
    ERROR_CODE_DATAFLOW_OPERATOR_INFO_MISSING = 11,
}

impl ::protobuf::ProtobufEnum for ErrorCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
        match value {
            0 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_RESOURCE_NOT_FOUND),
            2 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_RPC_UNIMPLEMENTED),
            3 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_RPC_UNAVAILABLE),
            4 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_RPC_UNAUTHORIZED),
            5 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_RPC_INVALID_ARGUMENT),
            6 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_RPC_PERMISSION_DENIED),
            7 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_INTERNAL_ERROR),
            8 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_TOO_MANY_REQUEST),
            9 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_RPC_BIND_FAILED),
            10 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_GOOGLE_AUTH_FAILED),
            11 => ::std::option::Option::Some(ErrorCode::ERROR_CODE_DATAFLOW_OPERATOR_INFO_MISSING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorCode] = &[
            ErrorCode::ERROR_CODE_UNSPECIFIED,
            ErrorCode::ERROR_CODE_RESOURCE_NOT_FOUND,
            ErrorCode::ERROR_CODE_RPC_UNIMPLEMENTED,
            ErrorCode::ERROR_CODE_RPC_UNAVAILABLE,
            ErrorCode::ERROR_CODE_RPC_UNAUTHORIZED,
            ErrorCode::ERROR_CODE_RPC_INVALID_ARGUMENT,
            ErrorCode::ERROR_CODE_RPC_PERMISSION_DENIED,
            ErrorCode::ERROR_CODE_INTERNAL_ERROR,
            ErrorCode::ERROR_CODE_TOO_MANY_REQUEST,
            ErrorCode::ERROR_CODE_RPC_BIND_FAILED,
            ErrorCode::ERROR_CODE_GOOGLE_AUTH_FAILED,
            ErrorCode::ERROR_CODE_DATAFLOW_OPERATOR_INFO_MISSING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ErrorCode>("ErrorCode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ErrorCode {
}

impl ::std::default::Default for ErrorCode {
    fn default() -> Self {
        ErrorCode::ERROR_CODE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13common/common.proto\x12\x06common\"P\n\nResourceId\x12\x1f\n\x0bre\
    source_id\x18\x01\x20\x01(\tR\nresourceId\x12!\n\x0cnamespace_id\x18\x02\
    \x20\x01(\tR\x0bnamespaceId\";\n\x08Response\x12\x16\n\x06status\x18\x01\
    \x20\x01(\tR\x06status\x12\x17\n\x07err_msg\x18\x02\x20\x01(\tR\x06errMs\
    g\"2\n\x08HostAddr\x12\x12\n\x04host\x18\x01\x20\x01(\tR\x04host\x12\x12\
    \n\x04port\x18\x02\x20\x01(\rR\x04port\"h\n\x04Time\x12\x16\n\x06millis\
    \x18\x01\x20\x01(\x04R\x06millis\x12\x18\n\x07seconds\x18\x02\x20\x01(\
    \x04R\x07seconds\x12\x18\n\x07minutes\x18\x03\x20\x01(\rR\x07minutes\x12\
    \x14\n\x05hours\x18\x04\x20\x01(\rR\x05hours*\xe9\x01\n\x0cDataTypeEnum\
    \x12\x1e\n\x1aDATA_TYPE_ENUM_UNSPECIFIED\x10\0\x12\x19\n\x15DATA_TYPE_EN\
    UM_BIGINT\x10\x01\x12\x19\n\x15DATA_TYPE_ENUM_NUMBER\x10\x02\x12\x17\n\
    \x13DATA_TYPE_ENUM_NULL\x10\x03\x12\x19\n\x15DATA_TYPE_ENUM_STRING\x10\
    \x04\x12\x1a\n\x16DATA_TYPE_ENUM_BOOLEAN\x10\x05\x12\x19\n\x15DATA_TYPE_\
    ENUM_OBJECT\x10\x06\x12\x18\n\x14DATA_TYPE_ENUM_ARRAY\x10\x07*\xaa\x03\n\
    \tErrorCode\x12\x1a\n\x16ERROR_CODE_UNSPECIFIED\x10\0\x12!\n\x1dERROR_CO\
    DE_RESOURCE_NOT_FOUND\x10\x01\x12\x20\n\x1cERROR_CODE_RPC_UNIMPLEMENTED\
    \x10\x02\x12\x1e\n\x1aERROR_CODE_RPC_UNAVAILABLE\x10\x03\x12\x1f\n\x1bER\
    ROR_CODE_RPC_UNAUTHORIZED\x10\x04\x12#\n\x1fERROR_CODE_RPC_INVALID_ARGUM\
    ENT\x10\x05\x12$\n\x20ERROR_CODE_RPC_PERMISSION_DENIED\x10\x06\x12\x1d\n\
    \x19ERROR_CODE_INTERNAL_ERROR\x10\x07\x12\x1f\n\x1bERROR_CODE_TOO_MANY_R\
    EQUEST\x10\x08\x12\x1e\n\x1aERROR_CODE_RPC_BIND_FAILED\x10\t\x12!\n\x1dE\
    RROR_CODE_GOOGLE_AUTH_FAILED\x10\n\x12-\n)ERROR_CODE_DATAFLOW_OPERATOR_I\
    NFO_MISSING\x10\x0bB7\n\x1dlightflus.proto.common.commonZ\x16lightflus/p\
    roto/commonJ\xeb\x0c\n\x06\x12\x04\0\08\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\x08\n\x01\x08\x12\x03\x03\0-\n\
    \t\n\x02\x08\x0b\x12\x03\x03\0-\n\x08\n\x01\x08\x12\x03\x04\06\n\t\n\x02\
    \x08\x01\x12\x03\x04\06\n.\n\x02\x04\0\x12\x04\t\0\x0c\x01\x1a\"*\nJobId\
    ,\x20represents\x20a\x20stream\x20job.\n\n\n\n\x03\x04\0\x01\x12\x03\t\
    \x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02\x19\n\x0c\n\x05\x04\0\x02\
    \0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\t\x14\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x17\x18\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x0b\x02\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\t\x15\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x0b\x18\x19\n!\n\x02\x04\x01\x12\x04\x0f\0\x12\x01\x1a\x15\
    \x20common\x20Rpc\x20Response\n\n\n\n\x03\x04\x01\x01\x12\x03\x0f\x08\
    \x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x10\x02\x14\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x10\
    \t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10\x12\x13\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x11\x02\x15\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\
    \x11\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x11\t\x10\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03\x11\x13\x14\n\n\n\x02\x04\x02\x12\x04\
    \x14\0\x17\x01\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08\x10\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03\x15\x02\x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x15\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x15\t\r\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x15\x10\x11\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x16\x02\x12\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x16\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x16\t\r\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03\x16\x10\x11\n\n\n\x02\x05\0\x12\x04\x19\0\"\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x19\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x1a\x02!\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x1a\x02\x1c\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x1a\x1f\x20\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x1b\x02\x1c\n\x0c\
    \n\x05\x05\0\x02\x01\x01\x12\x03\x1b\x02\x17\n\x0c\n\x05\x05\0\x02\x01\
    \x02\x12\x03\x1b\x1a\x1b\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x1c\x02\x1c\n\
    \x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x1c\x02\x17\n\x0c\n\x05\x05\0\x02\
    \x02\x02\x12\x03\x1c\x1a\x1b\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x1d\x02\
    \x1a\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x1d\x02\x15\n\x0c\n\x05\x05\0\
    \x02\x03\x02\x12\x03\x1d\x18\x19\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x1e\
    \x02\x1c\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x1e\x02\x17\n\x0c\n\x05\
    \x05\0\x02\x04\x02\x12\x03\x1e\x1a\x1b\n\x0b\n\x04\x05\0\x02\x05\x12\x03\
    \x1f\x02\x1d\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x1f\x02\x18\n\x0c\n\
    \x05\x05\0\x02\x05\x02\x12\x03\x1f\x1b\x1c\n\x0b\n\x04\x05\0\x02\x06\x12\
    \x03\x20\x02\x1c\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\x20\x02\x17\n\x0c\
    \n\x05\x05\0\x02\x06\x02\x12\x03\x20\x1a\x1b\n\x0b\n\x04\x05\0\x02\x07\
    \x12\x03!\x02\x1b\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03!\x02\x16\n\x0c\n\
    \x05\x05\0\x02\x07\x02\x12\x03!\x19\x1a\n\n\n\x02\x04\x03\x12\x04$\0)\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03$\x08\x0c\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03%\x02\x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03%\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03%\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03%\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03&\x02\x15\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03&\t\x10\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03&\x13\x14\n\x0b\n\
    \x04\x04\x03\x02\x02\x12\x03'\x02\x15\n\x0c\n\x05\x04\x03\x02\x02\x05\
    \x12\x03'\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03'\t\x10\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03'\x13\x14\n\x0b\n\x04\x04\x03\x02\x03\
    \x12\x03(\x02\x13\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03(\x02\x08\n\x0c\
    \n\x05\x04\x03\x02\x03\x01\x12\x03(\t\x0e\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x03(\x11\x12\n\n\n\x02\x05\x01\x12\x04+\08\x01\n\n\n\x03\x05\
    \x01\x01\x12\x03+\x05\x0e\n\x0b\n\x04\x05\x01\x02\0\x12\x03,\x02\x1d\n\
    \x0c\n\x05\x05\x01\x02\0\x01\x12\x03,\x02\x18\n\x0c\n\x05\x05\x01\x02\0\
    \x02\x12\x03,\x1b\x1c\n\x0b\n\x04\x05\x01\x02\x01\x12\x03-\x02$\n\x0c\n\
    \x05\x05\x01\x02\x01\x01\x12\x03-\x02\x1f\n\x0c\n\x05\x05\x01\x02\x01\
    \x02\x12\x03-\"#\n\x0b\n\x04\x05\x01\x02\x02\x12\x03.\x02#\n\x0c\n\x05\
    \x05\x01\x02\x02\x01\x12\x03.\x02\x1e\n\x0c\n\x05\x05\x01\x02\x02\x02\
    \x12\x03.!\"\n\x0b\n\x04\x05\x01\x02\x03\x12\x03/\x02!\n\x0c\n\x05\x05\
    \x01\x02\x03\x01\x12\x03/\x02\x1c\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\
    \x03/\x1f\x20\n\x0b\n\x04\x05\x01\x02\x04\x12\x030\x02\"\n\x0c\n\x05\x05\
    \x01\x02\x04\x01\x12\x030\x02\x1d\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\
    \x030\x20!\n\x0b\n\x04\x05\x01\x02\x05\x12\x031\x02&\n\x0c\n\x05\x05\x01\
    \x02\x05\x01\x12\x031\x02!\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x031$%\n\
    \x0b\n\x04\x05\x01\x02\x06\x12\x032\x02'\n\x0c\n\x05\x05\x01\x02\x06\x01\
    \x12\x032\x02\"\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x032%&\n\x0b\n\x04\
    \x05\x01\x02\x07\x12\x033\x02\x20\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\
    \x033\x02\x1b\n\x0c\n\x05\x05\x01\x02\x07\x02\x12\x033\x1e\x1f\n\x0b\n\
    \x04\x05\x01\x02\x08\x12\x034\x02\"\n\x0c\n\x05\x05\x01\x02\x08\x01\x12\
    \x034\x02\x1d\n\x0c\n\x05\x05\x01\x02\x08\x02\x12\x034\x20!\n\x0b\n\x04\
    \x05\x01\x02\t\x12\x035\x02!\n\x0c\n\x05\x05\x01\x02\t\x01\x12\x035\x02\
    \x1c\n\x0c\n\x05\x05\x01\x02\t\x02\x12\x035\x1f\x20\n\x0b\n\x04\x05\x01\
    \x02\n\x12\x036\x02%\n\x0c\n\x05\x05\x01\x02\n\x01\x12\x036\x02\x1f\n\
    \x0c\n\x05\x05\x01\x02\n\x02\x12\x036\"$\n\x0b\n\x04\x05\x01\x02\x0b\x12\
    \x037\x021\n\x0c\n\x05\x05\x01\x02\x0b\x01\x12\x037\x02+\n\x0c\n\x05\x05\
    \x01\x02\x0b\x02\x12\x037.0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
