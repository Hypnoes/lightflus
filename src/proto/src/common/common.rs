// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct JobId {
    // message fields
    pub table_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JobId {
    fn default() -> &'a JobId {
        <JobId as ::protobuf::Message>::default_instance()
    }
}

impl JobId {
    pub fn new() -> JobId {
        ::std::default::Default::default()
    }

    // uint32 table_id = 1;


    pub fn get_table_id(&self) -> u32 {
        self.table_id
    }
    pub fn clear_table_id(&mut self) {
        self.table_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_table_id(&mut self, v: u32) {
        self.table_id = v;
    }
}

impl ::protobuf::Message for JobId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.table_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.table_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.table_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.table_id != 0 {
            os.write_uint32(1, self.table_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobId {
        JobId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "table_id",
                |m: &JobId| { &m.table_id },
                |m: &mut JobId| { &mut m.table_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<JobId>(
                "JobId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static JobId {
        static instance: ::protobuf::rt::LazyV2<JobId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(JobId::new)
    }
}

impl ::protobuf::Clear for JobId {
    fn clear(&mut self) {
        self.table_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub status: ::std::string::String,
    pub err_msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // string status = 1;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // string err_msg = 2;


    pub fn get_err_msg(&self) -> &str {
        &self.err_msg
    }
    pub fn clear_err_msg(&mut self) {
        self.err_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_err_msg(&mut self, v: ::std::string::String) {
        self.err_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_err_msg(&mut self) -> &mut ::std::string::String {
        &mut self.err_msg
    }

    // Take field
    pub fn take_err_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.err_msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.err_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        if !self.err_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        if !self.err_msg.is_empty() {
            os.write_string(2, &self.err_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &Response| { &m.status },
                |m: &mut Response| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "err_msg",
                |m: &Response| { &m.err_msg },
                |m: &mut Response| { &mut m.err_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.status.clear();
        self.err_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HostAddr {
    // message fields
    pub host: ::std::string::String,
    pub port: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HostAddr {
    fn default() -> &'a HostAddr {
        <HostAddr as ::protobuf::Message>::default_instance()
    }
}

impl HostAddr {
    pub fn new() -> HostAddr {
        ::std::default::Default::default()
    }

    // string host = 1;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    // uint32 port = 2;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }
}

impl ::protobuf::Message for HostAddr {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HostAddr {
        HostAddr::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host",
                |m: &HostAddr| { &m.host },
                |m: &mut HostAddr| { &mut m.host },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &HostAddr| { &m.port },
                |m: &mut HostAddr| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HostAddr>(
                "HostAddr",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HostAddr {
        static instance: ::protobuf::rt::LazyV2<HostAddr> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HostAddr::new)
    }
}

impl ::protobuf::Clear for HostAddr {
    fn clear(&mut self) {
        self.host.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HostAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HostAddr {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Sort {
    // message fields
    pub field_name: ::std::string::String,
    pub field_type: Sort_SortType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sort {
    fn default() -> &'a Sort {
        <Sort as ::protobuf::Message>::default_instance()
    }
}

impl Sort {
    pub fn new() -> Sort {
        ::std::default::Default::default()
    }

    // string field_name = 1;


    pub fn get_field_name(&self) -> &str {
        &self.field_name
    }
    pub fn clear_field_name(&mut self) {
        self.field_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_name(&mut self, v: ::std::string::String) {
        self.field_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_name(&mut self) -> &mut ::std::string::String {
        &mut self.field_name
    }

    // Take field
    pub fn take_field_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_name, ::std::string::String::new())
    }

    // .common.Sort.SortType type = 2;


    pub fn get_field_type(&self) -> Sort_SortType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Sort_SortType::DESC;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Sort_SortType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for Sort {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_name);
        }
        if self.field_type != Sort_SortType::DESC {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_name.is_empty() {
            os.write_string(1, &self.field_name)?;
        }
        if self.field_type != Sort_SortType::DESC {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sort {
        Sort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field_name",
                |m: &Sort| { &m.field_name },
                |m: &mut Sort| { &mut m.field_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Sort_SortType>>(
                "type",
                |m: &Sort| { &m.field_type },
                |m: &mut Sort| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Sort>(
                "Sort",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Sort {
        static instance: ::protobuf::rt::LazyV2<Sort> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Sort::new)
    }
}

impl ::protobuf::Clear for Sort {
    fn clear(&mut self) {
        self.field_name.clear();
        self.field_type = Sort_SortType::DESC;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sort {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Sort_SortType {
    DESC = 0,
    ASC = 1,
}

impl ::protobuf::ProtobufEnum for Sort_SortType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Sort_SortType> {
        match value {
            0 => ::std::option::Option::Some(Sort_SortType::DESC),
            1 => ::std::option::Option::Some(Sort_SortType::ASC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Sort_SortType] = &[
            Sort_SortType::DESC,
            Sort_SortType::ASC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Sort_SortType>("Sort.SortType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Sort_SortType {
}

impl ::std::default::Default for Sort_SortType {
    fn default() -> Self {
        Sort_SortType::DESC
    }
}

impl ::protobuf::reflect::ProtobufValue for Sort_SortType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13common/common.proto\x12\x06common\"\"\n\x05JobId\x12\x19\n\x08tabl\
    e_id\x18\x01\x20\x01(\rR\x07tableId\";\n\x08Response\x12\x16\n\x06status\
    \x18\x01\x20\x01(\tR\x06status\x12\x17\n\x07err_msg\x18\x02\x20\x01(\tR\
    \x06errMsg\"2\n\x08HostAddr\x12\x12\n\x04host\x18\x01\x20\x01(\tR\x04hos\
    t\x12\x12\n\x04port\x18\x02\x20\x01(\rR\x04port\"o\n\x04Sort\x12\x1d\n\n\
    field_name\x18\x01\x20\x01(\tR\tfieldName\x12)\n\x04type\x18\x02\x20\x01\
    (\x0e2\x15.common.Sort.SortTypeR\x04type\"\x1d\n\x08SortType\x12\x08\n\
    \x04DESC\x10\0\x12\x07\n\x03ASC\x10\x01B\x1fZ\x1dtableflow/alpha/common/\
    commonJ\x84\x06\n\x06\x12\x04\0\0\x1f\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\x08\n\x01\x08\x12\x03\x03\04\n\
    \t\n\x02\x08\x0b\x12\x03\x03\04\nk\n\x02\x04\0\x12\x04\x08\0\n\x01\x1a_*\
    \nJobId,\x20represents\x20a\x20stream\x20job.\x20Follow\x20Table\x20as\
    \x20Stream,\x20a\x20stream\x20job\x20is\x20bounded\x20with\x20a\x20table\
    \n\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \t\x02\x16\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\t\t\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x14\
    \x15\n!\n\x02\x04\x01\x12\x04\r\0\x10\x01\x1a\x15\x20common\x20Rpc\x20Re\
    sponse\n\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x10\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\x0e\x02\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\t\x0f\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\x0e\x12\x13\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x02\
    \x15\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x0f\t\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x0f\x13\x14\n\n\n\x02\x04\x02\x12\x04\x12\0\x15\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03\x12\x08\x10\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x02\
    \x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x13\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\
    \x10\x11\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x14\x02\x12\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03\x14\t\r\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x14\x10\x11\n\n\n\
    \x02\x04\x03\x12\x04\x17\0\x1f\x01\n\n\n\x03\x04\x03\x01\x12\x03\x17\x08\
    \x0c\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x18\x02\x18\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x18\
    \t\x13\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x18\x16\x17\n\x0b\n\x04\x04\
    \x03\x02\x01\x12\x03\x19\x02\x14\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\
    \x19\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x19\x0b\x0f\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03\x19\x12\x13\n\x0c\n\x04\x04\x03\x04\0\
    \x12\x04\x1b\x02\x1e\x03\n\x0c\n\x05\x04\x03\x04\0\x01\x12\x03\x1b\x07\
    \x0f\n\r\n\x06\x04\x03\x04\0\x02\0\x12\x03\x1c\x04\r\n\x0e\n\x07\x04\x03\
    \x04\0\x02\0\x01\x12\x03\x1c\x04\x08\n\x0e\n\x07\x04\x03\x04\0\x02\0\x02\
    \x12\x03\x1c\x0b\x0c\n\r\n\x06\x04\x03\x04\0\x02\x01\x12\x03\x1d\x04\x0c\
    \n\x0e\n\x07\x04\x03\x04\0\x02\x01\x01\x12\x03\x1d\x04\x07\n\x0e\n\x07\
    \x04\x03\x04\0\x02\x01\x02\x12\x03\x1d\n\x0bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
