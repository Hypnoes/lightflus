// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `common/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

/// *
/// JobId, represents a stream job. Follow Table as Stream, a stream job is bounded with a field of table
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.JobId)
pub struct JobId {
    // message fields
    // @@protoc_insertion_point(field:common.JobId.table_id)
    pub table_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:common.JobId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobId {
    fn default() -> &'a JobId {
        <JobId as ::protobuf::Message>::default_instance()
    }
}

impl JobId {
    pub fn new() -> JobId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table_id",
            |m: &JobId| { &m.table_id },
            |m: &mut JobId| { &mut m.table_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobId>(
            "JobId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobId {
    const NAME: &'static str = "JobId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.table_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.table_id != 0 {
            os.write_uint32(1, self.table_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.table_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.table_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobId {
        JobId::new()
    }

    fn clear(&mut self) {
        self.table_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobId {
        static instance: JobId = JobId {
            table_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  common Rpc Response
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:common.Response.status)
    pub status: ::std::string::String,
    // @@protoc_insertion_point(field:common.Response.err_msg)
    pub err_msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:common.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Response| { &m.status },
            |m: &mut Response| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "err_msg",
            |m: &Response| { &m.err_msg },
            |m: &mut Response| { &mut m.err_msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.status = is.read_string()?;
                },
                18 => {
                    self.err_msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        if !self.err_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        if !self.err_msg.is_empty() {
            os.write_string(2, &self.err_msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.status.clear();
        self.err_msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            status: ::std::string::String::new(),
            err_msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:common.Sort)
pub struct Sort {
    // message fields
    // @@protoc_insertion_point(field:common.Sort.field_name)
    pub field_name: ::std::string::String,
    // @@protoc_insertion_point(field:common.Sort.type)
    pub type_: ::protobuf::EnumOrUnknown<sort::SortType>,
    // special fields
    // @@protoc_insertion_point(special_field:common.Sort.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sort {
    fn default() -> &'a Sort {
        <Sort as ::protobuf::Message>::default_instance()
    }
}

impl Sort {
    pub fn new() -> Sort {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field_name",
            |m: &Sort| { &m.field_name },
            |m: &mut Sort| { &mut m.field_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Sort| { &m.type_ },
            |m: &mut Sort| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sort>(
            "Sort",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sort {
    const NAME: &'static str = "Sort";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field_name = is.read_string()?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.field_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_name);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(sort::SortType::DESC) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.field_name.is_empty() {
            os.write_string(1, &self.field_name)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(sort::SortType::DESC) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sort {
        Sort::new()
    }

    fn clear(&mut self) {
        self.field_name.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(sort::SortType::DESC);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sort {
        static instance: Sort = Sort {
            field_name: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sort {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sort").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sort {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Sort`
pub mod sort {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:common.Sort.SortType)
    pub enum SortType {
        // @@protoc_insertion_point(enum_value:common.Sort.SortType.DESC)
        DESC = 0,
        // @@protoc_insertion_point(enum_value:common.Sort.SortType.ASC)
        ASC = 1,
    }

    impl ::protobuf::Enum for SortType {
        const NAME: &'static str = "SortType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<SortType> {
            match value {
                0 => ::std::option::Option::Some(SortType::DESC),
                1 => ::std::option::Option::Some(SortType::ASC),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [SortType] = &[
            SortType::DESC,
            SortType::ASC,
        ];
    }

    impl ::protobuf::EnumFull for SortType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Sort.SortType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for SortType {
        fn default() -> Self {
            SortType::DESC
        }
    }

    impl SortType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SortType>("Sort.SortType")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13common/common.proto\x12\x06common\"\"\n\x05JobId\x12\x19\n\x08tabl\
    e_id\x18\x01\x20\x01(\rR\x07tableId\";\n\x08Response\x12\x16\n\x06status\
    \x18\x01\x20\x01(\tR\x06status\x12\x17\n\x07err_msg\x18\x02\x20\x01(\tR\
    \x06errMsg\"o\n\x04Sort\x12\x1d\n\nfield_name\x18\x01\x20\x01(\tR\tfield\
    Name\x12)\n\x04type\x18\x02\x20\x01(\x0e2\x15.common.Sort.SortTypeR\x04t\
    ype\"\x1d\n\x08SortType\x12\x08\n\x04DESC\x10\0\x12\x07\n\x03ASC\x10\x01\
    B\x07Z\x05protoJ\x87\x05\n\x06\x12\x04\0\0\x1a\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\x08\n\x01\x08\x12\x03\
    \x03\0\x1c\n\t\n\x02\x08\x0b\x12\x03\x03\0\x1c\nt\n\x02\x04\0\x12\x04\
    \x08\0\n\x01\x1ah*\nJobId,\x20represents\x20a\x20stream\x20job.\x20Follo\
    w\x20Table\x20as\x20Stream,\x20a\x20stream\x20job\x20is\x20bounded\x20wi\
    th\x20a\x20field\x20of\x20table\n\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\r\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x02\x16\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\t\x11\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\t\x14\x15\n!\n\x02\x04\x01\x12\x04\r\0\x10\
    \x01\x1a\x15\x20common\x20Rpc\x20Response\n\n\n\n\x03\x04\x01\x01\x12\
    \x03\r\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0e\x02\x14\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x0e\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x12\x13\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x0f\x02\x15\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0f\t\x10\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\x13\x14\n\n\n\x02\x04\x02\x12\
    \x04\x12\0\x1a\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\x0c\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x13\x02\x18\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    \x13\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\t\x13\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x13\x16\x17\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x14\x02\x14\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x14\x02\n\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03\x14\x0b\x0f\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x14\x12\x13\n\x0c\n\x04\x04\x02\x04\0\x12\x04\x16\x02\
    \x19\x03\n\x0c\n\x05\x04\x02\x04\0\x01\x12\x03\x16\x07\x0f\n\r\n\x06\x04\
    \x02\x04\0\x02\0\x12\x03\x17\x04\r\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\
    \x12\x03\x17\x04\x08\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\x12\x03\x17\x0b\
    \x0c\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\x03\x18\x04\x0c\n\x0e\n\x07\x04\
    \x02\x04\0\x02\x01\x01\x12\x03\x18\x04\x07\n\x0e\n\x07\x04\x02\x04\0\x02\
    \x01\x02\x12\x03\x18\n\x0bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(JobId::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            messages.push(Sort::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(sort::SortType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
