// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `coordinator/coordinator.proto`

use crate::common::{common, stream};

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct CreateStreamGraphResponse {
    // message fields
    pub status: stream::DataflowStatus,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateStreamGraphResponse {
    fn default() -> &'a CreateStreamGraphResponse {
        <CreateStreamGraphResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateStreamGraphResponse {
    pub fn new() -> CreateStreamGraphResponse {
        ::std::default::Default::default()
    }

    // .common.DataflowStatus status = 1;


    pub fn get_status(&self) -> stream::DataflowStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = stream::DataflowStatus::INITIALIZED;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: stream::DataflowStatus) {
        self.status = v;
    }
}

impl ::protobuf::Message for CreateStreamGraphResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != stream::DataflowStatus::INITIALIZED {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != stream::DataflowStatus::INITIALIZED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateStreamGraphResponse {
        CreateStreamGraphResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<stream::DataflowStatus>>(
                "status",
                |m: &CreateStreamGraphResponse| { &m.status },
                |m: &mut CreateStreamGraphResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateStreamGraphResponse>(
                "CreateStreamGraphResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateStreamGraphResponse {
        static instance: ::protobuf::rt::LazyV2<CreateStreamGraphResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateStreamGraphResponse::new)
    }
}

impl ::protobuf::Clear for CreateStreamGraphResponse {
    fn clear(&mut self) {
        self.status = stream::DataflowStatus::INITIALIZED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateStreamGraphResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateStreamGraphResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TerminateDataflowRequest {
    // message fields
    pub job_id: ::protobuf::SingularPtrField<common::JobId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TerminateDataflowRequest {
    fn default() -> &'a TerminateDataflowRequest {
        <TerminateDataflowRequest as ::protobuf::Message>::default_instance()
    }
}

impl TerminateDataflowRequest {
    pub fn new() -> TerminateDataflowRequest {
        ::std::default::Default::default()
    }

    // .common.JobId job_id = 1;


    pub fn get_job_id(&self) -> &common::JobId {
        self.job_id.as_ref().unwrap_or_else(|| <common::JobId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    pub fn has_job_id(&self) -> bool {
        self.job_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: common::JobId) {
        self.job_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut common::JobId {
        if self.job_id.is_none() {
            self.job_id.set_default();
        }
        self.job_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_job_id(&mut self) -> common::JobId {
        self.job_id.take().unwrap_or_else(|| common::JobId::new())
    }
}

impl ::protobuf::Message for TerminateDataflowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.job_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.job_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.job_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.job_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TerminateDataflowRequest {
        TerminateDataflowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::JobId>>(
                "job_id",
                |m: &TerminateDataflowRequest| { &m.job_id },
                |m: &mut TerminateDataflowRequest| { &mut m.job_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TerminateDataflowRequest>(
                "TerminateDataflowRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TerminateDataflowRequest {
        static instance: ::protobuf::rt::LazyV2<TerminateDataflowRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TerminateDataflowRequest::new)
    }
}

impl ::protobuf::Clear for TerminateDataflowRequest {
    fn clear(&mut self) {
        self.job_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TerminateDataflowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TerminateDataflowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TerminateDataflowResponse {
    // message fields
    pub status: stream::DataflowStatus,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TerminateDataflowResponse {
    fn default() -> &'a TerminateDataflowResponse {
        <TerminateDataflowResponse as ::protobuf::Message>::default_instance()
    }
}

impl TerminateDataflowResponse {
    pub fn new() -> TerminateDataflowResponse {
        ::std::default::Default::default()
    }

    // .common.DataflowStatus status = 1;


    pub fn get_status(&self) -> stream::DataflowStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = stream::DataflowStatus::INITIALIZED;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: stream::DataflowStatus) {
        self.status = v;
    }
}

impl ::protobuf::Message for TerminateDataflowResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != stream::DataflowStatus::INITIALIZED {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != stream::DataflowStatus::INITIALIZED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TerminateDataflowResponse {
        TerminateDataflowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<stream::DataflowStatus>>(
                "status",
                |m: &TerminateDataflowResponse| { &m.status },
                |m: &mut TerminateDataflowResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TerminateDataflowResponse>(
                "TerminateDataflowResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TerminateDataflowResponse {
        static instance: ::protobuf::rt::LazyV2<TerminateDataflowResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TerminateDataflowResponse::new)
    }
}

impl ::protobuf::Clear for TerminateDataflowResponse {
    fn clear(&mut self) {
        self.status = stream::DataflowStatus::INITIALIZED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TerminateDataflowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TerminateDataflowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDataflowRequest {
    // message fields
    pub job_id: ::protobuf::SingularPtrField<common::JobId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDataflowRequest {
    fn default() -> &'a GetDataflowRequest {
        <GetDataflowRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDataflowRequest {
    pub fn new() -> GetDataflowRequest {
        ::std::default::Default::default()
    }

    // .common.JobId job_id = 1;


    pub fn get_job_id(&self) -> &common::JobId {
        self.job_id.as_ref().unwrap_or_else(|| <common::JobId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    pub fn has_job_id(&self) -> bool {
        self.job_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: common::JobId) {
        self.job_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut common::JobId {
        if self.job_id.is_none() {
            self.job_id.set_default();
        }
        self.job_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_job_id(&mut self) -> common::JobId {
        self.job_id.take().unwrap_or_else(|| common::JobId::new())
    }
}

impl ::protobuf::Message for GetDataflowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.job_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.job_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.job_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.job_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDataflowRequest {
        GetDataflowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<common::JobId>>(
                "job_id",
                |m: &GetDataflowRequest| { &m.job_id },
                |m: &mut GetDataflowRequest| { &mut m.job_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetDataflowRequest>(
                "GetDataflowRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetDataflowRequest {
        static instance: ::protobuf::rt::LazyV2<GetDataflowRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetDataflowRequest::new)
    }
}

impl ::protobuf::Clear for GetDataflowRequest {
    fn clear(&mut self) {
        self.job_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDataflowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDataflowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDataflowResponse {
    // message fields
    pub status: stream::DataflowStatus,
    pub graph: ::protobuf::SingularPtrField<stream::Dataflow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDataflowResponse {
    fn default() -> &'a GetDataflowResponse {
        <GetDataflowResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDataflowResponse {
    pub fn new() -> GetDataflowResponse {
        ::std::default::Default::default()
    }

    // .common.DataflowStatus status = 1;


    pub fn get_status(&self) -> stream::DataflowStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = stream::DataflowStatus::INITIALIZED;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: stream::DataflowStatus) {
        self.status = v;
    }

    // .common.Dataflow graph = 2;


    pub fn get_graph(&self) -> &stream::Dataflow {
        self.graph.as_ref().unwrap_or_else(|| <stream::Dataflow as ::protobuf::Message>::default_instance())
    }
    pub fn clear_graph(&mut self) {
        self.graph.clear();
    }

    pub fn has_graph(&self) -> bool {
        self.graph.is_some()
    }

    // Param is passed by value, moved
    pub fn set_graph(&mut self, v: stream::Dataflow) {
        self.graph = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_graph(&mut self) -> &mut stream::Dataflow {
        if self.graph.is_none() {
            self.graph.set_default();
        }
        self.graph.as_mut().unwrap()
    }

    // Take field
    pub fn take_graph(&mut self) -> stream::Dataflow {
        self.graph.take().unwrap_or_else(|| stream::Dataflow::new())
    }
}

impl ::protobuf::Message for GetDataflowResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.graph {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.graph)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != stream::DataflowStatus::INITIALIZED {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if let Some(ref v) = self.graph.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != stream::DataflowStatus::INITIALIZED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let Some(ref v) = self.graph.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDataflowResponse {
        GetDataflowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<stream::DataflowStatus>>(
                "status",
                |m: &GetDataflowResponse| { &m.status },
                |m: &mut GetDataflowResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<stream::Dataflow>>(
                "graph",
                |m: &GetDataflowResponse| { &m.graph },
                |m: &mut GetDataflowResponse| { &mut m.graph },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetDataflowResponse>(
                "GetDataflowResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetDataflowResponse {
        static instance: ::protobuf::rt::LazyV2<GetDataflowResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetDataflowResponse::new)
    }
}

impl ::protobuf::Clear for GetDataflowResponse {
    fn clear(&mut self) {
        self.status = stream::DataflowStatus::INITIALIZED;
        self.graph.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDataflowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDataflowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dcoordinator/coordinator.proto\x12\x0bcoordinator\x1a\x12common/pro\
    be.proto\x1a\x13common/stream.proto\x1a\x13common/common.proto\"K\n\x19C\
    reateStreamGraphResponse\x12.\n\x06status\x18\x01\x20\x01(\x0e2\x16.comm\
    on.DataflowStatusR\x06status\"@\n\x18TerminateDataflowRequest\x12$\n\x06\
    job_id\x18\x01\x20\x01(\x0b2\r.common.JobIdR\x05jobId\"K\n\x19TerminateD\
    ataflowResponse\x12.\n\x06status\x18\x01\x20\x01(\x0e2\x16.common.Datafl\
    owStatusR\x06status\":\n\x12GetDataflowRequest\x12$\n\x06job_id\x18\x01\
    \x20\x01(\x0b2\r.common.JobIdR\x05jobId\"m\n\x13GetDataflowResponse\x12.\
    \n\x06status\x18\x01\x20\x01(\x0e2\x16.common.DataflowStatusR\x06status\
    \x12&\n\x05graph\x18\x02\x20\x01(\x0b2\x10.common.DataflowR\x05graph2\
    \xd0\x02\n\x0eCoordinatorApi\x126\n\x05Probe\x12\x14.common.ProbeRequest\
    \x1a\x15.common.ProbeResponse\"\0\x12L\n\x0eCreateDataflow\x12\x10.commo\
    n.Dataflow\x1a&.coordinator.CreateStreamGraphResponse\"\0\x12d\n\x11Term\
    inateDataflow\x12%.coordinator.TerminateDataflowRequest\x1a&.coordinator\
    .TerminateDataflowResponse\"\0\x12R\n\x0bGetDataflow\x12\x1f.coordinator\
    .GetDataflowRequest\x1a\x20.coordinator.GetDataflowResponse\"\0B\x07Z\
    \x05protoJ\x88\x06\n\x06\x12\x04\0\0#\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0\x14\n\t\n\x02\x03\0\x12\x03\x03\0\x1c\
    \n\t\n\x02\x03\x01\x12\x03\x04\0\x1d\n\t\n\x02\x03\x02\x12\x03\x05\0\x1d\
    \n\x08\n\x01\x08\x12\x03\x07\0\x1c\n\t\n\x02\x08\x0b\x12\x03\x07\0\x1c\n\
    \n\n\x02\x06\0\x12\x04\t\0\x0e\x01\n\n\n\x03\x06\0\x01\x12\x03\t\x08\x16\
    \n\x0b\n\x04\x06\0\x02\0\x12\x03\n\x02B\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\n\x06\x0b\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\n\x0c\x1f\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\n*>\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x0b\x02L\
    \n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x0b\x06\x14\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x03\x0b\x15$\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0b/H\n\
    \x0b\n\x04\x06\0\x02\x02\x12\x03\x0c\x02X\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03\x0c\x06\x17\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0c\x180\n\
    \x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x0c;T\n\x0b\n\x04\x06\0\x02\x03\x12\
    \x03\r\x02F\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\r\x06\x11\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x03\r\x12$\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\
    \r/B\n\n\n\x02\x04\0\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x10\x08!\n\x0b\n\x04\x04\0\x02\0\x12\x03\x11\x02#\n\x0c\n\x05\x04\0\x02\
    \0\x06\x12\x03\x11\x02\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x18\
    \x1e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x11!\"\n\n\n\x02\x04\x01\x12\
    \x04\x14\0\x16\x01\n\n\n\x03\x04\x01\x01\x12\x03\x14\x08\x20\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x15\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\
    \x15\x02\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x15\x0f\x15\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x15\x18\x19\n\n\n\x02\x04\x02\x12\x04\x18\
    \0\x1a\x01\n\n\n\x03\x04\x02\x01\x12\x03\x18\x08!\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03\x19\x02#\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x19\x02\
    \x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x19\x18\x1e\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x19!\"\n\n\n\x02\x04\x03\x12\x04\x1c\0\x1e\x01\n\
    \n\n\x03\x04\x03\x01\x12\x03\x1c\x08\x1a\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03\x1d\x02\x1a\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1d\x02\x0e\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03\x1d\x0f\x15\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x1d\x18\x19\n\n\n\x02\x04\x04\x12\x04\x20\0#\x01\n\n\n\x03\
    \x04\x04\x01\x12\x03\x20\x08\x1b\n\x0b\n\x04\x04\x04\x02\0\x12\x03!\x02#\
    \n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03!\x02\x17\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03!\x18\x1e\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03!!\"\n\x0b\
    \n\x04\x04\x04\x02\x01\x12\x03\"\x02\x1c\n\x0c\n\x05\x04\x04\x02\x01\x06\
    \x12\x03\"\x02\x11\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\"\x12\x17\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\"\x1a\x1bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
