// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: common/stream.proto

package stream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "lightflus/proto/common"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
//Stream Graph Status. It shows which status a stream job is now.
type DataflowStatus int32

const (
	DataflowStatus_INITIALIZED DataflowStatus = 0
	DataflowStatus_RUNNING     DataflowStatus = 1
	DataflowStatus_CLOSING     DataflowStatus = 2
	DataflowStatus_CLOSED      DataflowStatus = 3
)

// Enum value maps for DataflowStatus.
var (
	DataflowStatus_name = map[int32]string{
		0: "INITIALIZED",
		1: "RUNNING",
		2: "CLOSING",
		3: "CLOSED",
	}
	DataflowStatus_value = map[string]int32{
		"INITIALIZED": 0,
		"RUNNING":     1,
		"CLOSING":     2,
		"CLOSED":      3,
	}
)

func (x DataflowStatus) Enum() *DataflowStatus {
	p := new(DataflowStatus)
	*p = x
	return p
}

func (x DataflowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_stream_proto_enumTypes[0].Descriptor()
}

func (DataflowStatus) Type() protoreflect.EnumType {
	return &file_common_stream_proto_enumTypes[0]
}

func (x DataflowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowStatus.Descriptor instead.
func (DataflowStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{0}
}

//*
//StreamGraph metadata, it stores the structural information of a stream graph
type DataflowMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center    uint32   `protobuf:"varint,1,opt,name=center,proto3" json:"center,omitempty"`              // center node id
	Neighbors []uint32 `protobuf:"varint,2,rep,packed,name=neighbors,proto3" json:"neighbors,omitempty"` // center's neighbors
}

func (x *DataflowMeta) Reset() {
	*x = DataflowMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowMeta) ProtoMessage() {}

func (x *DataflowMeta) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowMeta.ProtoReflect.Descriptor instead.
func (*DataflowMeta) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{0}
}

func (x *DataflowMeta) GetCenter() uint32 {
	if x != nil {
		return x.Center
	}
	return 0
}

func (x *DataflowMeta) GetNeighbors() []uint32 {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

//*
//OperatorInfo, stores detail information of an operator
type OperatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint32           `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	HostAddr   *common.HostAddr `protobuf:"bytes,2,opt,name=host_addr,json=hostAddr,proto3" json:"host_addr,omitempty"` // host addr configs
	Config     *StreamConfig    `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`                     // stream config for operator
	Upstreams  []uint32         `protobuf:"varint,4,rep,packed,name=upstreams,proto3" json:"upstreams,omitempty"`       // upstreams operator_id
	// optional for different operator type
	//
	// Types that are assignable to Details:
	//	*OperatorInfo_Source
	//	*OperatorInfo_Sink
	//	*OperatorInfo_Mapper
	//	*OperatorInfo_Filter
	//	*OperatorInfo_KeyBy
	//	*OperatorInfo_Reducer
	//	*OperatorInfo_FlatMap
	Details isOperatorInfo_Details `protobuf_oneof:"details"`
}

func (x *OperatorInfo) Reset() {
	*x = OperatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorInfo) ProtoMessage() {}

func (x *OperatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorInfo.ProtoReflect.Descriptor instead.
func (*OperatorInfo) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{1}
}

func (x *OperatorInfo) GetOperatorId() uint32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *OperatorInfo) GetHostAddr() *common.HostAddr {
	if x != nil {
		return x.HostAddr
	}
	return nil
}

func (x *OperatorInfo) GetConfig() *StreamConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OperatorInfo) GetUpstreams() []uint32 {
	if x != nil {
		return x.Upstreams
	}
	return nil
}

func (m *OperatorInfo) GetDetails() isOperatorInfo_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *OperatorInfo) GetSource() *Source {
	if x, ok := x.GetDetails().(*OperatorInfo_Source); ok {
		return x.Source
	}
	return nil
}

func (x *OperatorInfo) GetSink() *Sink {
	if x, ok := x.GetDetails().(*OperatorInfo_Sink); ok {
		return x.Sink
	}
	return nil
}

func (x *OperatorInfo) GetMapper() *Mapper {
	if x, ok := x.GetDetails().(*OperatorInfo_Mapper); ok {
		return x.Mapper
	}
	return nil
}

func (x *OperatorInfo) GetFilter() *Filter {
	if x, ok := x.GetDetails().(*OperatorInfo_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *OperatorInfo) GetKeyBy() *KeyBy {
	if x, ok := x.GetDetails().(*OperatorInfo_KeyBy); ok {
		return x.KeyBy
	}
	return nil
}

func (x *OperatorInfo) GetReducer() *Reducer {
	if x, ok := x.GetDetails().(*OperatorInfo_Reducer); ok {
		return x.Reducer
	}
	return nil
}

func (x *OperatorInfo) GetFlatMap() *FlatMap {
	if x, ok := x.GetDetails().(*OperatorInfo_FlatMap); ok {
		return x.FlatMap
	}
	return nil
}

type isOperatorInfo_Details interface {
	isOperatorInfo_Details()
}

type OperatorInfo_Source struct {
	Source *Source `protobuf:"bytes,5,opt,name=source,proto3,oneof"` // for source
}

type OperatorInfo_Sink struct {
	Sink *Sink `protobuf:"bytes,6,opt,name=sink,proto3,oneof"` // for sink
}

type OperatorInfo_Mapper struct {
	Mapper *Mapper `protobuf:"bytes,7,opt,name=mapper,proto3,oneof"`
}

type OperatorInfo_Filter struct {
	Filter *Filter `protobuf:"bytes,8,opt,name=filter,proto3,oneof"`
}

type OperatorInfo_KeyBy struct {
	KeyBy *KeyBy `protobuf:"bytes,9,opt,name=key_by,json=keyBy,proto3,oneof"`
}

type OperatorInfo_Reducer struct {
	Reducer *Reducer `protobuf:"bytes,10,opt,name=reducer,proto3,oneof"`
}

type OperatorInfo_FlatMap struct {
	FlatMap *FlatMap `protobuf:"bytes,11,opt,name=flat_map,json=flatMap,proto3,oneof"` //    Join join = 11;
}

func (*OperatorInfo_Source) isOperatorInfo_Details() {}

func (*OperatorInfo_Sink) isOperatorInfo_Details() {}

func (*OperatorInfo_Mapper) isOperatorInfo_Details() {}

func (*OperatorInfo_Filter) isOperatorInfo_Details() {}

func (*OperatorInfo_KeyBy) isOperatorInfo_Details() {}

func (*OperatorInfo_Reducer) isOperatorInfo_Details() {}

func (*OperatorInfo_FlatMap) isOperatorInfo_Details() {}

type Reducer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Reducer_Func
	Value isReducer_Value `protobuf_oneof:"value"`
}

func (x *Reducer) Reset() {
	*x = Reducer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reducer) ProtoMessage() {}

func (x *Reducer) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reducer.ProtoReflect.Descriptor instead.
func (*Reducer) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{2}
}

func (m *Reducer) GetValue() isReducer_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Reducer) GetFunc() *Func {
	if x, ok := x.GetValue().(*Reducer_Func); ok {
		return x.Func
	}
	return nil
}

type isReducer_Value interface {
	isReducer_Value()
}

type Reducer_Func struct {
	Func *Func `protobuf:"bytes,1,opt,name=func,proto3,oneof"`
}

func (*Reducer_Func) isReducer_Value() {}

type FlatMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*FlatMap_Func
	Value isFlatMap_Value `protobuf_oneof:"value"`
}

func (x *FlatMap) Reset() {
	*x = FlatMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlatMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatMap) ProtoMessage() {}

func (x *FlatMap) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatMap.ProtoReflect.Descriptor instead.
func (*FlatMap) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{3}
}

func (m *FlatMap) GetValue() isFlatMap_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FlatMap) GetFunc() *Func {
	if x, ok := x.GetValue().(*FlatMap_Func); ok {
		return x.Func
	}
	return nil
}

type isFlatMap_Value interface {
	isFlatMap_Value()
}

type FlatMap_Func struct {
	Func *Func `protobuf:"bytes,1,opt,name=func,proto3,oneof"`
}

func (*FlatMap_Func) isFlatMap_Value() {}

type Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Join_StreamJoin_
	Value isJoin_Value `protobuf_oneof:"value"`
}

func (x *Join) Reset() {
	*x = Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{4}
}

func (m *Join) GetValue() isJoin_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Join) GetStreamJoin() *Join_StreamJoin {
	if x, ok := x.GetValue().(*Join_StreamJoin_); ok {
		return x.StreamJoin
	}
	return nil
}

type isJoin_Value interface {
	isJoin_Value()
}

type Join_StreamJoin_ struct {
	StreamJoin *Join_StreamJoin `protobuf:"bytes,1,opt,name=stream_join,json=streamJoin,proto3,oneof"`
}

func (*Join_StreamJoin_) isJoin_Value() {}

type Mapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Mapper_Func
	Value isMapper_Value `protobuf_oneof:"value"`
}

func (x *Mapper) Reset() {
	*x = Mapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mapper) ProtoMessage() {}

func (x *Mapper) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mapper.ProtoReflect.Descriptor instead.
func (*Mapper) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{5}
}

func (m *Mapper) GetValue() isMapper_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Mapper) GetFunc() *Func {
	if x, ok := x.GetValue().(*Mapper_Func); ok {
		return x.Func
	}
	return nil
}

type isMapper_Value interface {
	isMapper_Value()
}

type Mapper_Func struct {
	Func *Func `protobuf:"bytes,1,opt,name=func,proto3,oneof"`
}

func (*Mapper_Func) isMapper_Value() {}

type Func struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *Func) Reset() {
	*x = Func{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Func) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Func) ProtoMessage() {}

func (x *Func) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Func.ProtoReflect.Descriptor instead.
func (*Func) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{6}
}

func (x *Func) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Filter_Func
	Value isFilter_Value `protobuf_oneof:"value"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{7}
}

func (m *Filter) GetValue() isFilter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Filter) GetFunc() *Func {
	if x, ok := x.GetValue().(*Filter_Func); ok {
		return x.Func
	}
	return nil
}

type isFilter_Value interface {
	isFilter_Value()
}

type Filter_Func struct {
	Func *Func `protobuf:"bytes,1,opt,name=func,proto3,oneof"`
}

func (*Filter_Func) isFilter_Value() {}

type KeyBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*KeyBy_Func
	Value isKeyBy_Value `protobuf_oneof:"value"`
}

func (x *KeyBy) Reset() {
	*x = KeyBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyBy) ProtoMessage() {}

func (x *KeyBy) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyBy.ProtoReflect.Descriptor instead.
func (*KeyBy) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{8}
}

func (m *KeyBy) GetValue() isKeyBy_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *KeyBy) GetFunc() *Func {
	if x, ok := x.GetValue().(*KeyBy_Func); ok {
		return x.Func
	}
	return nil
}

type isKeyBy_Value interface {
	isKeyBy_Value()
}

type KeyBy_Func struct {
	Func *Func `protobuf:"bytes,1,opt,name=func,proto3,oneof"`
}

func (*KeyBy_Func) isKeyBy_Value() {}

type Sink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Desc:
	//	*Sink_Kafka
	//	*Sink_Mysql
	//	*Sink_Redis
	Desc isSink_Desc `protobuf_oneof:"desc"`
}

func (x *Sink) Reset() {
	*x = Sink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sink) ProtoMessage() {}

func (x *Sink) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sink.ProtoReflect.Descriptor instead.
func (*Sink) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{9}
}

func (m *Sink) GetDesc() isSink_Desc {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (x *Sink) GetKafka() *KafkaDesc {
	if x, ok := x.GetDesc().(*Sink_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *Sink) GetMysql() *MysqlDesc {
	if x, ok := x.GetDesc().(*Sink_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (x *Sink) GetRedis() *RedisDesc {
	if x, ok := x.GetDesc().(*Sink_Redis); ok {
		return x.Redis
	}
	return nil
}

type isSink_Desc interface {
	isSink_Desc()
}

type Sink_Kafka struct {
	Kafka *KafkaDesc `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

type Sink_Mysql struct {
	Mysql *MysqlDesc `protobuf:"bytes,2,opt,name=mysql,proto3,oneof"`
}

type Sink_Redis struct {
	Redis *RedisDesc `protobuf:"bytes,3,opt,name=redis,proto3,oneof"`
}

func (*Sink_Kafka) isSink_Desc() {}

func (*Sink_Mysql) isSink_Desc() {}

func (*Sink_Redis) isSink_Desc() {}

//*
//Constant operator
type ConstOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`                              // value of constant, format: [<flag byte>, <data bytes>]
	OperatorId uint32 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // operator id
}

func (x *ConstOp) Reset() {
	*x = ConstOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstOp) ProtoMessage() {}

func (x *ConstOp) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstOp.ProtoReflect.Descriptor instead.
func (*ConstOp) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{10}
}

func (x *ConstOp) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ConstOp) GetOperatorId() uint32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Desc:
	//	*Source_Kafka
	Desc isSource_Desc `protobuf_oneof:"desc"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{11}
}

func (m *Source) GetDesc() isSource_Desc {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (x *Source) GetKafka() *KafkaDesc {
	if x, ok := x.GetDesc().(*Source_Kafka); ok {
		return x.Kafka
	}
	return nil
}

type isSource_Desc interface {
	isSource_Desc()
}

type Source_Kafka struct {
	Kafka *KafkaDesc `protobuf:"bytes,3,opt,name=kafka,proto3,oneof"`
}

func (*Source_Kafka) isSource_Desc() {}

type KafkaDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers  []string                `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	Topic    string                  `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Opts     *KafkaDesc_KafkaOptions `protobuf:"bytes,3,opt,name=opts,proto3" json:"opts,omitempty"`
	DataType common.DataTypeEnum     `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=common.DataTypeEnum" json:"data_type,omitempty"`
}

func (x *KafkaDesc) Reset() {
	*x = KafkaDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaDesc) ProtoMessage() {}

func (x *KafkaDesc) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaDesc.ProtoReflect.Descriptor instead.
func (*KafkaDesc) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{12}
}

func (x *KafkaDesc) GetBrokers() []string {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *KafkaDesc) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaDesc) GetOpts() *KafkaDesc_KafkaOptions {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *KafkaDesc) GetDataType() common.DataTypeEnum {
	if x != nil {
		return x.DataType
	}
	return common.DataTypeEnum(0)
}

type MysqlDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionOpts *MysqlDesc_ConnectionOpts `protobuf:"bytes,1,opt,name=connection_opts,json=connectionOpts,proto3" json:"connection_opts,omitempty"`
	Statement      *MysqlDesc_Statement      `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *MysqlDesc) Reset() {
	*x = MysqlDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlDesc) ProtoMessage() {}

func (x *MysqlDesc) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlDesc.ProtoReflect.Descriptor instead.
func (*MysqlDesc) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{13}
}

func (x *MysqlDesc) GetConnectionOpts() *MysqlDesc_ConnectionOpts {
	if x != nil {
		return x.ConnectionOpts
	}
	return nil
}

func (x *MysqlDesc) GetStatement() *MysqlDesc_Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type RedisDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionOpts *RedisDesc_ConnectionOpts `protobuf:"bytes,1,opt,name=connection_opts,json=connectionOpts,proto3" json:"connection_opts,omitempty"`
	KeyExtractor   *Func                     `protobuf:"bytes,2,opt,name=key_extractor,json=keyExtractor,proto3" json:"key_extractor,omitempty"`
	ValueExtractor *Func                     `protobuf:"bytes,3,opt,name=value_extractor,json=valueExtractor,proto3" json:"value_extractor,omitempty"`
}

func (x *RedisDesc) Reset() {
	*x = RedisDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisDesc) ProtoMessage() {}

func (x *RedisDesc) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisDesc.ProtoReflect.Descriptor instead.
func (*RedisDesc) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{14}
}

func (x *RedisDesc) GetConnectionOpts() *RedisDesc_ConnectionOpts {
	if x != nil {
		return x.ConnectionOpts
	}
	return nil
}

func (x *RedisDesc) GetKeyExtractor() *Func {
	if x != nil {
		return x.KeyExtractor
	}
	return nil
}

func (x *RedisDesc) GetValueExtractor() *Func {
	if x != nil {
		return x.ValueExtractor
	}
	return nil
}

type Dataflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId *common.ResourceId       `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`                                                                             // job id, for now it is which table the stream graph output will sink
	Meta  []*DataflowMeta          `protobuf:"bytes,2,rep,name=meta,proto3" json:"meta,omitempty"`                                                                                            // graph structure
	Nodes map[uint32]*OperatorInfo `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // details of nodes
}

func (x *Dataflow) Reset() {
	*x = Dataflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataflow) ProtoMessage() {}

func (x *Dataflow) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataflow.ProtoReflect.Descriptor instead.
func (*Dataflow) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{15}
}

func (x *Dataflow) GetJobId() *common.ResourceId {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *Dataflow) GetMeta() []*DataflowMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Dataflow) GetNodes() map[uint32]*OperatorInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type StreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window  *Window  `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	Trigger *Trigger `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *StreamConfig) Reset() {
	*x = StreamConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConfig) ProtoMessage() {}

func (x *StreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConfig.ProtoReflect.Descriptor instead.
func (*StreamConfig) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{16}
}

func (x *StreamConfig) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *StreamConfig) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Window_Fixed
	//	*Window_Slide
	//	*Window_Session
	Value isWindow_Value `protobuf_oneof:"value"`
}

func (x *Window) Reset() {
	*x = Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{17}
}

func (m *Window) GetValue() isWindow_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Window) GetFixed() *Window_FixedWindow {
	if x, ok := x.GetValue().(*Window_Fixed); ok {
		return x.Fixed
	}
	return nil
}

func (x *Window) GetSlide() *Window_SlidingWindow {
	if x, ok := x.GetValue().(*Window_Slide); ok {
		return x.Slide
	}
	return nil
}

func (x *Window) GetSession() *Window_SessionWindow {
	if x, ok := x.GetValue().(*Window_Session); ok {
		return x.Session
	}
	return nil
}

type isWindow_Value interface {
	isWindow_Value()
}

type Window_Fixed struct {
	Fixed *Window_FixedWindow `protobuf:"bytes,1,opt,name=fixed,proto3,oneof"`
}

type Window_Slide struct {
	Slide *Window_SlidingWindow `protobuf:"bytes,2,opt,name=slide,proto3,oneof"`
}

type Window_Session struct {
	Session *Window_SessionWindow `protobuf:"bytes,3,opt,name=session,proto3,oneof"`
}

func (*Window_Fixed) isWindow_Value() {}

func (*Window_Slide) isWindow_Value() {}

func (*Window_Session) isWindow_Value() {}

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Trigger_Watermark_
	Value isTrigger_Value `protobuf_oneof:"value"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{18}
}

func (m *Trigger) GetValue() isTrigger_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Trigger) GetWatermark() *Trigger_Watermark {
	if x, ok := x.GetValue().(*Trigger_Watermark_); ok {
		return x.Watermark
	}
	return nil
}

type isTrigger_Value interface {
	isTrigger_Value()
}

type Trigger_Watermark_ struct {
	Watermark *Trigger_Watermark `protobuf:"bytes,1,opt,name=watermark,proto3,oneof"`
}

func (*Trigger_Watermark_) isTrigger_Value() {}

type Join_StreamJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Func       *Func  `protobuf:"bytes,2,opt,name=func,proto3" json:"func,omitempty"`
}

func (x *Join_StreamJoin) Reset() {
	*x = Join_StreamJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join_StreamJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join_StreamJoin) ProtoMessage() {}

func (x *Join_StreamJoin) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join_StreamJoin.ProtoReflect.Descriptor instead.
func (*Join_StreamJoin) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Join_StreamJoin) GetOperatorId() uint32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *Join_StreamJoin) GetFunc() *Func {
	if x != nil {
		return x.Func
	}
	return nil
}

type KafkaDesc_KafkaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Opt:
	//	*KafkaDesc_KafkaOptions_Group
	//	*KafkaDesc_KafkaOptions_Partition
	Opt isKafkaDesc_KafkaOptions_Opt `protobuf_oneof:"opt"`
}

func (x *KafkaDesc_KafkaOptions) Reset() {
	*x = KafkaDesc_KafkaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaDesc_KafkaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaDesc_KafkaOptions) ProtoMessage() {}

func (x *KafkaDesc_KafkaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaDesc_KafkaOptions.ProtoReflect.Descriptor instead.
func (*KafkaDesc_KafkaOptions) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{12, 0}
}

func (m *KafkaDesc_KafkaOptions) GetOpt() isKafkaDesc_KafkaOptions_Opt {
	if m != nil {
		return m.Opt
	}
	return nil
}

func (x *KafkaDesc_KafkaOptions) GetGroup() string {
	if x, ok := x.GetOpt().(*KafkaDesc_KafkaOptions_Group); ok {
		return x.Group
	}
	return ""
}

func (x *KafkaDesc_KafkaOptions) GetPartition() uint32 {
	if x, ok := x.GetOpt().(*KafkaDesc_KafkaOptions_Partition); ok {
		return x.Partition
	}
	return 0
}

type isKafkaDesc_KafkaOptions_Opt interface {
	isKafkaDesc_KafkaOptions_Opt()
}

type KafkaDesc_KafkaOptions_Group struct {
	Group string `protobuf:"bytes,1,opt,name=group,proto3,oneof"`
}

type KafkaDesc_KafkaOptions_Partition struct {
	Partition uint32 `protobuf:"varint,2,opt,name=partition,proto3,oneof"`
}

func (*KafkaDesc_KafkaOptions_Group) isKafkaDesc_KafkaOptions_Opt() {}

func (*KafkaDesc_KafkaOptions_Partition) isKafkaDesc_KafkaOptions_Opt() {}

type MysqlDesc_ConnectionOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *MysqlDesc_ConnectionOpts) Reset() {
	*x = MysqlDesc_ConnectionOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlDesc_ConnectionOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlDesc_ConnectionOpts) ProtoMessage() {}

func (x *MysqlDesc_ConnectionOpts) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlDesc_ConnectionOpts.ProtoReflect.Descriptor instead.
func (*MysqlDesc_ConnectionOpts) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{13, 0}
}

func (x *MysqlDesc_ConnectionOpts) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MysqlDesc_ConnectionOpts) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MysqlDesc_ConnectionOpts) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MysqlDesc_ConnectionOpts) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type MysqlDesc_Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statement  string                           `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
	Extractors []*MysqlDesc_Statement_Extractor `protobuf:"bytes,2,rep,name=extractors,proto3" json:"extractors,omitempty"`
}

func (x *MysqlDesc_Statement) Reset() {
	*x = MysqlDesc_Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlDesc_Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlDesc_Statement) ProtoMessage() {}

func (x *MysqlDesc_Statement) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlDesc_Statement.ProtoReflect.Descriptor instead.
func (*MysqlDesc_Statement) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{13, 1}
}

func (x *MysqlDesc_Statement) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *MysqlDesc_Statement) GetExtractors() []*MysqlDesc_Statement_Extractor {
	if x != nil {
		return x.Extractors
	}
	return nil
}

type MysqlDesc_Statement_Extractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Extractor string `protobuf:"bytes,2,opt,name=extractor,proto3" json:"extractor,omitempty"`
}

func (x *MysqlDesc_Statement_Extractor) Reset() {
	*x = MysqlDesc_Statement_Extractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlDesc_Statement_Extractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlDesc_Statement_Extractor) ProtoMessage() {}

func (x *MysqlDesc_Statement_Extractor) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlDesc_Statement_Extractor.ProtoReflect.Descriptor instead.
func (*MysqlDesc_Statement_Extractor) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{13, 1, 0}
}

func (x *MysqlDesc_Statement_Extractor) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MysqlDesc_Statement_Extractor) GetExtractor() string {
	if x != nil {
		return x.Extractor
	}
	return ""
}

type RedisDesc_ConnectionOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Tls      bool   `protobuf:"varint,4,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *RedisDesc_ConnectionOpts) Reset() {
	*x = RedisDesc_ConnectionOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisDesc_ConnectionOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisDesc_ConnectionOpts) ProtoMessage() {}

func (x *RedisDesc_ConnectionOpts) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisDesc_ConnectionOpts.ProtoReflect.Descriptor instead.
func (*RedisDesc_ConnectionOpts) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RedisDesc_ConnectionOpts) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedisDesc_ConnectionOpts) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedisDesc_ConnectionOpts) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *RedisDesc_ConnectionOpts) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

type Window_FixedWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *common.Time `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"` // Only for sliding & fixed window
}

func (x *Window_FixedWindow) Reset() {
	*x = Window_FixedWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window_FixedWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window_FixedWindow) ProtoMessage() {}

func (x *Window_FixedWindow) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window_FixedWindow.ProtoReflect.Descriptor instead.
func (*Window_FixedWindow) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Window_FixedWindow) GetSize() *common.Time {
	if x != nil {
		return x.Size
	}
	return nil
}

type Window_SlidingWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size   *common.Time `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	Period *common.Time `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Window_SlidingWindow) Reset() {
	*x = Window_SlidingWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window_SlidingWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window_SlidingWindow) ProtoMessage() {}

func (x *Window_SlidingWindow) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window_SlidingWindow.ProtoReflect.Descriptor instead.
func (*Window_SlidingWindow) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Window_SlidingWindow) GetSize() *common.Time {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Window_SlidingWindow) GetPeriod() *common.Time {
	if x != nil {
		return x.Period
	}
	return nil
}

type Window_SessionWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout *common.Time `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"` // Only for Session Window
}

func (x *Window_SessionWindow) Reset() {
	*x = Window_SessionWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window_SessionWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window_SessionWindow) ProtoMessage() {}

func (x *Window_SessionWindow) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window_SessionWindow.ProtoReflect.Descriptor instead.
func (*Window_SessionWindow) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{17, 2}
}

func (x *Window_SessionWindow) GetTimeout() *common.Time {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type Trigger_Watermark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkTime *common.Time `protobuf:"bytes,1,opt,name=mark_time,json=markTime,proto3" json:"mark_time,omitempty"`
}

func (x *Trigger_Watermark) Reset() {
	*x = Trigger_Watermark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_stream_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Watermark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Watermark) ProtoMessage() {}

func (x *Trigger_Watermark) ProtoReflect() protoreflect.Message {
	mi := &file_common_stream_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Watermark.ProtoReflect.Descriptor instead.
func (*Trigger_Watermark) Descriptor() ([]byte, []int) {
	return file_common_stream_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Trigger_Watermark) GetMarkTime() *common.Time {
	if x != nil {
		return x.MarkTime
	}
	return nil
}

var File_common_stream_proto protoreflect.FileDescriptor

var file_common_stream_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x13, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x44, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x0c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x62,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x42, 0x79, 0x12,
	0x2b, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08,
	0x66, 0x6c, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x04,
	0x66, 0x75, 0x6e, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a,
	0x07, 0x46, 0x6c, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x3a,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x1a, 0x4f, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x75, 0x6e,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x04, 0x66, 0x75,
	0x6e, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x04, 0x46,
	0x75, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x35, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x75, 0x6e,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x12,
	0x22, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x04, 0x66,
	0x75, 0x6e, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x04, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x12, 0x29, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x40,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x22, 0x3b, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x05,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xf1, 0x01,
	0x0a, 0x09, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x44, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x04, 0x6f,
	0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x44, 0x65, 0x73, 0x63, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12,
	0x31, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x4d, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6f, 0x70,
	0x74, 0x22, 0xbf, 0x03, 0x0a, 0x09, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x78, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x1a,
	0xb1, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x1a, 0x3f, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0d,
	0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x6e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x0a, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x0c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xf8,
	0x02, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x05, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x0a,
	0x0b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x57,
	0x0a, 0x0d, 0x53, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x20, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x37, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x1a, 0x36, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x29, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2a, 0x47, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x42, 0x37, 0x0a, 0x1d, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x66, 0x6c, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5a, 0x16, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x66, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_stream_proto_rawDescOnce sync.Once
	file_common_stream_proto_rawDescData = file_common_stream_proto_rawDesc
)

func file_common_stream_proto_rawDescGZIP() []byte {
	file_common_stream_proto_rawDescOnce.Do(func() {
		file_common_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_stream_proto_rawDescData)
	})
	return file_common_stream_proto_rawDescData
}

var file_common_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_common_stream_proto_goTypes = []interface{}{
	(DataflowStatus)(0),                   // 0: common.DataflowStatus
	(*DataflowMeta)(nil),                  // 1: common.DataflowMeta
	(*OperatorInfo)(nil),                  // 2: common.OperatorInfo
	(*Reducer)(nil),                       // 3: common.Reducer
	(*FlatMap)(nil),                       // 4: common.FlatMap
	(*Join)(nil),                          // 5: common.Join
	(*Mapper)(nil),                        // 6: common.Mapper
	(*Func)(nil),                          // 7: common.Func
	(*Filter)(nil),                        // 8: common.Filter
	(*KeyBy)(nil),                         // 9: common.KeyBy
	(*Sink)(nil),                          // 10: common.Sink
	(*ConstOp)(nil),                       // 11: common.ConstOp
	(*Source)(nil),                        // 12: common.Source
	(*KafkaDesc)(nil),                     // 13: common.KafkaDesc
	(*MysqlDesc)(nil),                     // 14: common.MysqlDesc
	(*RedisDesc)(nil),                     // 15: common.RedisDesc
	(*Dataflow)(nil),                      // 16: common.Dataflow
	(*StreamConfig)(nil),                  // 17: common.StreamConfig
	(*Window)(nil),                        // 18: common.Window
	(*Trigger)(nil),                       // 19: common.Trigger
	(*Join_StreamJoin)(nil),               // 20: common.Join.StreamJoin
	(*KafkaDesc_KafkaOptions)(nil),        // 21: common.KafkaDesc.KafkaOptions
	(*MysqlDesc_ConnectionOpts)(nil),      // 22: common.MysqlDesc.ConnectionOpts
	(*MysqlDesc_Statement)(nil),           // 23: common.MysqlDesc.Statement
	(*MysqlDesc_Statement_Extractor)(nil), // 24: common.MysqlDesc.Statement.Extractor
	(*RedisDesc_ConnectionOpts)(nil),      // 25: common.RedisDesc.ConnectionOpts
	nil,                                   // 26: common.Dataflow.NodesEntry
	(*Window_FixedWindow)(nil),            // 27: common.Window.FixedWindow
	(*Window_SlidingWindow)(nil),          // 28: common.Window.SlidingWindow
	(*Window_SessionWindow)(nil),          // 29: common.Window.SessionWindow
	(*Trigger_Watermark)(nil),             // 30: common.Trigger.Watermark
	(*common.HostAddr)(nil),               // 31: common.HostAddr
	(common.DataTypeEnum)(0),              // 32: common.DataTypeEnum
	(*common.ResourceId)(nil),             // 33: common.ResourceId
	(*common.Time)(nil),                   // 34: common.Time
}
var file_common_stream_proto_depIdxs = []int32{
	31, // 0: common.OperatorInfo.host_addr:type_name -> common.HostAddr
	17, // 1: common.OperatorInfo.config:type_name -> common.StreamConfig
	12, // 2: common.OperatorInfo.source:type_name -> common.Source
	10, // 3: common.OperatorInfo.sink:type_name -> common.Sink
	6,  // 4: common.OperatorInfo.mapper:type_name -> common.Mapper
	8,  // 5: common.OperatorInfo.filter:type_name -> common.Filter
	9,  // 6: common.OperatorInfo.key_by:type_name -> common.KeyBy
	3,  // 7: common.OperatorInfo.reducer:type_name -> common.Reducer
	4,  // 8: common.OperatorInfo.flat_map:type_name -> common.FlatMap
	7,  // 9: common.Reducer.func:type_name -> common.Func
	7,  // 10: common.FlatMap.func:type_name -> common.Func
	20, // 11: common.Join.stream_join:type_name -> common.Join.StreamJoin
	7,  // 12: common.Mapper.func:type_name -> common.Func
	7,  // 13: common.Filter.func:type_name -> common.Func
	7,  // 14: common.KeyBy.func:type_name -> common.Func
	13, // 15: common.Sink.kafka:type_name -> common.KafkaDesc
	14, // 16: common.Sink.mysql:type_name -> common.MysqlDesc
	15, // 17: common.Sink.redis:type_name -> common.RedisDesc
	13, // 18: common.Source.kafka:type_name -> common.KafkaDesc
	21, // 19: common.KafkaDesc.opts:type_name -> common.KafkaDesc.KafkaOptions
	32, // 20: common.KafkaDesc.data_type:type_name -> common.DataTypeEnum
	22, // 21: common.MysqlDesc.connection_opts:type_name -> common.MysqlDesc.ConnectionOpts
	23, // 22: common.MysqlDesc.statement:type_name -> common.MysqlDesc.Statement
	25, // 23: common.RedisDesc.connection_opts:type_name -> common.RedisDesc.ConnectionOpts
	7,  // 24: common.RedisDesc.key_extractor:type_name -> common.Func
	7,  // 25: common.RedisDesc.value_extractor:type_name -> common.Func
	33, // 26: common.Dataflow.job_id:type_name -> common.ResourceId
	1,  // 27: common.Dataflow.meta:type_name -> common.DataflowMeta
	26, // 28: common.Dataflow.nodes:type_name -> common.Dataflow.NodesEntry
	18, // 29: common.StreamConfig.window:type_name -> common.Window
	19, // 30: common.StreamConfig.trigger:type_name -> common.Trigger
	27, // 31: common.Window.fixed:type_name -> common.Window.FixedWindow
	28, // 32: common.Window.slide:type_name -> common.Window.SlidingWindow
	29, // 33: common.Window.session:type_name -> common.Window.SessionWindow
	30, // 34: common.Trigger.watermark:type_name -> common.Trigger.Watermark
	7,  // 35: common.Join.StreamJoin.func:type_name -> common.Func
	24, // 36: common.MysqlDesc.Statement.extractors:type_name -> common.MysqlDesc.Statement.Extractor
	2,  // 37: common.Dataflow.NodesEntry.value:type_name -> common.OperatorInfo
	34, // 38: common.Window.FixedWindow.size:type_name -> common.Time
	34, // 39: common.Window.SlidingWindow.size:type_name -> common.Time
	34, // 40: common.Window.SlidingWindow.period:type_name -> common.Time
	34, // 41: common.Window.SessionWindow.timeout:type_name -> common.Time
	34, // 42: common.Trigger.Watermark.mark_time:type_name -> common.Time
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_common_stream_proto_init() }
func file_common_stream_proto_init() {
	if File_common_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reducer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlatMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Func); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Join_StreamJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaDesc_KafkaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlDesc_ConnectionOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlDesc_Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlDesc_Statement_Extractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisDesc_ConnectionOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window_FixedWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window_SlidingWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window_SessionWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_stream_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Watermark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_stream_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*OperatorInfo_Source)(nil),
		(*OperatorInfo_Sink)(nil),
		(*OperatorInfo_Mapper)(nil),
		(*OperatorInfo_Filter)(nil),
		(*OperatorInfo_KeyBy)(nil),
		(*OperatorInfo_Reducer)(nil),
		(*OperatorInfo_FlatMap)(nil),
	}
	file_common_stream_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Reducer_Func)(nil),
	}
	file_common_stream_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FlatMap_Func)(nil),
	}
	file_common_stream_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Join_StreamJoin_)(nil),
	}
	file_common_stream_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Mapper_Func)(nil),
	}
	file_common_stream_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Filter_Func)(nil),
	}
	file_common_stream_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*KeyBy_Func)(nil),
	}
	file_common_stream_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Sink_Kafka)(nil),
		(*Sink_Mysql)(nil),
		(*Sink_Redis)(nil),
	}
	file_common_stream_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Source_Kafka)(nil),
	}
	file_common_stream_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Window_Fixed)(nil),
		(*Window_Slide)(nil),
		(*Window_Session)(nil),
	}
	file_common_stream_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Trigger_Watermark_)(nil),
	}
	file_common_stream_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*KafkaDesc_KafkaOptions_Group)(nil),
		(*KafkaDesc_KafkaOptions_Partition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_stream_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_stream_proto_goTypes,
		DependencyIndexes: file_common_stream_proto_depIdxs,
		EnumInfos:         file_common_stream_proto_enumTypes,
		MessageInfos:      file_common_stream_proto_msgTypes,
	}.Build()
	File_common_stream_proto = out.File
	file_common_stream_proto_rawDesc = nil
	file_common_stream_proto_goTypes = nil
	file_common_stream_proto_depIdxs = nil
}
