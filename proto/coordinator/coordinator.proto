syntax = "proto3";

package coordinator;
import "common/stream.proto";
import "common/common.proto";

option go_package = "lightflus/proto/coordinator";

/// RPC Api for Coordinator
service CoordinatorApi {
  /// Attempt to deploy a new dataflow and create a JobManager.
  /// Unless bump into network problems, JobManager will be informed the status of the deployed dataflow asynchronously.
  rpc CreateDataflow(common.Dataflow) returns (common.Response) {}
  /// Attempt to terminate a dataflow
  /// Unless bump into network problems, JobManager will be informed the status of the deployed dataflow asynchronously.
  /// After the status is transitioned into TERMINATED, the JobManager will be removed from coordinator
  rpc TerminateDataflow(common.ResourceId) returns (common.Response) {}
  /// Get the details of a dataflow.
  /// The details contains: each operator's status, metrics, basic information, checkpoint status, etc.
  rpc GetDataflow(GetDataflowRequest) returns (common.DataflowStates) {}
  /// Receive ack
  rpc ReceiveAck(common.Ack) returns (common.Response) {}
  /// Receive heartbeat
  rpc ReceiveHeartbeat(common.Heartbeat) returns (common.Response) {}
}

message GetDataflowRequest {
  common.ResourceId job_id = 1;
}